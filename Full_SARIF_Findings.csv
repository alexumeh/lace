result.ruleId,result.message.text,result.message.markdown,location.uri,location.startLine,location.startColumn,location.endLine,location.endColumn,location.snippet,partialFingerprints.primaryLocationLineHash,rule.id,rule.name,rule.defaultLevel,rule.shortDescription,rule.fullDescription,rule.help.text,rule.help.markdown
javascript_lang_hardcoded_secret,Usage of hard-coded secret,,packages/core/src/shared-wallets/add-shared-wallet/generate-key-flow/EnterPassword/EnterPassword.tsx,34,3,34,119,,fee4d82230b5bc2021a40b13713ac804_0,javascript_lang_hardcoded_secret,javascript_lang_hardcoded_secret,error,Usage of hard-coded secret,Usage of hard-coded secret,"## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)","## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)"
javascript_lang_hardcoded_secret,Usage of hard-coded secret,,packages/core/src/ui/components/Account/EnableAccountPasswordPrompt/EnableAccountPasswordPrompt.stories.ts,24,5,24,36,,6d4c8cea11185171cf161f49dc013c55_0,javascript_lang_hardcoded_secret,javascript_lang_hardcoded_secret,error,Usage of hard-coded secret,Usage of hard-coded secret,"## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)","## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)"
javascript_lang_hardcoded_secret,Usage of hard-coded secret,,packages/e2e-tests/src/steps/AccountsSteps.ts,73,5,74,118,,8a3ac47a22c881c513653935132c4b9c_0,javascript_lang_hardcoded_secret,javascript_lang_hardcoded_secret,error,Usage of hard-coded secret,Usage of hard-coded secret,"## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)","## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)"
javascript_lang_hardcoded_secret,Usage of hard-coded secret,,packages/e2e-tests/src/steps/lockWalletSteps.ts,32,3,32,97,,0f81738e9ef9fb9708a8fb7a8c8266e7_0,javascript_lang_hardcoded_secret,javascript_lang_hardcoded_secret,error,Usage of hard-coded secret,Usage of hard-coded secret,"## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)","## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)"
javascript_lang_hardcoded_secret,Usage of hard-coded secret,,packages/e2e-tests/src/steps/multidelegationSteps.ts,49,1,49,37,,373d553c5f876611bf258f4d7bfd85e1_0,javascript_lang_hardcoded_secret,javascript_lang_hardcoded_secret,error,Usage of hard-coded secret,Usage of hard-coded secret,"## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)","## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)"
javascript_lang_hardcoded_secret,Usage of hard-coded secret,,packages/e2e-tests/src/steps/passwordSteps.ts,8,3,9,111,,36898d62987ae1dc4c09a49450004e62_0,javascript_lang_hardcoded_secret,javascript_lang_hardcoded_secret,error,Usage of hard-coded secret,Usage of hard-coded secret,"## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)","## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)"
javascript_lang_hardcoded_secret,Usage of hard-coded secret,,packages/e2e-tests/src/steps/sendTransactionSimpleSteps.ts,669,3,670,111,,8c5e1cf79405d52c9df63dea8d4e86fc_0,javascript_lang_hardcoded_secret,javascript_lang_hardcoded_secret,error,Usage of hard-coded secret,Usage of hard-coded secret,"## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)","## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)"
javascript_lang_hardcoded_secret,Usage of hard-coded secret,,packages/e2e-tests/src/steps/settingsSteps.ts,315,3,316,111,,0d49038ab72e1b513ffecc12d9cc7eea_0,javascript_lang_hardcoded_secret,javascript_lang_hardcoded_secret,error,Usage of hard-coded secret,Usage of hard-coded secret,"## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)","## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)"
javascript_lang_hardcoded_secret,Usage of hard-coded secret,,packages/nami/src/config/config.ts,33,3,33,34,,7b6e4df8d637feb59dabaafad4863d47_0,javascript_lang_hardcoded_secret,javascript_lang_hardcoded_secret,error,Usage of hard-coded secret,Usage of hard-coded secret,"## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)","## Description

Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.

## Remediations

- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.
  ```javascript
    passport.use(new OAuth2Strategy({
        authorizationURL: 'https://www.example.com/oauth2/authorize',
        tokenURL: 'https://www.example.com/oauth2/token',
        clientID: 'my-id-123',
        clientSecret: 'shh-my-secret',
        callbackURL: 'http://localhost:3000/auth/example/callback'
      },
      function(accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ exampleId: profile.id }, function (err, user) {
          return cb(err, user);
        });
      }
    ));
  ```
- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.
- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

## References

- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
- [AWS Key Management Service](https://aws.amazon.com/kms/)"
javascript_lang_dangerous_insert_html,Unsanitized user input in dynamic HTML insertion (XSS),,apps/browser-extension-wallet/src/views/browser-view/components/SideMenu/SideMenuContent.tsx,61,12,63,13,,23f23819a8a384bec802f898996cb87a_0,javascript_lang_dangerous_insert_html,javascript_lang_dangerous_insert_html,error,Unsanitized user input in dynamic HTML insertion (XSS),Unsanitized user input in dynamic HTML insertion (XSS),"## Description

Unsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.

## Remediations

- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.
  ```javascript
  import sanitizeHtml from 'sanitize-html';

  const html = `<strong>${user.Input}</strong>`;
  document.body.innerHTML = sanitizeHtml(html);
  ```

## References

- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","## Description

Unsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.

## Remediations

- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.
  ```javascript
  import sanitizeHtml from 'sanitize-html';

  const html = `<strong>${user.Input}</strong>`;
  document.body.innerHTML = sanitizeHtml(html);
  ```

## References

- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)"
javascript_lang_dangerous_insert_html,Unsanitized user input in dynamic HTML insertion (XSS),,apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/components/Typography/IogText/index.tsx,31,3,63,4,,37a219667d31b0f4f1fa1313cdece3c4_0,javascript_lang_dangerous_insert_html,javascript_lang_dangerous_insert_html,error,Unsanitized user input in dynamic HTML insertion (XSS),Unsanitized user input in dynamic HTML insertion (XSS),"## Description

Unsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.

## Remediations

- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.
  ```javascript
  import sanitizeHtml from 'sanitize-html';

  const html = `<strong>${user.Input}</strong>`;
  document.body.innerHTML = sanitizeHtml(html);
  ```

## References

- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","## Description

Unsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.

## Remediations

- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.
  ```javascript
  import sanitizeHtml from 'sanitize-html';

  const html = `<strong>${user.Input}</strong>`;
  document.body.innerHTML = sanitizeHtml(html);
  ```

## References

- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)"
javascript_lang_dangerous_insert_html,Unsanitized user input in dynamic HTML insertion (XSS),,apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/components/Typography/IogTitle/index.tsx,27,3,55,4,,0e8d683040ed23ab8bfb018ea33afe64_0,javascript_lang_dangerous_insert_html,javascript_lang_dangerous_insert_html,error,Unsanitized user input in dynamic HTML insertion (XSS),Unsanitized user input in dynamic HTML insertion (XSS),"## Description

Unsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.

## Remediations

- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.
  ```javascript
  import sanitizeHtml from 'sanitize-html';

  const html = `<strong>${user.Input}</strong>`;
  document.body.innerHTML = sanitizeHtml(html);
  ```

## References

- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","## Description

Unsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.

## Remediations

- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.
  ```javascript
  import sanitizeHtml from 'sanitize-html';

  const html = `<strong>${user.Input}</strong>`;
  document.body.innerHTML = sanitizeHtml(html);
  ```

## References

- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)"
javascript_lang_non_literal_fs_filename,Unsanitized dynamic input in file path,,packages/e2e-tests/src/support/PidMonitor.ts,110,12,110,30,,ae067c3ceb3b685396f8313a6c6fa72d_0,javascript_lang_non_literal_fs_filename,javascript_lang_non_literal_fs_filename,error,Unsanitized dynamic input in file path,Unsanitized dynamic input in file path,"## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)"
javascript_lang_non_literal_fs_filename,Unsanitized dynamic input in file path,,packages/e2e-tests/src/support/PidMonitor.ts,111,9,111,47,,ae067c3ceb3b685396f8313a6c6fa72d_1,javascript_lang_non_literal_fs_filename,javascript_lang_non_literal_fs_filename,error,Unsanitized dynamic input in file path,Unsanitized dynamic input in file path,"## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)"
javascript_lang_non_literal_fs_filename,Unsanitized dynamic input in file path,,packages/e2e-tests/src/support/PidMonitor.ts,119,7,119,80,,ae067c3ceb3b685396f8313a6c6fa72d_2,javascript_lang_non_literal_fs_filename,javascript_lang_non_literal_fs_filename,error,Unsanitized dynamic input in file path,Unsanitized dynamic input in file path,"## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)"
javascript_lang_non_literal_fs_filename,Unsanitized dynamic input in file path,,packages/e2e-tests/src/utils/fileUtils.ts,5,10,5,62,,e81023fa47380a2296781720bd9b306c_0,javascript_lang_non_literal_fs_filename,javascript_lang_non_literal_fs_filename,error,Unsanitized dynamic input in file path,Unsanitized dynamic input in file path,"## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)"
javascript_lang_non_literal_fs_filename,Unsanitized dynamic input in file path,,packages/e2e-tests/src/utils/fileUtils.ts,9,3,9,65,,e81023fa47380a2296781720bd9b306c_1,javascript_lang_non_literal_fs_filename,javascript_lang_non_literal_fs_filename,error,Unsanitized dynamic input in file path,Unsanitized dynamic input in file path,"## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","## Description

Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

## Remediations

- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
  ```javascript
  function write(filename) {
    switch(filename) {
      case ""hello.txt"":
        fs.writeCreateFile(""hello.txt"");
        break;
      // Add more cases as necessary
    }
  }
  ```

## References

- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)"
javascript_lang_path_traversal,Unsanitized dynamic input in file path,,packages/e2e-tests/src/utils/fileUtils.ts,9,20,9,55,,e2fecf0e5519981786db3090ce320267_0,javascript_lang_path_traversal,javascript_lang_path_traversal,error,Unsanitized dynamic input in file path,Unsanitized dynamic input in file path,"## Description

Using unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.

## Remediations

- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.
- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\..`, to prevent path traversal attacks.
  ```javascript
  var folder = target.replace(/^(\.\.(\/|\\|$))+/, '');
  ```
- **Do** check for and remove any instances of the NULL byte (""%00"") in user input to guard against poison NULL byte attacks.
  ```javascript
  if (target.indexOf('\0') !== -1) {
    // Handle or reject the input
  }
  ```
- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.
  ```javascript
  const path = require(""path"");
  var pathname = path.join(""/public/"", folder);
  if (pathname.indexOf(""/public/"") !== 0) {
    // Handle or reject the input
  }
  ```

## References

- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","## Description

Using unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.

## Remediations

- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.
- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\..`, to prevent path traversal attacks.
  ```javascript
  var folder = target.replace(/^(\.\.(\/|\\|$))+/, '');
  ```
- **Do** check for and remove any instances of the NULL byte (""%00"") in user input to guard against poison NULL byte attacks.
  ```javascript
  if (target.indexOf('\0') !== -1) {
    // Handle or reject the input
  }
  ```
- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.
  ```javascript
  const path = require(""path"");
  var pathname = path.join(""/public/"", folder);
  if (pathname.indexOf(""/public/"") !== 0) {
    // Handle or reject the input
  }
  ```

## References

- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)"
javascript_react_dangerously_set_inner_html,Unsanitized user input in React inner HTML method (XSS),,apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/components/ProjectDetail/AboutDapp/index.tsx,32,41,32,74,,f9534ff7309efe405b531f456d3e0904_0,javascript_react_dangerously_set_inner_html,javascript_react_dangerously_set_inner_html,error,Unsanitized user input in React inner HTML method (XSS),Unsanitized user input in React inner HTML method (XSS),"## Description

Using React's dangerouslySetInnerHTML with unsanitized data can introduce Cross-Site Scripting (XSS) vulnerabilities. This occurs when external input is embedded directly into the HTML without proper sanitization, allowing attackers to inject malicious scripts.

## Remediations

- **Do** sanitize data before using it with dangerouslySetInnerHTML. This step is crucial to prevent XSS attacks by ensuring that the input does not contain harmful scripts.
```javascript
<div dangerouslySetInnerHTML={{__html: sanitize(data)}} />
```

## References

- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","## Description

Using React's dangerouslySetInnerHTML with unsanitized data can introduce Cross-Site Scripting (XSS) vulnerabilities. This occurs when external input is embedded directly into the HTML without proper sanitization, allowing attackers to inject malicious scripts.

## Remediations

- **Do** sanitize data before using it with dangerouslySetInnerHTML. This step is crucial to prevent XSS attacks by ensuring that the input does not contain harmful scripts.
```javascript
<div dangerouslySetInnerHTML={{__html: sanitize(data)}} />
```

## References

- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"
javascript_lang_dynamic_regex,Unsanitized dynamic input in regular expression,,packages/core/src/ui/utils/word-list-search.ts,23,30,23,67,,27aa5e82c214e1d68978d490b1f3af5a_0,javascript_lang_dynamic_regex,javascript_lang_dynamic_regex,error,Unsanitized dynamic input in regular expression,Unsanitized dynamic input in regular expression,"## Description

Creating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.

## Remediations

- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.
- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.
- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.
- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.
- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.
  ```javascript
  var dynamicRegex = new RegExp('^' + userInput); // unsafe
  ```

## References

- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","## Description

Creating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.

## Remediations

- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.
- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.
- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.
- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.
- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.
  ```javascript
  var dynamicRegex = new RegExp('^' + userInput); // unsafe
  ```

## References

- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)"
javascript_lang_message_handler_origin,Missing origin check in message handler,,apps/browser-extension-wallet/src/lib/scripts/trezor/trezor-content-script.ts,15,1,20,3,,e9786fd6c05a5939f1a7fb4953de9622_0,javascript_lang_message_handler_origin,javascript_lang_message_handler_origin,error,Missing origin check in message handler,Missing origin check in message handler,"## Description

Failing to verify the origin of message events can expose your application to Cross-Site Scripting (XSS) attacks. This vulnerability arises when an application processes messages without confirming if they come from a trusted source.

## Remediations

- **Do not** add message event listeners without checking the origin of the messages. This approach leaves your application vulnerable to malicious inputs.
  ```javascript
  window.addEventListener('message', (event) => {
    actOnMessage(event.data) // unsafe
  })
  ```
- **Do** validate the origin of incoming messages before processing them. Ensure that the message comes from a trusted source by comparing the event's origin with a predefined list of allowed origins.
  ```javascript
  window.addEventListener('message', (event) => {
    if (event.origin != 'https://myapp.example.com') {
      throw new Error('invalid origin')
    }

    actOnMessage(event.data)
  })
  ```

## References

- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","## Description

Failing to verify the origin of message events can expose your application to Cross-Site Scripting (XSS) attacks. This vulnerability arises when an application processes messages without confirming if they come from a trusted source.

## Remediations

- **Do not** add message event listeners without checking the origin of the messages. This approach leaves your application vulnerable to malicious inputs.
  ```javascript
  window.addEventListener('message', (event) => {
    actOnMessage(event.data) // unsafe
  })
  ```
- **Do** validate the origin of incoming messages before processing them. Ensure that the message comes from a trusted source by comparing the event's origin with a predefined list of allowed origins.
  ```javascript
  window.addEventListener('message', (event) => {
    if (event.origin != 'https://myapp.example.com') {
      throw new Error('invalid origin')
    }

    actOnMessage(event.data)
  })
  ```

## References

- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"
javascript_lang_message_handler_origin,Missing origin check in message handler,,apps/browser-extension-wallet/src/lib/scripts/trezor/trezor-usb-permissions.ts,47,1,65,3,,e6790d2d235856cce8795fb59f1ab5a6_0,javascript_lang_message_handler_origin,javascript_lang_message_handler_origin,error,Missing origin check in message handler,Missing origin check in message handler,"## Description

Failing to verify the origin of message events can expose your application to Cross-Site Scripting (XSS) attacks. This vulnerability arises when an application processes messages without confirming if they come from a trusted source.

## Remediations

- **Do not** add message event listeners without checking the origin of the messages. This approach leaves your application vulnerable to malicious inputs.
  ```javascript
  window.addEventListener('message', (event) => {
    actOnMessage(event.data) // unsafe
  })
  ```
- **Do** validate the origin of incoming messages before processing them. Ensure that the message comes from a trusted source by comparing the event's origin with a predefined list of allowed origins.
  ```javascript
  window.addEventListener('message', (event) => {
    if (event.origin != 'https://myapp.example.com') {
      throw new Error('invalid origin')
    }

    actOnMessage(event.data)
  })
  ```

## References

- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","## Description

Failing to verify the origin of message events can expose your application to Cross-Site Scripting (XSS) attacks. This vulnerability arises when an application processes messages without confirming if they come from a trusted source.

## Remediations

- **Do not** add message event listeners without checking the origin of the messages. This approach leaves your application vulnerable to malicious inputs.
  ```javascript
  window.addEventListener('message', (event) => {
    actOnMessage(event.data) // unsafe
  })
  ```
- **Do** validate the origin of incoming messages before processing them. Ensure that the message comes from a trusted source by comparing the event's origin with a predefined list of allowed origins.
  ```javascript
  window.addEventListener('message', (event) => {
    if (event.origin != 'https://myapp.example.com') {
      throw new Error('invalid origin')
    }

    actOnMessage(event.data)
  })
  ```

## References

- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,apps/browser-extension-wallet/src/popup.tsx,72,13,72,73,,7ead90b6fa4a8305d373d610068d1752_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,apps/browser-extension-wallet/src/stores/slices/wallet-activities-slice.ts,179,9,179,53,,b3fb1a0f4434e7ac4602aecf034cadec_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,apps/browser-extension-wallet/src/views/browser-view/index.tsx,63,13,63,73,,2c4a8b255c6e6da6c7bfa33e5148b624_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/bitcoin/src/wallet/lib/common/address.ts,213,9,213,60,,e26edf315e86bed5cabbc12cfaf3201a_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/bitcoin/src/wallet/lib/wallet/BitcoinSigner.ts,27,9,27,27,,48121cb6c8b98cbbcf9a89ba88f279fa_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/bitcoin/src/wallet/lib/wallet/BitcoinWallet.ts,232,57,232,101,,80f80ad4c14ff5216be0a682de138903_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/bitcoin/src/wallet/lib/wallet/BitcoinWallet.ts,273,42,273,91,,80f80ad4c14ff5216be0a682de138903_1,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/bitcoin/src/wallet/lib/wallet/BitcoinWallet.ts,336,11,336,63,,80f80ad4c14ff5216be0a682de138903_2,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/bitcoin/src/wallet/lib/wallet/BitcoinWallet.ts,348,57,348,103,,80f80ad4c14ff5216be0a682de138903_3,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/cardano/src/wallet/lib/tx-history-loader.ts,57,48,57,109,,8a9167fa9c4b18b6292a8f80f1bcdf1e_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/core/src/shared-wallets/add-shared-wallet/restore-flow/validateJson.ts,40,72,40,97,,10bf63c468aa894556340b6f41939352_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/core/src/ui/components/WalletSetupRevamp/WalletSetupNamePasswordStepRevamp.tsx,59,29,59,74,,3c21416bbb0263035a692d0e51ccbe9c_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/e2e-tests/src/elements/transactionDetails.ts,379,41,379,93,,b3e17bef0f3865c7ca1c3a863cabfb82_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/e2e-tests/src/steps/onboardingSteps.ts,107,7,107,34,,1d13f1f623a75e637bec7a90b6a348eb_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/e2e-tests/src/steps/onboardingSteps.ts,111,7,111,30,,1d13f1f623a75e637bec7a90b6a348eb_1,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/e2e-tests/src/steps/transactionsSteps.ts,72,11,72,35,,2093293c927ef8b4e2511220623ab463_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/nami/src/ui/app/pages/dapp-connector/signTx.tsx,884,32,884,52,,160877eb36092f5df8bda057c2d6eea1_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/nami/src/ui/app/pages/dapp-connector/signTxUtil.ts,84,26,84,49,,596aa4d90be60c972d7dc63be7f060b2_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/nami/src/ui/app/pages/dapp-connector/signTxUtil.ts,104,15,104,65,,596aa4d90be60c972d7dc63be7f060b2_1,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/nami/src/ui/app/pages/dapp-connector/signTxUtil.ts,113,15,113,65,,596aa4d90be60c972d7dc63be7f060b2_2,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_observable_timing,Observable Timing Discrepancy,,packages/nami/src/ui/app/pages/send.tsx,996,19,996,70,,6b83fc24a0d5fee8f121864ff77d5c5b_0,javascript_lang_observable_timing,javascript_lang_observable_timing,error,Observable Timing Discrepancy,Observable Timing Discrepancy,"## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","## Description

Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

## Remediations

- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
  ```javascript
    if (apiToken === ""zDE9ET!TDq2uZx2oM!FD2"") { // unsafe
      ...
    }
  ```
- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

## References

- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,apps/browser-extension-wallet/src/lib/scripts/background/cache-nami-metadata.ts,66,24,66,37,,65268cc7fc9f459f3d65539e2fcafc88_0,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,packages/e2e-tests/src/elements/multidelegation/ManageStakingDrawer.ts,257,36,257,49,,3694a06a3c074d1f4259485bc9db5270_0,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,packages/e2e-tests/src/elements/multidelegation/MultidelegationPage.ts,710,23,710,36,,303c915de5ffc57167d259c7a01d3d7f_0,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,packages/e2e-tests/src/elements/multidelegation/MultidelegationPage.ts,716,23,716,36,,303c915de5ffc57167d259c7a01d3d7f_1,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,packages/e2e-tests/src/elements/onboarding/recoveryPhrasePage.ts,113,38,113,51,,87858e6cd17c3ef2ce5ccd0cc87e21dc_0,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,packages/e2e-tests/src/elements/onboarding/recoveryPhrasePage.ts,122,38,122,51,,87858e6cd17c3ef2ce5ccd0cc87e21dc_1,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,packages/e2e-tests/src/elements/settings/MessageSigningInputDrawer.ts,67,30,67,43,,93c219b31af0a758a31bb50ac8288e5c_0,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,packages/e2e-tests/src/utils/arrayUtils.ts,3,26,3,39,,3d6c5191070009f2b64c1306ca3fee50_0,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,packages/nami/src/ui/app/hw/select-account.tsx,88,35,88,48,,b89a45bbb3344b70ea8de92ddb5321c9_0,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_insufficiently_random_values,Usage of insufficient random value,,packages/nami/src/ui/app/pages/settings.tsx,325,27,325,40,,df3ab249424eb7f075749a828efe2d44_0,javascript_lang_insufficiently_random_values,javascript_lang_insufficiently_random_values,error,Usage of insufficient random value,Usage of insufficient random value,"## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```","## Description

Using predictable random values compromises your application's security, particularly if these values serve security-related functions.

## Remediations

- **Do** use a robust library for generating random values to enhance security.
  ```javascript
  const crypto = require('crypto');
  crypto.randomBytes(16).toString('hex');
  ```"
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/components/Announcement/Announcement.tsx,28,9,28,27,,f3758994a8c2acde2efaf67d0e63efce_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/components/ErrorBoundary/ErrorBoundary.tsx,22,5,22,74,,9145ed136c18e6c8fb6a6d3851753280_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/components/MainMenu/DropdownMenuOverlay/DropdownMenuOverlay.tsx,155,9,155,27,,02f670b3dd1e249e513c7a1096f94c4e_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/components/MainMenu/DropdownMenuOverlay/components/RenameWalletDrawer.tsx,84,7,84,26,,9b94d1d7df024650b6888ac36e46ff37_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/features/dapp/components/ConfirmData.tsx,74,9,74,28,,00c19b97d5b8a3cc458d6ff29043598c_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/features/dapp/components/ConfirmData.tsx,122,7,122,35,,00c19b97d5b8a3cc458d6ff29043598c_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/features/dapp/components/Connect.tsx,119,9,119,28,,0f4a714777fc6efddf6ed44cbd10c717_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/features/dapp/components/confirm-transaction/ConfirmTransaction.tsx,74,9,74,55,,846c2e8d0c838aadbefa45b8bd9433a8_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/features/dapp/components/confirm-transaction/hooks.ts,38,11,38,30,,14e217126091cbeae33d1ff5d691d66f_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/features/dapp/components/confirm-transaction/hooks.ts,125,11,125,30,,14e217126091cbeae33d1ff5d691d66f_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/features/dapp/components/confirm-transaction/hooks.ts,183,7,183,58,,14e217126091cbeae33d1ff5d691d66f_2,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/features/nami-migration/migration-tool/cross-extension-messaging/lace/create-lace-migration-open-listener.ts,14,9,14,109,,f40a949115ab2a57176a867d1eb0c335_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/hooks/useAsyncSwitchMap.ts,21,11,21,76,,7ea1f499932b59fd0d508bceb96690cf_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/hooks/useCollateral.ts,88,9,88,71,,6b007a397a634c7fc427dbca1a6fe363_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/hooks/useFatalError.ts,60,5,60,81,,81572189eb822720ffaa0757305e146c_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/hooks/useFatalError.ts,64,5,64,57,,81572189eb822720ffaa0757305e146c_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/hooks/useFetchCoinPrice.ts,58,64,58,83,,10b85d53ab30601555e4f62ab7aee514_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/hooks/useInitializeTx.ts,116,9,116,67,,c843149be59a4c9bcfebc86a7d2f296c_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/hooks/useWalletManager.ts,723,9,723,71,,dbd661d7de93c4b07493e222c330513e_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/cip30.ts,49,9,49,28,,0b5a8442e635d428b075d39287ae6cfa_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/cip30.ts,64,9,64,28,,0b5a8442e635d428b075d39287ae6cfa_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/onError.ts,59,5,59,73,,8fea94cda34d67e271a3053e5aef98a9_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/onStorageChange.ts,49,7,49,56,,6012bc1787daaa15040da45b70bb1c06_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/requestAccess.ts,24,5,24,74,,61a3f45923c1bda694a6566d3239b21c_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/requestAccess.ts,34,5,34,73,,61a3f45923c1bda694a6566d3239b21c_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/services/cardanoTokenPrices.ts,56,23,56,88,,5fa3d3fed24adbd008ae7f2bc33b4826_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/services/cardanoTokenPrices.ts,87,5,87,72,,5fa3d3fed24adbd008ae7f2bc33b4826_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/services/cardanoTokenPrices.ts,107,7,107,72,,5fa3d3fed24adbd008ae7f2bc33b4826_2,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/services/dappService.ts,78,3,78,22,,872b1b1b819ae817eaff598fe328cf1e_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/services/utilityServices.ts,107,16,107,35,,b5726b9b12f284931ff7f9b698b52549_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/services/utilityServices.ts,116,22,116,41,,b5726b9b12f284931ff7f9b698b52549_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/services/utilityServices.ts,166,5,166,24,,b5726b9b12f284931ff7f9b698b52549_2,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/services/utilityServices.ts,239,7,239,58,,b5726b9b12f284931ff7f9b698b52549_3,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/background/wallet.ts,531,5,531,63,,c3a6539663a0adaff9f82f34f6d50288_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/migrations/migrations.ts,100,13,102,14,,8881804b2b84ed6127d25ab6988ed5a4_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/migrations/migrations.ts,111,5,111,54,,8881804b2b84ed6127d25ab6988ed5a4_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/migrations/versions/v1_0_0.ts,51,11,51,105,,0e2ebc4cada321e8d6a7d69bf8922a62_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/migrations/versions/v1_10_2.ts,20,9,20,80,,002b161c4dc8fcbb09b16e6b89bc478d_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/lib/scripts/trezor/trezor-usb-permissions.ts,43,5,43,24,,525bc09a5cf6c4cd8ad58eee9b6749e0_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/providers/AnalyticsProvider/onChain.ts,113,5,113,24,,923ad8d3fcba1e463541118550587e7e_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/providers/PostHogClientProvider/client/PostHogClient.ts,246,9,246,63,,2157d06d8c3e2e393d8cb4271e30ce20_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/providers/PostHogClientProvider/client/PostHogClient.ts,336,9,336,75,,2157d06d8c3e2e393d8cb4271e30ce20_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/routes/DappConnectorView.tsx,163,3,163,24,,67c58d107f0d621c1702a1255bf28fff_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/utils/catch-and-brand-extension-api-error.ts,25,5,25,37,,c9229415609ab55297542bc0f521569a_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/utils/get-assets-information.ts,37,9,37,77,,898f1560aae12b98f1ad7ab113e8594f_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/utils/pgp.ts,207,9,207,28,,73e96770a789c57bd1dcd04b9b9110ff_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/utils/validators/address-book.ts,65,5,65,32,,379235fec6d0021f61858b7ca6e9b151_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/bitcoin-mode/features/multi-wallet/hardware-wallet/context.tsx,185,7,185,64,,6e4bad3cb6db48d2c235ffc86dbdd696_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/bitcoin-mode/features/multi-wallet/hardware-wallet/steps/Connect.tsx,96,9,96,64,,778fa6e752ead3b70a262550f75f6057_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/bitcoin-mode/features/multi-wallet/restore-wallet/steps/ScanShieldedMessage.tsx,139,9,139,58,,3f8fa68afcd9a5e7555ad1c1701072b6_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/services/api/categories/index.ts,52,9,52,64,,9bf4470374246bef1212d6872db86c86_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/services/api/d-app/index.ts,149,9,149,58,,f16b2a94b0ca7c88b9065244a697fed1_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/services/cache.ts,30,5,30,68,,d55af780605dc4f8ba97be0b85868cee_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/multi-wallet/hardware-wallet/context.tsx,185,7,185,64,,21e4e842c9b1018207f299f7087d87d7_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/multi-wallet/hardware-wallet/steps/Connect.tsx,84,9,84,64,,86b1676da95d09e1fe19f64f5890bbd2_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/multi-wallet/restore-wallet/steps/ScanShieldedMessage.tsx,139,9,139,58,,d7f67e20e5dbf06cc16ae7a93f0c9400_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/send-transaction/components/AssetPicker.tsx,155,27,155,46,,03d33f55ca6f14a310985160af55c806_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/send-transaction/components/SendTransactionDrawer/Footer.tsx,216,11,216,61,,e732d292fa81a9f317e3f25bbcfb87ee_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/send-transaction/components/SendTransactionDrawer/Footer.tsx,231,13,231,65,,e732d292fa81a9f317e3f25bbcfb87ee_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/send-transaction/components/SendTransactionDrawer/Footer.tsx,254,11,254,49,,e732d292fa81a9f317e3f25bbcfb87ee_2,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/settings/components/CustomSubmitApiDrawer.tsx,74,7,74,63,,18bf85446525ae4eae4289be728a5cfd_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/settings/components/NetworkChoice.tsx,90,7,90,54,,4bd02509040d3dea01264e3f234cc503_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/settings/components/SettingsPreferences/CurrencyDrawer.tsx,46,7,46,53,,5eff4b0307f0c0a9ba37764adee3b9a1_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/sign-message/useSignMessageState.tsx,72,9,72,61,,ed9b46ba7db3f16d2e771a5f8568ba38_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/browser-view/features/staking/components/StakePoolDetails/TransactionFail.tsx,63,7,63,65,,6d48c8c12b3e31d60343ed85d4d1e6de_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,apps/browser-extension-wallet/src/views/nami-mode/utils.ts,48,5,48,60,,157cbe926ea78a113c4aa7c20443c6a4_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/bitcoin/src/wallet/lib/providers/StubBitcoinDataProvider.ts,109,5,109,63,,b0f2b5f7ca2a3f0decded578464418c6_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/bitcoin/src/wallet/lib/tx-builder/utils.ts,40,9,40,72,,4c194e8ee5ec5cbdcdc4a0eab3602c56_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/cardano/src/wallet/lib/blockfrost-address-discovery.ts,66,7,66,82,,2d48289340b082a964ef57b557620951_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/cardano/src/wallet/lib/blockfrost-address-discovery.ts,201,7,201,103,,2d48289340b082a964ef57b557620951_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/cardano/src/wallet/lib/providers.ts,186,57,186,103,,699bccc66dfd45b2fc4add800ec256be_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/common/src/AppLogger.ts,77,7,77,50,,572caddc107d47f3bb84e3c54c32cd11_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/common/src/AppLogger.ts,83,7,83,50,,572caddc107d47f3bb84e3c54c32cd11_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/common/src/AppLogger.ts,96,7,96,42,,572caddc107d47f3bb84e3c54c32cd11_2,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/common/src/AppLogger.ts,101,7,101,72,,572caddc107d47f3bb84e3c54c32cd11_3,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/common/src/AppLogger.ts,106,5,106,40,,572caddc107d47f3bb84e3c54c32cd11_4,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/core/src/shared-wallets/add-shared-wallet/creation-flow/ShareWalletDetails/utils.ts,101,7,101,59,,e813b6ff890d2325c8db933b40cb5956_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/core/src/shared-wallets/add-shared-wallet/restore-flow/SharedWalletRestorationFlow.tsx,72,7,72,27,,74ff74d9898328c9a6acd956ccf0c6ee_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/core/src/ui/components/AddressFormBrowserView/AddressForm.tsx,52,7,52,64,,4c928672665d581357800ba0c0bc07bc_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/core/src/ui/components/WalletOwnAddressesDropdown/WalletOwnAddressDropdown.stories.tsx,40,34,40,77,,353b6673c3addaf5b008341a177cb4f0_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/core/src/ui/components/WalletOwnAddressesDropdown/WalletOwnAddressDropdown.stories.tsx,54,36,54,79,,353b6673c3addaf5b008341a177cb4f0_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/e2e-tests/src/support/logger.ts,4,5,4,25,,48b4d039b3c63c9c6aac668ffc7099c2_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/e2e-tests/src/support/logger.ts,8,5,8,26,,48b4d039b3c63c9c6aac668ffc7099c2_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/e2e-tests/src/support/logger.ts,12,5,12,27,,48b4d039b3c63c9c6aac668ffc7099c2_2,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/e2e-tests/src/utils/networkManager.ts,92,15,95,16,,8c7c99d178b08629856a6902b9a28c15_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/adapters/transactions.ts,150,5,153,7,,321437d104964d2edf27cb1d8de2b9d8_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/adapters/transactions.ts,445,11,445,63,,321437d104964d2edf27cb1d8de2b9d8_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/components/confirmModal.tsx,281,9,281,29,,54490ffc0a31b9e66d0bd4486eca5e05_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/components/transactionBuilder.tsx,379,13,379,32,,74a302eefdf786f98fbce9f60a946745_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/components/transactionBuilder.tsx,594,13,594,32,,74a302eefdf786f98fbce9f60a946745_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/hw/select-account.tsx,108,7,108,48,,1e0bdb2188beb18c5a747cba3b8dd0a2_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/hw/trezorTx.tsx,81,9,81,49,,cc9ea6b2fffd059788a1df7d4b4b1d9c_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/pages/dapp-connector/enable.tsx,50,9,50,56,,26ff704a72664155a9721106aa4afd08_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/pages/dapp-connector/signData.tsx,79,7,79,56,,66f6b9ab84bd34301bc8945b36861ec6_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/pages/dapp-connector/signData.tsx,105,7,105,65,,66f6b9ab84bd34301bc8945b36861ec6_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/pages/dapp-connector/signTx.tsx,136,11,140,13,,b32a8dca04b844465573b6a0a353ed88_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/pages/dapp-connector/signTx.tsx,258,7,258,63,,b32a8dca04b844465573b6a0a353ed88_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/pages/dapp-connector/signTxUtil.ts,237,5,239,6,,52aac3a666dbb0bb1aa320e405cd1cf5_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/nami/src/ui/app/pages/send.tsx,803,13,803,72,,bf046c48ebb5780b5d6861b3a88dd259_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/staking/.storybook/StakingStorybookProvider.tsx,22,7,22,51,,4a0bf2295694ccc8dd8843a8acd16eb8_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/staking/src/features/BrowsePools/hooks/useBrowsePoolsPersistence.tsx,40,7,40,52,,49b031d4bc3e86f2c88ce8b17ddc55df_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/staking/src/features/Drawer/TransactionFail.tsx,133,9,133,85,,f2ef9e3732328678c1e8bc84d0bb0fb9_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/staking/src/features/Drawer/TransactionFail.tsx,141,9,141,59,,f2ef9e3732328678c1e8bc84d0bb0fb9_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/staking/src/features/Drawer/preferences/PoolDetailsCard/PoolDetailsCard.stories.tsx,21,42,21,79,,23996fdeb35fac59eb66892d2f1f64b4_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/staking/src/features/Drawer/preferences/PoolDetailsCard/PoolDetailsCard.stories.tsx,32,42,32,79,,23996fdeb35fac59eb66892d2f1f64b4_1,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
javascript_lang_logger_leak,Leakage of information in logger message,,packages/staking/src/features/store/delegationPortfolioStore/stateMachine/stateTreeUtilities.ts,13,7,13,87,,f63104dd93e71e45202edb0844143206_0,javascript_lang_logger_leak,javascript_lang_logger_leak,error,Leakage of information in logger message,Leakage of information in logger message,"## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","## Description

Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.

## Remediations

- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.
  ```javascript
  logger.info(`Results: ${data}`) // unsafe
  ```
- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."
