{"$schema":"https://json.schemastore.org/sarif-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Bearer","rules":[{"id":"javascript_lang_logger_leak","name":"javascript_lang_logger_leak","shortDescription":{"text":"Leakage of information in logger message"},"fullDescription":{"text":"Leakage of information in logger message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","markdown":"## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments."}},{"id":"python_lang_bind_to_all_interfaces","name":"python_lang_bind_to_all_interfaces","shortDescription":{"text":"Permissive server network interface configuration"},"fullDescription":{"text":"Permissive server network interface configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nBinding a service to \"0.0.0.0\" (or an empty string) makes it accessible on all network interfaces. This configuration can lead to unintended exposure over insecure or unintended network interfaces, creating potential security risks.\n\n## Remediations\n\n- **Do not** bind services to \"0.0.0.0\" without considering the security implications. This default setting can expose your service on all network interfaces, including those that are not secure.\n- **Do** bind your service to a specific IP address or network interface to limit access and enhance security. This can be achieved through various methods:\n    - Specify the IP address using an environment variable for flexible and secure configuration.\n    - Define the IP address in a configuration file that the application reads at startup.\n    - Dynamically identify the appropriate network interface and bind the service to its IP address.\n- **Do** implement security best practices when configuring network services. Use firewalls to control access and encrypt communication with TLS to protect data in transit.","markdown":"## Description\n\nBinding a service to \"0.0.0.0\" (or an empty string) makes it accessible on all network interfaces. This configuration can lead to unintended exposure over insecure or unintended network interfaces, creating potential security risks.\n\n## Remediations\n\n- **Do not** bind services to \"0.0.0.0\" without considering the security implications. This default setting can expose your service on all network interfaces, including those that are not secure.\n- **Do** bind your service to a specific IP address or network interface to limit access and enhance security. This can be achieved through various methods:\n    - Specify the IP address using an environment variable for flexible and secure configuration.\n    - Define the IP address in a configuration file that the application reads at startup.\n    - Dynamically identify the appropriate network interface and bind the service to its IP address.\n- **Do** implement security best practices when configuring network services. Use firewalls to control access and encrypt communication with TLS to protect data in transit."}},{"id":"php_lang_raw_html_using_user_input","name":"php_lang_raw_html_using_user_input","shortDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"fullDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"php_lang_path_using_user_input","name":"php_lang_path_using_user_input","shortDescription":{"text":"Unsanitized user input in file path"},"fullDescription":{"text":"Unsanitized user input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","markdown":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)"}},{"id":"ruby_lang_exception","name":"ruby_lang_exception","shortDescription":{"text":"Leakage of sensitive data in exception message"},"fullDescription":{"text":"Leakage of sensitive data in exception message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```ruby\n  raise CustomException.new(user.email) # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```ruby\n  raise CustomException.new(user.uuid)\n  ```","markdown":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```ruby\n  raise CustomException.new(user.email) # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```ruby\n  raise CustomException.new(user.uuid)\n  ```"}},{"id":"javascript_express_cookie_missing_http_only","name":"javascript_express_cookie_missing_http_only","shortDescription":{"text":"Missing HTTP Only option in cookie configuration"},"fullDescription":{"text":"Missing HTTP Only option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour cookies are at risk if the HTTP Only option is not configured. This setting prevents client-side JavaScript, such as the code that reads \"document.cookie\" values, from accessing the cookie's value. Enabling this option is crucial for websites prone to Cross-Site Scripting (XSS) attacks, because it prevents malicious scripts from obtaining the cookie's data.\n\n## Remediations\n\n- **Do** set the `HttpOnly` attribute to `true` in your cookie configuration. This action ensures that cookies are shielded from unauthorized client-side access.\n  ```javascript\n  cookie({ httpOnly: true });\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)","markdown":"## Description\n\nYour cookies are at risk if the HTTP Only option is not configured. This setting prevents client-side JavaScript, such as the code that reads \"document.cookie\" values, from accessing the cookie's value. Enabling this option is crucial for websites prone to Cross-Site Scripting (XSS) attacks, because it prevents malicious scripts from obtaining the cookie's data.\n\n## Remediations\n\n- **Do** set the `HttpOnly` attribute to `true` in your cookie configuration. This action ensures that cookies are shielded from unauthorized client-side access.\n  ```javascript\n  cookie({ httpOnly: true });\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)"}},{"id":"python_django_insecure_cookie","name":"python_django_insecure_cookie","shortDescription":{"text":"Missing Secure option in cookie configuration"},"fullDescription":{"text":"Missing Secure option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `secure` option to `True` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```python\n  HttpResponse.set_cookie(key, value, secure = True)\n  ```","markdown":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `secure` option to `True` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```python\n  HttpResponse.set_cookie(key, value, secure = True)\n  ```"}},{"id":"python_third_parties_openai","name":"python_third_parties_openai","shortDescription":{"text":"Leakage of sensitive data to OpenAI"},"fullDescription":{"text":"Leakage of sensitive data to OpenAI"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party services like OpenAI is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like OpenAI.\n\n## References\n- [OpenAI API docs](https://platform.openai.com/docs/api-reference/introduction)\n","markdown":"## Description\n\nLeaking sensitive data to third-party services like OpenAI is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like OpenAI.\n\n## References\n- [OpenAI API docs](https://platform.openai.com/docs/api-reference/introduction)\n"}},{"id":"go_gosec_network_bind_to_all_interfaces","name":"go_gosec_network_bind_to_all_interfaces","shortDescription":{"text":"Permissive server network interface configuration"},"fullDescription":{"text":"Permissive server network interface configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nBinding a service to \"0.0.0.0\" makes it accessible on all network interfaces. This configuration can lead to unintended exposure over insecure or unintended network interfaces, creating potential security risks.\n\n## Remediations\n\n- **Do not** bind services to \"0.0.0.0\" without considering the security implications. This default setting can expose your service on all network interfaces, including those that are not secure.\n- **Do** bind your service to a specific IP address or network interface to limit access and enhance security. This can be achieved through various methods:\n    - Specify the IP address using an environment variable for flexible and secure configuration.\n    - Define the IP address in a configuration file that the application reads at startup.\n    - Dynamically identify the appropriate network interface and bind the service to its IP address.\n- **Do** implement security best practices when configuring network services. Use firewalls to control access and encrypt communication with TLS to protect data in transit.\n\n## References\n\n- [Go net package](https://pkg.go.dev/net)\n- [Go os package for environment variables](https://pkg.go.dev/os)","markdown":"## Description\n\nBinding a service to \"0.0.0.0\" makes it accessible on all network interfaces. This configuration can lead to unintended exposure over insecure or unintended network interfaces, creating potential security risks.\n\n## Remediations\n\n- **Do not** bind services to \"0.0.0.0\" without considering the security implications. This default setting can expose your service on all network interfaces, including those that are not secure.\n- **Do** bind your service to a specific IP address or network interface to limit access and enhance security. This can be achieved through various methods:\n    - Specify the IP address using an environment variable for flexible and secure configuration.\n    - Define the IP address in a configuration file that the application reads at startup.\n    - Dynamically identify the appropriate network interface and bind the service to its IP address.\n- **Do** implement security best practices when configuring network services. Use firewalls to control access and encrypt communication with TLS to protect data in transit.\n\n## References\n\n- [Go net package](https://pkg.go.dev/net)\n- [Go os package for environment variables](https://pkg.go.dev/os)"}},{"id":"javascript_third_parties_google_tag_manager","name":"javascript_third_parties_google_tag_manager","shortDescription":{"text":"Leakage of sensitive data to Google Tag Manager"},"fullDescription":{"text":"Leakage of sensitive data to Google Tag Manager"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party services and tools like Google Tag Manager is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to analytics libraries like Google Analytics.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n  datalayer.push({\n    user: {\n      uuid: user.uuid\n    }\n  })\n  ```\n\n## References\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","markdown":"## Description\n\nLeaking sensitive data to third-party services and tools like Google Tag Manager is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to analytics libraries like Google Analytics.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n  datalayer.push({\n    user: {\n      uuid: user.uuid\n    }\n  })\n  ```\n\n## References\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)"}},{"id":"javascript_lang_insufficiently_random_values","name":"javascript_lang_insufficiently_random_values","shortDescription":{"text":"Usage of insufficient random value"},"fullDescription":{"text":"Usage of insufficient random value"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing predictable random values compromises your application's security, particularly if these values serve security-related functions.\n\n## Remediations\n\n- **Do** use a robust library for generating random values to enhance security.\n  ```javascript\n  const crypto = require('crypto');\n  crypto.randomBytes(16).toString('hex');\n  ```","markdown":"## Description\n\nUsing predictable random values compromises your application's security, particularly if these values serve security-related functions.\n\n## Remediations\n\n- **Do** use a robust library for generating random values to enhance security.\n  ```javascript\n  const crypto = require('crypto');\n  crypto.randomBytes(16).toString('hex');\n  ```"}},{"id":"php_lang_deserialization_of_user_input","name":"php_lang_deserialization_of_user_input","shortDescription":{"text":"Unsanitized user input in deserialization method"},"fullDescription":{"text":"Unsanitized user input in deserialization method"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nDeserializing data from untrusted sources, like parameters or cookies, without proper validation is a security risk. Attackers can embed malicious code or payloads in serialized data. When your application deserializes this data, it can compromise your system's security.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This prevents attackers from exploiting the deserialization process.\n- **Do** use data formats that are purely data-oriented and not tied to a specific programming language, such as JSON or XML, for serialization and deserialization. This approach minimizes the risk of executing malicious code during deserialization.\n  ```php\n  $userData = json_decode($_GET[\"user\"]);\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)","markdown":"## Description\n\nDeserializing data from untrusted sources, like parameters or cookies, without proper validation is a security risk. Attackers can embed malicious code or payloads in serialized data. When your application deserializes this data, it can compromise your system's security.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This prevents attackers from exploiting the deserialization process.\n- **Do** use data formats that are purely data-oriented and not tied to a specific programming language, such as JSON or XML, for serialization and deserialization. This approach minimizes the risk of executing malicious code during deserialization.\n  ```php\n  $userData = json_decode($_GET[\"user\"]);\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)"}},{"id":"python_third_parties_new_relic","name":"python_third_parties_new_relic","shortDescription":{"text":"Leakage of sensitive data to New Relic"},"fullDescription":{"text":"Leakage of sensitive data to New Relic"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n"}},{"id":"python_lang_xpath_injection","name":"python_lang_xpath_injection","shortDescription":{"text":"Unsanitized user input in XPath"},"fullDescription":{"text":"Unsanitized user input in XPath"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in XPath expressions can result in XPath injection. This vulnerability occurs when user input is directly used in XPath queries without proper sanitation, potentially granting unauthorized access to sensitive data within XML documents.\n\n## Remediations\n\n- **Do not** directly use user input in XPath expressions. This can lead to XPath injection vulnerabilities.\n- **Do** sanitize user input before including it in XPath queries. Ensure that any data derived from user input is properly cleaned to prevent injection attacks.\n- **Do** use parameterized queries wherever possible, to ensure that user input is treated as a literal value and not executable code.\n- **Do** prefer `defusedxml.lxml` module as it is a more secure XML module that offers in-built protections against XML-related attacks including XPath injection.  \n\n## References\n\n- [XPath Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n- [defusedxml Package](https://docs.python.org/3/library/xml.html#the-defusedxml-package)","markdown":"## Description\n\nUnsanitized user input in XPath expressions can result in XPath injection. This vulnerability occurs when user input is directly used in XPath queries without proper sanitation, potentially granting unauthorized access to sensitive data within XML documents.\n\n## Remediations\n\n- **Do not** directly use user input in XPath expressions. This can lead to XPath injection vulnerabilities.\n- **Do** sanitize user input before including it in XPath queries. Ensure that any data derived from user input is properly cleaned to prevent injection attacks.\n- **Do** use parameterized queries wherever possible, to ensure that user input is treated as a literal value and not executable code.\n- **Do** prefer `defusedxml.lxml` module as it is a more secure XML module that offers in-built protections against XML-related attacks including XPath injection.  \n\n## References\n\n- [XPath Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n- [defusedxml Package](https://docs.python.org/3/library/xml.html#the-defusedxml-package)"}},{"id":"ruby_lang_weak_encryption_blowfish","name":"ruby_lang_weak_encryption_blowfish","shortDescription":{"text":"Usage of weak encryption algorithm (Blowfish)"},"fullDescription":{"text":"Usage of weak encryption algorithm (Blowfish)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing Blowfish for encryption is a security risk as it is a weak algorithm, vulnerable to collision attacks (including birthday attacks) where two different inputs can produce the same hash value, compromising data integrity and security. A weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\n\n- **Do not** use Blowfish as it is considered a weak encryption algorithm. This can make your data vulnerable to attacks.\n  ```ruby\n  Crypt::Blowfish.new(\"weak password encryption\") #unsafe\n  ```\n- **Do** use stronger encryption algorithms like bcrypt to ensure higher security levels for your data.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)","markdown":"## Description\n\nUsing Blowfish for encryption is a security risk as it is a weak algorithm, vulnerable to collision attacks (including birthday attacks) where two different inputs can produce the same hash value, compromising data integrity and security. A weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\n\n- **Do not** use Blowfish as it is considered a weak encryption algorithm. This can make your data vulnerable to attacks.\n  ```ruby\n  Crypt::Blowfish.new(\"weak password encryption\") #unsafe\n  ```\n- **Do** use stronger encryption algorithms like bcrypt to ensure higher security levels for your data.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)"}},{"id":"php_third_parties_algolia","name":"php_third_parties_algolia","shortDescription":{"text":"Leakage of sensitive data to Algolia"},"fullDescription":{"text":"Leakage of sensitive data to Algolia"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n"}},{"id":"go_gosec_crypto_weak_random","name":"go_gosec_crypto_weak_random","shortDescription":{"text":"Usage of weak Pseudo-Random Number Generator (PRNG)"},"fullDescription":{"text":"Usage of weak Pseudo-Random Number Generator (PRNG)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe `math/rand` package in Go generates pseudorandom numbers that are not secure for cryptographic purposes. These numbers can be predicted if the seed is known, posing a risk to the security of applications that use them for generating secrets, tokens, or other security-sensitive elements.\n\n## Remediations\n\n- **Do** use `crypto/rand` instead of `math/rand` for generating random numbers in contexts where security is crucial. This ensures the randomness is cryptographically secure and unpredictable.\n- **Do not** use `math/rand` for generating random numbers in cryptographic applications, including but not limited to key generation, authentication tokens, or security challenges.\n- **Do not** initialize `math/rand` with predictable seeds, such as timestamps or other easily guessable values, if it is required to use `math/rand`.\n\n## References\n\n- [crypto/rand package documentation](https://pkg.go.dev/crypto/rand)","markdown":"## Description\n\nThe `math/rand` package in Go generates pseudorandom numbers that are not secure for cryptographic purposes. These numbers can be predicted if the seed is known, posing a risk to the security of applications that use them for generating secrets, tokens, or other security-sensitive elements.\n\n## Remediations\n\n- **Do** use `crypto/rand` instead of `math/rand` for generating random numbers in contexts where security is crucial. This ensures the randomness is cryptographically secure and unpredictable.\n- **Do not** use `math/rand` for generating random numbers in cryptographic applications, including but not limited to key generation, authentication tokens, or security challenges.\n- **Do not** initialize `math/rand` with predictable seeds, such as timestamps or other easily guessable values, if it is required to use `math/rand`.\n\n## References\n\n- [crypto/rand package documentation](https://pkg.go.dev/crypto/rand)"}},{"id":"php_lang_weak_password_hash_md","name":"php_lang_weak_password_hash_md","shortDescription":{"text":"Usage of weak hashing library on a password (MDx)"},"fullDescription":{"text":"Usage of weak hashing library on a password (MDx)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like MDx for passwords increases the risk of data breaches. MD5 for example is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing passwords as it is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted_password = md5($user-\u003epassword); // unsafe\n  ```\n- **Do** use stronger, more secure hashing functions like those provided by `password_hash` in PHP for storing passwords. This function is designed to use a strong hash algorithm that is currently considered secure.\n  ```php\n  $encrypted_password = password_hash($user-\u003epassword, PASSWORD_DEFAULT);\n  ```","markdown":"## Description\n\nUsing a weak hashing library like MDx for passwords increases the risk of data breaches. MD5 for example is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing passwords as it is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted_password = md5($user-\u003epassword); // unsafe\n  ```\n- **Do** use stronger, more secure hashing functions like those provided by `password_hash` in PHP for storing passwords. This function is designed to use a strong hash algorithm that is currently considered secure.\n  ```php\n  $encrypted_password = password_hash($user-\u003epassword, PASSWORD_DEFAULT);\n  ```"}},{"id":"ruby_lang_cookies","name":"ruby_lang_cookies","shortDescription":{"text":"Leakage of sensitive data in cookie"},"fullDescription":{"text":"Leakage of sensitive data in cookie"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```ruby\n  cookies[:user_email] = \"john@doe.com\" # unsafe\n  ```\n- **Do** use encrypted cookies to protect sensitive data stored in cookies.\n  ```ruby\n  cookies.encrypted[:user_email] = \"john@doe.com\"\n  ```\n\n## References\n\n- [ActionDispatch::Cookies](https://edgeapi.rubyonrails.org/classes/ActionDispatch/Cookies.html)\n- [Demystifying cookie security in rails 6](https://dev.to/ayushn21/demystifying-cookie-security-in-rails-6-1j2f)","markdown":"## Description\n\nStoring sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```ruby\n  cookies[:user_email] = \"john@doe.com\" # unsafe\n  ```\n- **Do** use encrypted cookies to protect sensitive data stored in cookies.\n  ```ruby\n  cookies.encrypted[:user_email] = \"john@doe.com\"\n  ```\n\n## References\n\n- [ActionDispatch::Cookies](https://edgeapi.rubyonrails.org/classes/ActionDispatch/Cookies.html)\n- [Demystifying cookie security in rails 6](https://dev.to/ayushn21/demystifying-cookie-security-in-rails-6-1j2f)"}},{"id":"ruby_lang_ssl_verification","name":"ruby_lang_ssl_verification","shortDescription":{"text":"Missing SSL certificate verification"},"fullDescription":{"text":"Missing SSL certificate verification"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nMissing SSL certificate verification can compromise the security of sensitive data. This vulnerability arises when an application fails to check for valid SSL certificates during data transmission, potentially allowing attackers to intercept or manipulate data.\n\n## Remediations\n\n- **Do not** disable SSL certificate verification. Disabling it, as shown below, makes your application vulnerable to Man-in-the-Middle attacks.\n  ```ruby\n  require \"net/https\"\n  require \"uri\"\n\n  uri = URI.parse(\"https://ssl-site.com/\")\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  http.verify_mode = OpenSSL::SSL::VERIFY_NONE # unsafe\n  ```\n- **Do** ensure SSL certificate verification is enabled by setting the verification mode to `VERIFY_PEER`. This ensures the authenticity of the SSL certificate presented by the server.\n  ```ruby\n  http.verify_mode = OpenSSL::SSL::VERIFY_PEER\n  ```\n\n## References\n\n- [Ruby OpenSSL module](https://ruby.github.io/openssl/OpenSSL.html)","markdown":"## Description\n\nMissing SSL certificate verification can compromise the security of sensitive data. This vulnerability arises when an application fails to check for valid SSL certificates during data transmission, potentially allowing attackers to intercept or manipulate data.\n\n## Remediations\n\n- **Do not** disable SSL certificate verification. Disabling it, as shown below, makes your application vulnerable to Man-in-the-Middle attacks.\n  ```ruby\n  require \"net/https\"\n  require \"uri\"\n\n  uri = URI.parse(\"https://ssl-site.com/\")\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  http.verify_mode = OpenSSL::SSL::VERIFY_NONE # unsafe\n  ```\n- **Do** ensure SSL certificate verification is enabled by setting the verification mode to `VERIFY_PEER`. This ensures the authenticity of the SSL certificate presented by the server.\n  ```ruby\n  http.verify_mode = OpenSSL::SSL::VERIFY_PEER\n  ```\n\n## References\n\n- [Ruby OpenSSL module](https://ruby.github.io/openssl/OpenSSL.html)"}},{"id":"go_gosec_filesystem_decompression_bomb","name":"go_gosec_filesystem_decompression_bomb","shortDescription":{"text":"Missing configuration against decompression bomb"},"fullDescription":{"text":"Missing configuration against decompression bomb"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nDecompression bombs pose a risk by exploiting applications that process compressed files. These attacks involve a compressed file that is small in size but expands to a significantly larger size when decompressed. This can overwhelm system resources such as CPU, memory, or disk space, causing a Denial of Service (DoS).\n\n## Remediations\n\n- **Do** limit the decompression size. Use `io.LimitReader`, for example, to restrict the amount of data that a reader will decompress. This prevents the decompression of large files that could fill up memory or disk space.\n  ```go\n  const maxDecompressSize = 10 * 1024 * 1024 // 10 MB\n  limitedReader := io.LimitReader(r, maxDecompressSize)\n  ```\n- **Do** monitor resource usage to detect unexpected increases in CPU, memory, or disk usage, which may indicate an attack.\n- **Do** validate the size and type of input files before decompression. Reject files that do not meet predefined criteria to avoid processing potentially harmful data.\n- **Do** ensure your application fails safely. It should handle decompression errors without crashing or becoming unresponsive.\n- **Do** regularly update your compression libraries to incorporate the latest security patches and protect against known vulnerabilities.\n- **Do** educate users about the risks associated with decompression bombs, especially if they have the ability to upload compressed files.","markdown":"## Description\n\nDecompression bombs pose a risk by exploiting applications that process compressed files. These attacks involve a compressed file that is small in size but expands to a significantly larger size when decompressed. This can overwhelm system resources such as CPU, memory, or disk space, causing a Denial of Service (DoS).\n\n## Remediations\n\n- **Do** limit the decompression size. Use `io.LimitReader`, for example, to restrict the amount of data that a reader will decompress. This prevents the decompression of large files that could fill up memory or disk space.\n  ```go\n  const maxDecompressSize = 10 * 1024 * 1024 // 10 MB\n  limitedReader := io.LimitReader(r, maxDecompressSize)\n  ```\n- **Do** monitor resource usage to detect unexpected increases in CPU, memory, or disk usage, which may indicate an attack.\n- **Do** validate the size and type of input files before decompression. Reject files that do not meet predefined criteria to avoid processing potentially harmful data.\n- **Do** ensure your application fails safely. It should handle decompression errors without crashing or becoming unresponsive.\n- **Do** regularly update your compression libraries to incorporate the latest security patches and protect against known vulnerabilities.\n- **Do** educate users about the risks associated with decompression bombs, especially if they have the ability to upload compressed files."}},{"id":"go_third_parties_segment","name":"go_third_parties_segment","shortDescription":{"text":"Leakage of sensitive data to Segment"},"fullDescription":{"text":"Leakage of sensitive data to Segment"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party analytics tools like Segment is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party analytics libraries like Segment.\n\n## References\n- [Segment docs](https://segment.com/docs/connections/sources/catalog/libraries/server/go/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party analytics tools like Segment is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party analytics libraries like Segment.\n\n## References\n- [Segment docs](https://segment.com/docs/connections/sources/catalog/libraries/server/go/)\n"}},{"id":"python_django_cookies","name":"python_django_cookies","shortDescription":{"text":"Leakage of sensitive data in cookie"},"fullDescription":{"text":"Leakage of sensitive data in cookie"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```python\n  HttpResponse.set_cookie(\"user\", \"john@doe.com\", ...) # unsafe\n  ```\n- **Do** use encrypted cookies to protect sensitive data stored in cookies.\n  ```python\n  HttpResponse.set_signed_cookie(\"user\", \"john@doe.com\", ...)\n  ```\n\n## References\n- [Django set_signed_cookie documentation](https://docs.djangoproject.com/en/5.0/ref/request-response/#django.http.HttpResponse.set_signed_cookie)","markdown":"## Description\n\nStoring sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```python\n  HttpResponse.set_cookie(\"user\", \"john@doe.com\", ...) # unsafe\n  ```\n- **Do** use encrypted cookies to protect sensitive data stored in cookies.\n  ```python\n  HttpResponse.set_signed_cookie(\"user\", \"john@doe.com\", ...)\n  ```\n\n## References\n- [Django set_signed_cookie documentation](https://docs.djangoproject.com/en/5.0/ref/request-response/#django.http.HttpResponse.set_signed_cookie)"}},{"id":"ruby_rails_permissive_regex_validation","name":"ruby_rails_permissive_regex_validation","shortDescription":{"text":"Missing validation for regular expression"},"fullDescription":{"text":"Missing validation for regular expression"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen validating data with regular expressions, it's crucial to match the entire text. Failing to specify the start and end of the text can lead to incomplete validation, making your application vulnerable to malicious input. Regular expressions should always specify the start of text (\\A) and end of text (\\z or \\Z) boundaries to ensure that the entire string is evaluated, not just portions of it.\n\n## Remediations\n\n- **Do not** use regular expressions for validation without specifying the start and end of the text. This approach can result in partial matches, which may not fully validate the data.\n  ```ruby\n  validates :attribute, format: { with: /foo/ }\n  ```\n- **Do not** rely on line-based boundaries (`^` for start of line, `$` for end of line) for validation. These can allow unexpected matches across multiple lines, potentially bypassing the validation.\n  ```ruby\n  validates :attribute, format: { with: /^foo$/ }\n  ```\n- **Do** use whole-text boundaries (`\\A` for start of text, `\\z` or `\\Z` for absolute end of text) in your regular expressions. This ensures that the validation matches the entire text, from start to finish, providing a more secure validation.\n  ```ruby\n  validates :attribute1, format: { with: \"\\Afoo\\Z\" }\n  validates :attribute2, format: { with: \"\\Afoo\\z\" }\n  ```\n\n## References\n\n- [Active Record format validation](https://guides.rubyonrails.org/active_record_validations.html#format)","markdown":"## Description\n\nWhen validating data with regular expressions, it's crucial to match the entire text. Failing to specify the start and end of the text can lead to incomplete validation, making your application vulnerable to malicious input. Regular expressions should always specify the start of text (\\A) and end of text (\\z or \\Z) boundaries to ensure that the entire string is evaluated, not just portions of it.\n\n## Remediations\n\n- **Do not** use regular expressions for validation without specifying the start and end of the text. This approach can result in partial matches, which may not fully validate the data.\n  ```ruby\n  validates :attribute, format: { with: /foo/ }\n  ```\n- **Do not** rely on line-based boundaries (`^` for start of line, `$` for end of line) for validation. These can allow unexpected matches across multiple lines, potentially bypassing the validation.\n  ```ruby\n  validates :attribute, format: { with: /^foo$/ }\n  ```\n- **Do** use whole-text boundaries (`\\A` for start of text, `\\z` or `\\Z` for absolute end of text) in your regular expressions. This ensures that the validation matches the entire text, from start to finish, providing a more secure validation.\n  ```ruby\n  validates :attribute1, format: { with: \"\\Afoo\\Z\" }\n  validates :attribute2, format: { with: \"\\Afoo\\z\" }\n  ```\n\n## References\n\n- [Active Record format validation](https://guides.rubyonrails.org/active_record_validations.html#format)"}},{"id":"ruby_third_parties_new_relic","name":"ruby_third_parties_new_relic","shortDescription":{"text":"Leakage of sensitive data to New Relic"},"fullDescription":{"text":"Leakage of sensitive data to New Relic"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n"}},{"id":"javascript_lang_http_url_using_user_input","name":"javascript_lang_http_url_using_user_input","shortDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"fullDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nConstructing URLs based on user input puts your application at risk of Server-Side Request Forgery (SSRF) attacks. This vulnerability allows attackers to manipulate the application into making unintended HTTP requests.\n\n## Remediations\n\n- **Do not** directly incorporate user input into URLs for HTTP requests. This can lead to SSRF vulnerabilities.\n  ```javascript\n  const response = axios.get(`https://${req.params.host}`) // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of allowed values before using it to form URLs. This approach minimizes the risk of SSRF attacks.\n  ```javascript\n  const hosts = new Map([\n    [\"option1\", \"api1.com\"],\n    [\"option2\", \"api2.com\"]\n  ])\n\n  const host = hosts.get(req.params.host)\n  const response = axios.get(`https://${host}`)\n  ```","markdown":"## Description\n\nConstructing URLs based on user input puts your application at risk of Server-Side Request Forgery (SSRF) attacks. This vulnerability allows attackers to manipulate the application into making unintended HTTP requests.\n\n## Remediations\n\n- **Do not** directly incorporate user input into URLs for HTTP requests. This can lead to SSRF vulnerabilities.\n  ```javascript\n  const response = axios.get(`https://${req.params.host}`) // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of allowed values before using it to form URLs. This approach minimizes the risk of SSRF attacks.\n  ```javascript\n  const hosts = new Map([\n    [\"option1\", \"api1.com\"],\n    [\"option2\", \"api2.com\"]\n  ])\n\n  const host = hosts.get(req.params.host)\n  const response = axios.get(`https://${host}`)\n  ```"}},{"id":"javascript_express_path_traversal","name":"javascript_express_path_traversal","shortDescription":{"text":"Unsanitized user input in file path"},"fullDescription":{"text":"Unsanitized user input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","markdown":"## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)"}},{"id":"python_lang_path_using_user_input","name":"python_lang_path_using_user_input","shortDescription":{"text":"Unsanitized user input in file path"},"fullDescription":{"text":"Unsanitized user input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use absolute paths and check against the expected base directory\n  ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, user_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n  ```","markdown":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use absolute paths and check against the expected base directory\n  ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, user_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n  ```"}},{"id":"javascript_lang_weak_encryption_des","name":"javascript_lang_weak_encryption_des","shortDescription":{"text":"Usage of weak encryption algorithm (DES)"},"fullDescription":{"text":"Usage of weak encryption algorithm (DES)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** opt for stronger encryption algorithms, such as AES (Advanced Encryption Standard), to ensure the confidentiality and integrity of your data.\n  ```javascript\n  const crypto = require(\"crypto\");\n\n  const cipher = crypto.createCipheriv(\"aes-256-cbc\", key, iv);\n  const encrypted = cipher.update(\"my secret message\", \"utf8\");\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)","markdown":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** opt for stronger encryption algorithms, such as AES (Advanced Encryption Standard), to ensure the confidentiality and integrity of your data.\n  ```javascript\n  const crypto = require(\"crypto\");\n\n  const cipher = crypto.createCipheriv(\"aes-256-cbc\", key, iv);\n  const encrypted = cipher.update(\"my secret message\", \"utf8\");\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)"}},{"id":"php_lang_jwt","name":"php_lang_jwt","shortDescription":{"text":"Leakage of sensitive data in JWT"},"fullDescription":{"text":"Leakage of sensitive data in JWT"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring sensitive data in JWTs exposes it to potential security risks. JWTs are designed for transmitting data securely, not for storing confidential information. Guard against including sensitive data in a JWT payload.\n\n## Remediations\n\n- **Do not** include sensitive data such as email addresses or personal identifiable information in JWT payloads. This can lead to unauthorized access to sensitive information.\n  ```php\n  $payload = [\n    'data' =\u003e 'data',\n    'email' =\u003e $user-\u003eemail\n  ];\n  $jwt = JWT::encode($payload, $key, 'HS256'); // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers like a user's UUID in JWT payloads. This approach minimizes the risk of sensitive data exposure while still allowing user identification.\n  ```php\n  $payload = [\n    'data' =\u003e 'data',\n    'uuid' =\u003e $user-\u003euuid\n  ];\n  $jwt = JWT::encode($payload, $key, 'HS256');\n  ```","markdown":"## Description\n\nStoring sensitive data in JWTs exposes it to potential security risks. JWTs are designed for transmitting data securely, not for storing confidential information. Guard against including sensitive data in a JWT payload.\n\n## Remediations\n\n- **Do not** include sensitive data such as email addresses or personal identifiable information in JWT payloads. This can lead to unauthorized access to sensitive information.\n  ```php\n  $payload = [\n    'data' =\u003e 'data',\n    'email' =\u003e $user-\u003eemail\n  ];\n  $jwt = JWT::encode($payload, $key, 'HS256'); // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers like a user's UUID in JWT payloads. This approach minimizes the risk of sensitive data exposure while still allowing user identification.\n  ```php\n  $payload = [\n    'data' =\u003e 'data',\n    'uuid' =\u003e $user-\u003euuid\n  ];\n  $jwt = JWT::encode($payload, $key, 'HS256');\n  ```"}},{"id":"php_third_parties_segment","name":"php_third_parties_segment","shortDescription":{"text":"Leakage of sensitive data to Segment"},"fullDescription":{"text":"Leakage of sensitive data to Segment"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party analytics tools like Segment is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party analytics libraries like Segment.\n\n## References\n- [Segment docs](https://segment.com/docs/connections/sources/catalog/libraries/server/php/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party analytics tools like Segment is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party analytics libraries like Segment.\n\n## References\n- [Segment docs](https://segment.com/docs/connections/sources/catalog/libraries/server/php/)\n"}},{"id":"go_third_parties_elasticsearch","name":"go_third_parties_elasticsearch","shortDescription":{"text":"Leakage of sensitive data to ElasticSearch"},"fullDescription":{"text":"Leakage of sensitive data to ElasticSearch"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/go-api/current/index.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/go-api/current/index.html)\n"}},{"id":"php_lang_permissive_allow_origin","name":"php_lang_permissive_allow_origin","shortDescription":{"text":"Permissive Access-Control-Allow-Origin configuration"},"fullDescription":{"text":"Permissive Access-Control-Allow-Origin configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nA permissive Access-Control-Allow-Origin configuration can expose your application to security risks. When this header is set to \"*\", it means your application's responses can be accessed by any website, potentially leading to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** set the Access-Control-Allow-Origin header to \"*\". This overly permissive setting can make your application vulnerable to attacks.\n  ```php\n  header(\"Access-Control-Allow-Origin: *\");\n  ```\n- **Do** restrict the Access-Control-Allow-Origin header to only allow specific, trusted origins that need access to your application. This minimizes the risk of sensitive data exposure.\n  ```php\n  header(\"Access-Control-Allow-Origin: myapp.example.com\");\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)","markdown":"## Description\n\nA permissive Access-Control-Allow-Origin configuration can expose your application to security risks. When this header is set to \"*\", it means your application's responses can be accessed by any website, potentially leading to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** set the Access-Control-Allow-Origin header to \"*\". This overly permissive setting can make your application vulnerable to attacks.\n  ```php\n  header(\"Access-Control-Allow-Origin: *\");\n  ```\n- **Do** restrict the Access-Control-Allow-Origin header to only allow specific, trusted origins that need access to your application. This minimizes the risk of sensitive data exposure.\n  ```php\n  header(\"Access-Control-Allow-Origin: myapp.example.com\");\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)"}},{"id":"ruby_third_parties_scout_apm","name":"ruby_third_parties_scout_apm","shortDescription":{"text":"Leakage of sensitive data to Scout APM"},"fullDescription":{"text":"Leakage of sensitive data to Scout APM"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Scout APM is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Scout APM.\n\n## References\n- [Scout APM docs](https://scoutapm.com/docs/ruby)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Scout APM is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Scout APM.\n\n## References\n- [Scout APM docs](https://scoutapm.com/docs/ruby)\n"}},{"id":"php_lang_weak_hash_crc32","name":"php_lang_weak_hash_crc32","shortDescription":{"text":"Usage of weak hashing library (CRC32)"},"fullDescription":{"text":"Usage of weak hashing library (CRC32)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe use of CRC32 for hashing is insecure. CRC32 is designed for error-checking and not for security purposes, making it vulnerable to intentional data tampering.\n\n## Remediations\n\n- **Do not** use CRC32 for hashing when security is a concern. It is not secure against intentional data modifications.\n  ```php\n  $myhash = crc32($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data integrity and security.\n  ```php\n  $myhash = hash('sha256', $input);\n  ```","markdown":"## Description\n\nThe use of CRC32 for hashing is insecure. CRC32 is designed for error-checking and not for security purposes, making it vulnerable to intentional data tampering.\n\n## Remediations\n\n- **Do not** use CRC32 for hashing when security is a concern. It is not secure against intentional data modifications.\n  ```php\n  $myhash = crc32($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data integrity and security.\n  ```php\n  $myhash = hash('sha256', $input);\n  ```"}},{"id":"python_lang_avoid_pickle","name":"python_lang_avoid_pickle","shortDescription":{"text":"Usage of unsafe Pickle libraries"},"fullDescription":{"text":"Usage of unsafe Pickle libraries"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing pickle, _pickle and cPickle can make your application vulnerable to unsafe code execution. This is because the deserialization logic of these libraries allows for arbitrary code execution. It is best practices to avoid these libraries and to use a safer serialization formats like JSON.\n\n## Remediations\n\n- **Do not** use pickle or its derivatives for deserialization wherever possible. These libraries are open to security vulnerabilities.\n- **Do** use recommended safer formats like JSON, Protocol Buffers (protobuf) and MessagePack.\n  ```python\n    import msgpack #MessagePack\n\n    data = {'key': 'value'}\n    packed_data = msgpack.packb(data)\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\n","markdown":"## Description\n\nUsing pickle, _pickle and cPickle can make your application vulnerable to unsafe code execution. This is because the deserialization logic of these libraries allows for arbitrary code execution. It is best practices to avoid these libraries and to use a safer serialization formats like JSON.\n\n## Remediations\n\n- **Do not** use pickle or its derivatives for deserialization wherever possible. These libraries are open to security vulnerabilities.\n- **Do** use recommended safer formats like JSON, Protocol Buffers (protobuf) and MessagePack.\n  ```python\n    import msgpack #MessagePack\n\n    data = {'key': 'value'}\n    packed_data = msgpack.packb(data)\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\n"}},{"id":"php_symfony_permissive_regex_validation","name":"php_symfony_permissive_regex_validation","shortDescription":{"text":"Missing validation for regular expression"},"fullDescription":{"text":"Missing validation for regular expression"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen validating data with regular expressions, it's crucial to match the entire text. Failing to specify the start and end of the text can lead to incomplete validation, making your application vulnerable to malicious input. Regular expressions should always specify the start of text (\\A) and end of text (\\z or \\Z) boundaries to ensure that the entire string is evaluated, not just portions of it. Note: it is best security practice to prefer the boundary expressions \\A and \\z or \\Z over ^ and $, because ^ and $ operate as line-based boundaries when multiline mode is enabled.\n\n## Remediations\n\n- **Do not** use regular expressions without specifying start and end text boundaries. This approach can result in partial matches, which may not fully validate the data.\n  ```php\n  #[Assert\\Regex('/foo/')]\n  protected string $attribute; // unsafe\n  ```\n- **Do not** rely on line-based boundaries (^ and $).\n  ```php\n  #[Assert\\Regex('/^foo$/')]\n  protected string $attribute; // unsafe\n  ```\n- **Do** use \\A and \\z or \\Z as boundaries in your regular expressions to ensure that the entire text is validated from start to end.\n  ```php\n  #[Assert\\Regex('/\\Afoo\\z/')]\n  protected string $attribute;\n  ```\n\n## References\n\n- [Symfony validation](https://symfony.com/doc/current/validation.html)","markdown":"## Description\n\nWhen validating data with regular expressions, it's crucial to match the entire text. Failing to specify the start and end of the text can lead to incomplete validation, making your application vulnerable to malicious input. Regular expressions should always specify the start of text (\\A) and end of text (\\z or \\Z) boundaries to ensure that the entire string is evaluated, not just portions of it. Note: it is best security practice to prefer the boundary expressions \\A and \\z or \\Z over ^ and $, because ^ and $ operate as line-based boundaries when multiline mode is enabled.\n\n## Remediations\n\n- **Do not** use regular expressions without specifying start and end text boundaries. This approach can result in partial matches, which may not fully validate the data.\n  ```php\n  #[Assert\\Regex('/foo/')]\n  protected string $attribute; // unsafe\n  ```\n- **Do not** rely on line-based boundaries (^ and $).\n  ```php\n  #[Assert\\Regex('/^foo$/')]\n  protected string $attribute; // unsafe\n  ```\n- **Do** use \\A and \\z or \\Z as boundaries in your regular expressions to ensure that the entire text is validated from start to end.\n  ```php\n  #[Assert\\Regex('/\\Afoo\\z/')]\n  protected string $attribute;\n  ```\n\n## References\n\n- [Symfony validation](https://symfony.com/doc/current/validation.html)"}},{"id":"ruby_lang_hardcoded_secret","name":"ruby_lang_hardcoded_secret","shortDescription":{"text":"Usage of hard-coded secret"},"fullDescription":{"text":"Usage of hard-coded secret"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring secret values directly in the source code exposes them to unauthorized access and compromises security.\n\n## Remediations\n\n- **Do not** embed secret values directly in your source code. This practice makes your application vulnerable to attacks if the source code is accessed.\n  ```ruby\n  SECRET_KEY = \"hardcoded_secret_key\" # unsafe\n  ```\n- **Do** use environment variables to manage secrets securely. This method keeps sensitive information out of your codebase and makes it more difficult for unauthorized users to access.\n- **Do** retrieve secrets from a secure location at runtime to ensure they are not exposed in the source code.\n  ```ruby\n  SECRET_KEY = ENV['SECRET_KEY']\n  ```\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)","markdown":"## Description\n\nStoring secret values directly in the source code exposes them to unauthorized access and compromises security.\n\n## Remediations\n\n- **Do not** embed secret values directly in your source code. This practice makes your application vulnerable to attacks if the source code is accessed.\n  ```ruby\n  SECRET_KEY = \"hardcoded_secret_key\" # unsafe\n  ```\n- **Do** use environment variables to manage secrets securely. This method keeps sensitive information out of your codebase and makes it more difficult for unauthorized users to access.\n- **Do** retrieve secrets from a secure location at runtime to ensure they are not exposed in the source code.\n  ```ruby\n  SECRET_KEY = ENV['SECRET_KEY']\n  ```\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)"}},{"id":"javascript_third_parties_dom_purify","name":"javascript_third_parties_dom_purify","shortDescription":{"text":"Usage of vulnerable DOMPurify package"},"fullDescription":{"text":"Usage of vulnerable DOMPurify package"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nFor DOMPurify versions less than 2.0.17, there are XSS vulnerabilities when using the sanitize function without proper configuration.\n\n## Remediations\n\n- **Do** upgrade DOMPurify to version 2.0.17 or greater, and specify a secure configuration option.\n  ```javascript\n    // either\n    DOMPurify.sanitize(htmlToSanitize, { RETURN_DOM_IMPORT:true })\n    // or\n    DOMPurify.sanitize(htmlToSanitize, { RETURN_DOM_FRAGMENT: true })\n  ```\n\n## References\n- [Vulnerability explained](https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass)\n","markdown":"## Description\n\nFor DOMPurify versions less than 2.0.17, there are XSS vulnerabilities when using the sanitize function without proper configuration.\n\n## Remediations\n\n- **Do** upgrade DOMPurify to version 2.0.17 or greater, and specify a secure configuration option.\n  ```javascript\n    // either\n    DOMPurify.sanitize(htmlToSanitize, { RETURN_DOM_IMPORT:true })\n    // or\n    DOMPurify.sanitize(htmlToSanitize, { RETURN_DOM_FRAGMENT: true })\n  ```\n\n## References\n- [Vulnerability explained](https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass)\n"}},{"id":"ruby_third_parties_elasticsearch","name":"ruby_third_parties_elasticsearch","shortDescription":{"text":"Leakage of sensitive data to Elasticsearch"},"fullDescription":{"text":"Leakage of sensitive data to Elasticsearch"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/ruby-api/current/index.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/ruby-api/current/index.html)\n"}},{"id":"javascript_third_parties_honeybadger","name":"javascript_third_parties_honeybadger","shortDescription":{"text":"Leakage of sensitive data to HoneyBadget"},"fullDescription":{"text":"Leakage of sensitive data to HoneyBadget"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    const Honeybadger = require(\"@honeybadger-io/js\");\n\n    let context = { user: { uuid: \"aacd05fd-8f5b-4bc6-aa8b-35e5fbf37325\" } };\n\n    Honeybadger.setContext(context);\n  ```\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/javascript/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    const Honeybadger = require(\"@honeybadger-io/js\");\n\n    let context = { user: { uuid: \"aacd05fd-8f5b-4bc6-aa8b-35e5fbf37325\" } };\n\n    Honeybadger.setContext(context);\n  ```\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/javascript/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n"}},{"id":"php_lang_logger","name":"php_lang_logger","shortDescription":{"text":"Leakage of sensitive information in logger message"},"fullDescription":{"text":"Leakage of sensitive information in logger message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSensitive information leakage in logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintentional exposure of private information.\n  ```php\n  error_log('User is: ' . $user.email);  // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users or other entities in log messages. This approach helps maintain privacy and security.\n  ```php\n  error_log('User is: ' . $user.uuid);\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","markdown":"## Description\n\nSensitive information leakage in logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintentional exposure of private information.\n  ```php\n  error_log('User is: ' . $user.email);  // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users or other entities in log messages. This approach helps maintain privacy and security.\n  ```php\n  error_log('User is: ' . $user.uuid);\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)"}},{"id":"python_django_cookie_missing_http_only","name":"python_django_cookie_missing_http_only","shortDescription":{"text":"Missing HTTP Only option in cookie configuration"},"fullDescription":{"text":"Missing HTTP Only option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```python\n  response.set_cookie(httponly=True);\n  ```","markdown":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```python\n  response.set_cookie(httponly=True);\n  ```"}},{"id":"python_third_parties_bugsnag","name":"python_third_parties_bugsnag","shortDescription":{"text":"Leakage of sensitive data to Bugsnag"},"fullDescription":{"text":"Leakage of sensitive data to Bugsnag"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/python/django/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/python/django/)\n"}},{"id":"go_gosec_crypto_insecure_ignore_host_key","name":"go_gosec_crypto_insecure_ignore_host_key","shortDescription":{"text":"Missing verification of host keys"},"fullDescription":{"text":"Missing verification of host keys"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLacking verification of host key during SSH connections compromises the security of your application. Host keys are essential for verifying the server's identity to prevent Man-in-the-Middle (MitM) attacks, where an attacker could pose as the server. Without this verification, there's no way to ensure the server's authenticity.\n\n## Remediations\n\n- **Do not** use `ssh.InsecureIgnoreHostKey` as a `HostKeyCallback` function. This method bypasses any form of host validation, making your application vulnerable to attacks.\n- **Do** implement host key verification. For example, use the `knownhosts` package from Go's `x/crypto/ssh` to check server keys against a list of known hosts, similar to OpenSSH's approach.\n- **Do not** disable host key checking in your production code. While it might seem convenient for development or testing environments, it significantly increases the risk of security breaches.\n\n## References\n\n- [GoDoc for x/crypto/ssh](https://pkg.go.dev/golang.org/x/crypto/ssh)\n- [Secure use of SSH - OpenSSH](https://www.openssh.com/)","markdown":"## Description\n\nLacking verification of host key during SSH connections compromises the security of your application. Host keys are essential for verifying the server's identity to prevent Man-in-the-Middle (MitM) attacks, where an attacker could pose as the server. Without this verification, there's no way to ensure the server's authenticity.\n\n## Remediations\n\n- **Do not** use `ssh.InsecureIgnoreHostKey` as a `HostKeyCallback` function. This method bypasses any form of host validation, making your application vulnerable to attacks.\n- **Do** implement host key verification. For example, use the `knownhosts` package from Go's `x/crypto/ssh` to check server keys against a list of known hosts, similar to OpenSSH's approach.\n- **Do not** disable host key checking in your production code. While it might seem convenient for development or testing environments, it significantly increases the risk of security breaches.\n\n## References\n\n- [GoDoc for x/crypto/ssh](https://pkg.go.dev/golang.org/x/crypto/ssh)\n- [Secure use of SSH - OpenSSH](https://www.openssh.com/)"}},{"id":"ruby_rails_insecure_smtp","name":"ruby_rails_insecure_smtp","shortDescription":{"text":"Usage of insecure SMTP connection"},"fullDescription":{"text":"Usage of insecure SMTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing an insecure SMTP connection exposes your data to interception by unauthorized parties. Alwats check that your application's SMTP settings enforce secure connections.\n\n## Remediations\n\n- **Do** enable SSL encryption in your SMTP settings to secure the connection. For Ruby on Rails' ActionMailer, configure as follows:\n  ```ruby\n  config.action_mailer.smtp_settings = {\n    ...\n    ssl: true\n  }\n  ```\n\n## References\n\n- [Ruby on Rails configuring Action Mailer](https://guides.rubyonrails.org/configuring.html#configuring-action-mailer)\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nUsing an insecure SMTP connection exposes your data to interception by unauthorized parties. Alwats check that your application's SMTP settings enforce secure connections.\n\n## Remediations\n\n- **Do** enable SSL encryption in your SMTP settings to secure the connection. For Ruby on Rails' ActionMailer, configure as follows:\n  ```ruby\n  config.action_mailer.smtp_settings = {\n    ...\n    ssl: true\n  }\n  ```\n\n## References\n\n- [Ruby on Rails configuring Action Mailer](https://guides.rubyonrails.org/configuring.html#configuring-action-mailer)\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"php_symfony_csrf_protection_disabled","name":"php_symfony_csrf_protection_disabled","shortDescription":{"text":"Missing Cross-Site Request Forgery (CSRF) configuration"},"fullDescription":{"text":"Missing Cross-Site Request Forgery (CSRF) configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is vulnerable when Cross-Site Request Forgery (CSRF) protection is disabled. This weakness can allow attackers to deceive users into executing actions they did not intend, potentially compromising security or data integrity.\n\n## Remediations\n\n- **Do** ensure that CSRF proteection is enabled in your web application's configuration settings. This prevents attackers from exploiting your web application by making unauthorized requests on behalf of the user.\n  ```php\n  use Symfony\\Config\\FrameworkConfig;\n\n  return static function (FrameworkConfig $framework): void {\n      $framework-\u003ecsrfProtection()\n          -\u003eenabled(true)\n      ;\n  };\n  ```\n\n## References\n\n- [Symfony CSRF guide](https://symfony.com/doc/current/security/csrf.html)","markdown":"## Description\n\nYour application is vulnerable when Cross-Site Request Forgery (CSRF) protection is disabled. This weakness can allow attackers to deceive users into executing actions they did not intend, potentially compromising security or data integrity.\n\n## Remediations\n\n- **Do** ensure that CSRF proteection is enabled in your web application's configuration settings. This prevents attackers from exploiting your web application by making unauthorized requests on behalf of the user.\n  ```php\n  use Symfony\\Config\\FrameworkConfig;\n\n  return static function (FrameworkConfig $framework): void {\n      $framework-\u003ecsrfProtection()\n          -\u003eenabled(true)\n      ;\n  };\n  ```\n\n## References\n\n- [Symfony CSRF guide](https://symfony.com/doc/current/security/csrf.html)"}},{"id":"javascript_express_xml_external_entity_vulnerability","name":"javascript_express_xml_external_entity_vulnerability","shortDescription":{"text":"Unsanitized user input in XML parsing method"},"fullDescription":{"text":"Unsanitized user input in XML parsing method"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in XML parsing can lead to XML External Entity (XXE) injection. This vulnerability occurs when XML input containing a reference to an external entity is processed by an XML parser. The external entity can point to a file URI or network resource, potentially allowing an attacker to access sensitive data or interact with internal systems.\n\n## Remediations\n\n- **Do not** parse XML input containing untrusted data without proper sanitization. External entities within the XML should be treated with caution.\n  ```javascript\n  var libxml = require(\"libxmljs\");\n  libxml.parseXmlString(xml, { noent: false, noblanks: true });\n  ```\n- **Do not** enable the parsing of external entities in XML parsers. For instance, when using LibXML, ensure the `noent` option is set to `false` to prevent XXE attacks.\n\n## References\n\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nUnsanitized user input in XML parsing can lead to XML External Entity (XXE) injection. This vulnerability occurs when XML input containing a reference to an external entity is processed by an XML parser. The external entity can point to a file URI or network resource, potentially allowing an attacker to access sensitive data or interact with internal systems.\n\n## Remediations\n\n- **Do not** parse XML input containing untrusted data without proper sanitization. External entities within the XML should be treated with caution.\n  ```javascript\n  var libxml = require(\"libxmljs\");\n  libxml.parseXmlString(xml, { noent: false, noblanks: true });\n  ```\n- **Do not** enable the parsing of external entities in XML parsers. For instance, when using LibXML, ensure the `noent` option is set to `false` to prevent XXE attacks.\n\n## References\n\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)"}},{"id":"ruby_lang_reflection_using_user_input","name":"ruby_lang_reflection_using_user_input","shortDescription":{"text":"Unsanitized user input in code generation"},"fullDescription":{"text":"Unsanitized user input in code generation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input in code generation can lead to code injection vulnerabilities. This issue arises when an application dynamically generates or manipulates code based on user-supplied data without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input for code generation or reflection. This can lead to malicious code execution.\n  ```ruby\n  method(params[:method]) # unsafe\n  ```\n- **Do** validate or sanitize user input before using it in code generation. Use a controlled approach to map user inputs to specific, predefined actions or methods.\n  ```ruby\n  method_name =\n    case params[:action]\n    when \"option1\"\n      \"method1\"\n    when \"option2\"\n      \"method2\"\n    end\n\n  method(method_name)\n  ```\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","markdown":"## Description\n\nUsing unsanitized user input in code generation can lead to code injection vulnerabilities. This issue arises when an application dynamically generates or manipulates code based on user-supplied data without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input for code generation or reflection. This can lead to malicious code execution.\n  ```ruby\n  method(params[:method]) # unsafe\n  ```\n- **Do** validate or sanitize user input before using it in code generation. Use a controlled approach to map user inputs to specific, predefined actions or methods.\n  ```ruby\n  method_name =\n    case params[:action]\n    when \"option1\"\n      \"method1\"\n    when \"option2\"\n      \"method2\"\n    end\n\n  method(method_name)\n  ```\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)"}},{"id":"javascript_lang_session","name":"javascript_lang_session","shortDescription":{"text":"Leakage of sensitive data in local storage"},"fullDescription":{"text":"Leakage of sensitive data in local storage"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring sensitive data in `localStorage` poses a security risk. This vulnerability occurs when sensitive information is saved in the browser's local storage, making it susceptible to unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in `localStorage`. This method exposes sensitive information to potential security threats.\n  ```javascript\n  localStorage.setItem('user', email); // unsafe\n  ```\n- **Do** use server-based session storage solutions to keep session data secure. This approach minimizes the risk of sensitive data exposure.\n- **Do** store only non-sensitive data in `localStorage`, such as a unique identifier, to reduce security risks.\n  ```javascript\n  localStorage.setItem('user', user.uuid);\n  ```\n\n## References\n\n- [OWASP sensitive data exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)","markdown":"## Description\n\nStoring sensitive data in `localStorage` poses a security risk. This vulnerability occurs when sensitive information is saved in the browser's local storage, making it susceptible to unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in `localStorage`. This method exposes sensitive information to potential security threats.\n  ```javascript\n  localStorage.setItem('user', email); // unsafe\n  ```\n- **Do** use server-based session storage solutions to keep session data secure. This approach minimizes the risk of sensitive data exposure.\n- **Do** store only non-sensitive data in `localStorage`, such as a unique identifier, to reduce security risks.\n  ```javascript\n  localStorage.setItem('user', user.uuid);\n  ```\n\n## References\n\n- [OWASP sensitive data exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)"}},{"id":"ruby_rails_insecure_http_password","name":"ruby_rails_insecure_http_password","shortDescription":{"text":"Usage of hard-coded password"},"fullDescription":{"text":"Usage of hard-coded password"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring passwords in plain text within your code, especially for basic authentication, poses a significant security risk. This practice can lead to unauthorized access if the codebase is compromised.\n\n## Remediations\n\n- **Do not** hard-code passwords directly in your code. This makes your application vulnerable to attacks if the source code is exposed.\n  ```ruby\n    http_basic_authenticate_with password: \"hardcoded_password\" # unsafe\n  ```\n- **Do** use environment variables to store sensitive information such as passwords. This method keeps credentials out of your codebase and makes them easier to manage securely.\n  ```ruby\n    http_basic_authenticate_with password: ENV[\"basic_auth_password\"]\n  ```\n\n## References\n\n- [Ruby on Rails HTTP Basic Authentication](https://guides.rubyonrails.org/action_controller_overview.html#http-basic-authentication)\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)","markdown":"## Description\n\nStoring passwords in plain text within your code, especially for basic authentication, poses a significant security risk. This practice can lead to unauthorized access if the codebase is compromised.\n\n## Remediations\n\n- **Do not** hard-code passwords directly in your code. This makes your application vulnerable to attacks if the source code is exposed.\n  ```ruby\n    http_basic_authenticate_with password: \"hardcoded_password\" # unsafe\n  ```\n- **Do** use environment variables to store sensitive information such as passwords. This method keeps credentials out of your codebase and makes them easier to manage securely.\n  ```ruby\n    http_basic_authenticate_with password: ENV[\"basic_auth_password\"]\n  ```\n\n## References\n\n- [Ruby on Rails HTTP Basic Authentication](https://guides.rubyonrails.org/action_controller_overview.html#http-basic-authentication)\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)"}},{"id":"javascript_third_parties_marked","name":"javascript_third_parties_marked","shortDescription":{"text":"Usage of vulnerable marked package"},"fullDescription":{"text":"Usage of vulnerable marked package"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nFor versions of marked less than 2.0.0, there is a Regular expression Denial of Service (ReDoS) vulnerability.\n\n## Remediations\n\n- **Do** upgrade marked to version 2.0.0 or greater.\n\n## References\n- [Vulnerability explained](https://nvd.nist.gov/vuln/detail/CVE-2021-21306)\n","markdown":"## Description\n\nFor versions of marked less than 2.0.0, there is a Regular expression Denial of Service (ReDoS) vulnerability.\n\n## Remediations\n\n- **Do** upgrade marked to version 2.0.0 or greater.\n\n## References\n- [Vulnerability explained](https://nvd.nist.gov/vuln/detail/CVE-2021-21306)\n"}},{"id":"python_django_insecure_allow_origin","name":"python_django_insecure_allow_origin","shortDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"fullDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** use user input to define the `Access-Control-Allow-Origin` header without validation. This practice can inadvertently grant access to sensitive information.\n  ```python\n  response.headers['Access-Control-Allow-Origin'] = request.GET[\"my_origin\"] # unsafe\n  ```\n- **Do** validate user input if it must be used to set the `Access-Control-Allow-Origin` header. Ensure that only trusted origins are allowed by implementing a safelist of approved origins.\n  ```python\n    allowed_origins = ['http://www.example.com', 'https://www.secure.example.com']\n\n    user_origin = request.GET[\"my_origin\"]\n\n    if user_origin in allowed_origins:\n      response.headers['Access-Control-Allow-Origin'] = user_origin\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)","markdown":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** use user input to define the `Access-Control-Allow-Origin` header without validation. This practice can inadvertently grant access to sensitive information.\n  ```python\n  response.headers['Access-Control-Allow-Origin'] = request.GET[\"my_origin\"] # unsafe\n  ```\n- **Do** validate user input if it must be used to set the `Access-Control-Allow-Origin` header. Ensure that only trusted origins are allowed by implementing a safelist of approved origins.\n  ```python\n    allowed_origins = ['http://www.example.com', 'https://www.secure.example.com']\n\n    user_origin = request.GET[\"my_origin\"]\n\n    if user_origin in allowed_origins:\n      response.headers['Access-Control-Allow-Origin'] = user_origin\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)"}},{"id":"ruby_lang_http_url_using_user_input","name":"ruby_lang_http_url_using_user_input","shortDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"fullDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding user input when constructing URLs makes your application vulnerable to Server-Side Request Forgery (SSRF), which allows attackers to manipulate the server into making requests to unintended locations.\n\n## Remediations\n\n- **Do not** directly incorporate user input into HTTP URLs. This can lead to SSRF vulnerabilities.\n  ```ruby\n  Faraday.get(\"https://#{params[:host]}\") # unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach reduces the risk of SSRF attacks.\n  ```ruby\n  host =\n    case params[:host]\n    when \"option1\"\n      \"api1.com\"\n    when \"option2\"\n      \"api2.com\"\n    end\n\n  Faraday.get(\"https://#{host}\")\n  ```","markdown":"## Description\n\nIncluding user input when constructing URLs makes your application vulnerable to Server-Side Request Forgery (SSRF), which allows attackers to manipulate the server into making requests to unintended locations.\n\n## Remediations\n\n- **Do not** directly incorporate user input into HTTP URLs. This can lead to SSRF vulnerabilities.\n  ```ruby\n  Faraday.get(\"https://#{params[:host]}\") # unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach reduces the risk of SSRF attacks.\n  ```ruby\n  host =\n    case params[:host]\n    when \"option1\"\n      \"api1.com\"\n    when \"option2\"\n      \"api2.com\"\n    end\n\n  Faraday.get(\"https://#{host}\")\n  ```"}},{"id":"ruby_rails_password_length","name":"ruby_rails_password_length","shortDescription":{"text":"Usage of weak password constraint"},"fullDescription":{"text":"Usage of weak password constraint"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWeak password constraints can compromise system security. Ensure that your application's password policy enforces a minimum length of 8 characters during password creation or update processes.\n\n## Remediations\n\n- **Do** enforce a minimum password length of at least 8 characters. This helps in creating stronger passwords that are more resistant to brute-force attacks.\n  ```ruby\n  validates :password, presence: true, length: { minimum: 8, maximum: 255 }\n  ```\n- **Do** implement this validation at the model level in your application to ensure that all passwords meet the minimum length requirement.\n\n## References\n\n- [OWASP Authentication Cheat Sheet on proper password strength controls](https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#implement-proper-password-strength-controls)\n- [Devise gem for Ruby on Rails](https://github.com/heartcombo/devise)","markdown":"## Description\n\nWeak password constraints can compromise system security. Ensure that your application's password policy enforces a minimum length of 8 characters during password creation or update processes.\n\n## Remediations\n\n- **Do** enforce a minimum password length of at least 8 characters. This helps in creating stronger passwords that are more resistant to brute-force attacks.\n  ```ruby\n  validates :password, presence: true, length: { minimum: 8, maximum: 255 }\n  ```\n- **Do** implement this validation at the model level in your application to ensure that all passwords meet the minimum length requirement.\n\n## References\n\n- [OWASP Authentication Cheat Sheet on proper password strength controls](https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#implement-proper-password-strength-controls)\n- [Devise gem for Ruby on Rails](https://github.com/heartcombo/devise)"}},{"id":"go_gosec_unsafe_unsafe","name":"go_gosec_unsafe_unsafe","shortDescription":{"text":"Usage of vulnerable 'unsafe' package"},"fullDescription":{"text":"Usage of vulnerable 'unsafe' package"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe `unsafe` package in Go allows for low-level memory management, including direct memory access and pointer manipulation. While `unsafe` is a powerful library, using it bypasses Go's type safety checks and opens the door to security vulnerabilities and unpredictable behavior in your application.\n\n## Remediations\n\n- **Do not** use the `unsafe` package unless it is absolutely necessary. If you must use it, ensure you fully understand the implications and thoroughly test your code.\n- **Do** ensure buffer boundaries are respected to avoid buffer overflows. This precaution helps prevent unauthorized code execution.\n  ```go\n  buffer := make([]byte, 10)\n  ```\n- **Do not** access memory after it has been freed to avoid use-after-free vulnerabilities, which can lead to unintended code execution or unpredictable system behavior.\n  ```go\n  unsafePointer := unsafe.Pointer(\u0026data)\n  C.free(unsafePointer)\n  // now unsafe to access\n  ```\n- **Do** regularly review and audit your code to prevent memory or information leaks that could compromise security or lead to system failures due to exhausted memory.\n\n## References\n\n- [Buffer Overflows - OWASP](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [Using Freed Memory - OWASP](https://owasp.org/www-community/vulnerabilities/Using_freed_memory)\n- [Memory Leaks - OWASP](https://owasp.org/www-community/vulnerabilities/Memory_leak)","markdown":"## Description\n\nThe `unsafe` package in Go allows for low-level memory management, including direct memory access and pointer manipulation. While `unsafe` is a powerful library, using it bypasses Go's type safety checks and opens the door to security vulnerabilities and unpredictable behavior in your application.\n\n## Remediations\n\n- **Do not** use the `unsafe` package unless it is absolutely necessary. If you must use it, ensure you fully understand the implications and thoroughly test your code.\n- **Do** ensure buffer boundaries are respected to avoid buffer overflows. This precaution helps prevent unauthorized code execution.\n  ```go\n  buffer := make([]byte, 10)\n  ```\n- **Do not** access memory after it has been freed to avoid use-after-free vulnerabilities, which can lead to unintended code execution or unpredictable system behavior.\n  ```go\n  unsafePointer := unsafe.Pointer(\u0026data)\n  C.free(unsafePointer)\n  // now unsafe to access\n  ```\n- **Do** regularly review and audit your code to prevent memory or information leaks that could compromise security or lead to system failures due to exhausted memory.\n\n## References\n\n- [Buffer Overflows - OWASP](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [Using Freed Memory - OWASP](https://owasp.org/www-community/vulnerabilities/Using_freed_memory)\n- [Memory Leaks - OWASP](https://owasp.org/www-community/vulnerabilities/Memory_leak)"}},{"id":"ruby_lang_websocket_insecure","name":"ruby_lang_websocket_insecure","shortDescription":{"text":"Usage of insecure websocket connection"},"fullDescription":{"text":"Usage of insecure websocket connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing an insecure WebSocket connection exposes data to interception and manipulation. This vulnerability occurs when WebSocket connections are not encrypted with SSL/TLS, risking the confidentiality and integrity of the data transmitted.\n\n## Remediations\n\n- **Do not** initiate WebSocket connections without SSL. This can compromise the security of data in transit.\n  ```ruby\n  client = Faye::WebSocket::Client.new('ws://insecure-api.com') # unsafe\n  ```\n- **Do** ensure all WebSocket connections are made over SSL to protect data during transmission.\n  ```ruby\n  client = Faye::WebSocket::Client.new('wss://secure-api.com')\n  ```\n\n## References\n\n- [OWASP Insecure Transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nUsing an insecure WebSocket connection exposes data to interception and manipulation. This vulnerability occurs when WebSocket connections are not encrypted with SSL/TLS, risking the confidentiality and integrity of the data transmitted.\n\n## Remediations\n\n- **Do not** initiate WebSocket connections without SSL. This can compromise the security of data in transit.\n  ```ruby\n  client = Faye::WebSocket::Client.new('ws://insecure-api.com') # unsafe\n  ```\n- **Do** ensure all WebSocket connections are made over SSL to protect data during transmission.\n  ```ruby\n  client = Faye::WebSocket::Client.new('wss://secure-api.com')\n  ```\n\n## References\n\n- [OWASP Insecure Transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"javascript_express_nosql_injection","name":"javascript_express_nosql_injection","shortDescription":{"text":"Unsanitized input in NoSQL query"},"fullDescription":{"text":"Unsanitized input in NoSQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized data in NoSQL queries exposes your application to NoSQL injection attacks. This vulnerability arises when user input, request data, or any externally influenced data is directly passed into a NoSQL query function without proper sanitization.\n\n## Remediations\n\n- **Do not** include raw, unsanitized user input in NoSQL queries. This practice can lead to NoSQL injection vulnerabilities.\n  ```javascript\n    const User = require(\"../models/user\")\n    const newUser = new User(req.body); // unsafe\n  ```\n- **Do** sanitize all input data before using it in NoSQL queries. Ensuring data is properly sanitized can prevent NoSQL injection attacks.\n  ```javascript\n    const User = require(\"../models/user\");\n\n    username = req.params.username;\n    User.findOne({ name: username.toString() });\n  ```\n\n## References\n\n- [OWASP NoSQL injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n","markdown":"## Description\n\nUsing unsanitized data in NoSQL queries exposes your application to NoSQL injection attacks. This vulnerability arises when user input, request data, or any externally influenced data is directly passed into a NoSQL query function without proper sanitization.\n\n## Remediations\n\n- **Do not** include raw, unsanitized user input in NoSQL queries. This practice can lead to NoSQL injection vulnerabilities.\n  ```javascript\n    const User = require(\"../models/user\")\n    const newUser = new User(req.body); // unsafe\n  ```\n- **Do** sanitize all input data before using it in NoSQL queries. Ensuring data is properly sanitized can prevent NoSQL injection attacks.\n  ```javascript\n    const User = require(\"../models/user\");\n\n    username = req.params.username;\n    User.findOne({ name: username.toString() });\n  ```\n\n## References\n\n- [OWASP NoSQL injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n"}},{"id":"python_django_jwt_weak_encryption","name":"python_django_jwt_weak_encryption","shortDescription":{"text":"Usage of weak encryption algorithm in JWT"},"fullDescription":{"text":"Usage of weak encryption algorithm in JWT"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nImplementing weak encryption algorithms in JWT (JSON Web Tokens) compromises the security of the tokens. This vulnerability occurs when an encryption algorithm that does not offer sufficient security strength is used, making the tokens susceptible to attacks.\n\n## Remediations\n\n- **Do** use robust encryption algorithms recommended for JWT. HS256 (HMAC with SHA-256) is a secure choice for signing JWTs.\n  ```python\n  SIMPLE_JWT = {\n    \"ALGORITHM\": \"HS256\"\n  }\n  ```\n\n## References\n\n- [OWASP weak encryption](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption)","markdown":"## Description\n\nImplementing weak encryption algorithms in JWT (JSON Web Tokens) compromises the security of the tokens. This vulnerability occurs when an encryption algorithm that does not offer sufficient security strength is used, making the tokens susceptible to attacks.\n\n## Remediations\n\n- **Do** use robust encryption algorithms recommended for JWT. HS256 (HMAC with SHA-256) is a secure choice for signing JWTs.\n  ```python\n  SIMPLE_JWT = {\n    \"ALGORITHM\": \"HS256\"\n  }\n  ```\n\n## References\n\n- [OWASP weak encryption](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption)"}},{"id":"python_third_parties_google_dataflow","name":"python_third_parties_google_dataflow","shortDescription":{"text":"Leakage of sensitive data to Google Dataflow"},"fullDescription":{"text":"Leakage of sensitive data to Google Dataflow"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to a third-party service is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Google Dataflow.\n\n## References\n- [Google Dataflow Docs](https://cloud.google.com/dataflow/docs/overview)\n- [Apache Beam Python SDK](https://beam.apache.org/documentation/sdks/python/)\n","markdown":"## Description\n\nLeaking sensitive data to a third-party service is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Google Dataflow.\n\n## References\n- [Google Dataflow Docs](https://cloud.google.com/dataflow/docs/overview)\n- [Apache Beam Python SDK](https://beam.apache.org/documentation/sdks/python/)\n"}},{"id":"javascript_lang_os_command_injection","name":"javascript_lang_os_command_injection","shortDescription":{"text":"Unsanitized user input in OS command"},"fullDescription":{"text":"Unsanitized user input in OS command"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nExecuting operating system commands with unsanitized user input can lead to command injection vulnerabilities. This occurs when attackers manipulate the input to execute unauthorized commands, potentially gaining control over the system.\n\n## Remediations\n\n- **Do not** directly use user input in OS command execution. This can open up the system to command injection attacks.\n- **Do** use static or predefined values for command parameters when possible. This reduces the risk of injection and ensures that the command operates within expected parameters.\n  ```javascript\n  let filePattern = \"*.js\"\n\n  if (req.params.graphql) {\n    filePattern = \"*.gql\"\n  }\n\n  cp.exec(`cp ${filePattern} foo`, (error, stdout, stderr) =\u003e {});\n  ```\n- **Do** validate and sanitize all user input used in OS commands. Ensure that the input does not contain malicious characters or command sequences.\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","markdown":"## Description\n\nExecuting operating system commands with unsanitized user input can lead to command injection vulnerabilities. This occurs when attackers manipulate the input to execute unauthorized commands, potentially gaining control over the system.\n\n## Remediations\n\n- **Do not** directly use user input in OS command execution. This can open up the system to command injection attacks.\n- **Do** use static or predefined values for command parameters when possible. This reduces the risk of injection and ensures that the command operates within expected parameters.\n  ```javascript\n  let filePattern = \"*.js\"\n\n  if (req.params.graphql) {\n    filePattern = \"*.gql\"\n  }\n\n  cp.exec(`cp ${filePattern} foo`, (error, stdout, stderr) =\u003e {});\n  ```\n- **Do** validate and sanitize all user input used in OS commands. Ensure that the input does not contain malicious characters or command sequences.\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)"}},{"id":"ruby_rails_default_encryption","name":"ruby_rails_default_encryption","shortDescription":{"text":"Missing application-level encryption of sensitive data"},"fullDescription":{"text":"Missing application-level encryption of sensitive data"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nFailing to encrypt sensitive data at the application level can lead to data breaches. This vulnerability arises when sensitive information within records is not encrypted, making it readable and accessible.\n\n## Remediations\n\n- **Do** encrypt the entire record when storing sensitive data in a datastore. This approach ensures that all sensitive information is protected.\n  ```ruby\n  class User \u003c ApplicationRecord\n    encrypts :personal_info\n  end\n  ```\n- **Do** encrypt specific fields if encrypting the entire record is not feasible. This method protects individual pieces of sensitive data.\n  ```ruby\n  class User \u003c ApplicationRecord\n    encrypts :ssn, :credit_card_number\n  end\n  ```\n\n## References\n\n- [Ruby on Rails Active Record encryption](https://guides.rubyonrails.org/active_record_encryption.html)","markdown":"## Description\n\nFailing to encrypt sensitive data at the application level can lead to data breaches. This vulnerability arises when sensitive information within records is not encrypted, making it readable and accessible.\n\n## Remediations\n\n- **Do** encrypt the entire record when storing sensitive data in a datastore. This approach ensures that all sensitive information is protected.\n  ```ruby\n  class User \u003c ApplicationRecord\n    encrypts :personal_info\n  end\n  ```\n- **Do** encrypt specific fields if encrypting the entire record is not feasible. This method protects individual pieces of sensitive data.\n  ```ruby\n  class User \u003c ApplicationRecord\n    encrypts :ssn, :credit_card_number\n  end\n  ```\n\n## References\n\n- [Ruby on Rails Active Record encryption](https://guides.rubyonrails.org/active_record_encryption.html)"}},{"id":"python_django_path_using_user_input","name":"python_django_path_using_user_input","shortDescription":{"text":"Unsanitized user input in file path"},"fullDescription":{"text":"Unsanitized user input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use absolute paths and check against the expected base directory\n  ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, user_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n  ```\n- **Do not** use user input when creating an instance of a file storage class such as `FileSystemStorage`. Rather rely on the default configuration as set in `settings.MEDIA_ROOT`\n  ```python\n    storage = FileSystemStorage(user_input) # unsafe\n  ```","markdown":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use absolute paths and check against the expected base directory\n  ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, user_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n  ```\n- **Do not** use user input when creating an instance of a file storage class such as `FileSystemStorage`. Rather rely on the default configuration as set in `settings.MEDIA_ROOT`\n  ```python\n    storage = FileSystemStorage(user_input) # unsafe\n  ```"}},{"id":"go_gosec_sql_concat_sqli","name":"go_gosec_sql_concat_sqli","shortDescription":{"text":"Unsanitized user input in SQL query"},"fullDescription":{"text":"Unsanitized user input in SQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)"}},{"id":"php_third_parties_bigquery","name":"php_third_parties_bigquery","shortDescription":{"text":"Leakage of sensitive data to BigQuery"},"fullDescription":{"text":"Leakage of sensitive data to BigQuery"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools like BigQuery is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like BigQuery.\n\n## References\n- [BigQuery docs](https://cloud.google.com/php/docs/reference/cloud-bigquery/latest)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools like BigQuery is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like BigQuery.\n\n## References\n- [BigQuery docs](https://cloud.google.com/php/docs/reference/cloud-bigquery/latest)\n"}},{"id":"go_gosec_file_permissions_mkdir","name":"go_gosec_file_permissions_mkdir","shortDescription":{"text":"Permissive folder creation"},"fullDescription":{"text":"Permissive folder creation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncorrect directory permissions can severely compromise system security.Directories with overly permissive access rights can allow unauthorized users to manipulate files, potentially leading to malicious code execution, data breaches, or full system compromise.\n\n## Remediations\n\n- **Do not** use overly broad permissions like `0777` for directories, as this allows all users to read, write, and execute files, posing a significant security risk.\n  ```go\n  os.Mkdir(\"example_directory\", 0777) // unsafe\n  ```\n- **Do** set directory permissions to:\n  - `0700` for private user data, granting full control to the owner only.\n  - `0750` for directories requiring group access, granting full control to the owner and read/execute to the group.\n  ```go\n  os.Mkdir(\"secure_directory\", 0700)\n  ```\n- **Do** verify file permissions after creation or update to ensure they are set as intended.\n- **Do** consider setting umask to a secure default, if your application creates multiple files, to ensure that files are created with safe default permissions.\n- **Do** regularly review and audit file permissions in your system to ensure they adhere to the principle of least privilege, minimizing the access level to what is strictly necessary for operational functionality.","markdown":"## Description\n\nIncorrect directory permissions can severely compromise system security.Directories with overly permissive access rights can allow unauthorized users to manipulate files, potentially leading to malicious code execution, data breaches, or full system compromise.\n\n## Remediations\n\n- **Do not** use overly broad permissions like `0777` for directories, as this allows all users to read, write, and execute files, posing a significant security risk.\n  ```go\n  os.Mkdir(\"example_directory\", 0777) // unsafe\n  ```\n- **Do** set directory permissions to:\n  - `0700` for private user data, granting full control to the owner only.\n  - `0750` for directories requiring group access, granting full control to the owner and read/execute to the group.\n  ```go\n  os.Mkdir(\"secure_directory\", 0700)\n  ```\n- **Do** verify file permissions after creation or update to ensure they are set as intended.\n- **Do** consider setting umask to a secure default, if your application creates multiple files, to ensure that files are created with safe default permissions.\n- **Do** regularly review and audit file permissions in your system to ensure they adhere to the principle of least privilege, minimizing the access level to what is strictly necessary for operational functionality."}},{"id":"ruby_lang_jwt","name":"ruby_lang_jwt","shortDescription":{"text":"Leakage of sensitive data in JWT"},"fullDescription":{"text":"Leakage of sensitive data in JWT"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring sensitive data in JWTs exposes it to potential security risks. JWTs are designed for transmitting data securely, not for storing confidential information. Guard against including sensitive data in a JWT payload.\n\n## Remediations\n\n- **Do not** include sensitive data, such as email addresses or personal information, in JWT payloads. This practice can lead to unauthorized access to sensitive information.\n  ```ruby\n  payload = { data: 'data', email: user.email } # unsafe\n  token = JWT.encode payload, hmac_secret, 'HS256'\n  ```\n- **Do** use non-sensitive, unique identifiers, like a user's database UUID, in JWT payloads. This approach minimizes the risk of sensitive data exposure.\n  ```ruby\n  payload = { data: 'data', user_id: user.uuid }\n  token = JWT.encode payload, hmac_secret, 'HS256'\n  ```","markdown":"## Description\n\nStoring sensitive data in JWTs exposes it to potential security risks. JWTs are designed for transmitting data securely, not for storing confidential information. Guard against including sensitive data in a JWT payload.\n\n## Remediations\n\n- **Do not** include sensitive data, such as email addresses or personal information, in JWT payloads. This practice can lead to unauthorized access to sensitive information.\n  ```ruby\n  payload = { data: 'data', email: user.email } # unsafe\n  token = JWT.encode payload, hmac_secret, 'HS256'\n  ```\n- **Do** use non-sensitive, unique identifiers, like a user's database UUID, in JWT payloads. This approach minimizes the risk of sensitive data exposure.\n  ```ruby\n  payload = { data: 'data', user_id: user.uuid }\n  token = JWT.encode payload, hmac_secret, 'HS256'\n  ```"}},{"id":"php_symfony_cookies","name":"php_symfony_cookies","shortDescription":{"text":"Leakage of sensitive data in cookie"},"fullDescription":{"text":"Leakage of sensitive data in cookie"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```php\n  $cookie = Cookie::create(\"user_email\", $user-\u003eemail); // unsafe\n  ```","markdown":"## Description\n\nLeakage of sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```php\n  $cookie = Cookie::create(\"user_email\", $user-\u003eemail); // unsafe\n  ```"}},{"id":"ruby_lang_weak_password_hash_md","name":"ruby_lang_weak_password_hash_md","shortDescription":{"text":"Usage of weak hashing library on a password (MD5)"},"fullDescription":{"text":"Usage of weak hashing library on a password (MD5)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like MD5 for password storage compromises security. MD5 is outdated and vulnerable, making it easier for attackers to crack passwords and gain unauthorized access.\n\n## Remediations\n\n- **Do not** use MD5 or similar weak hashing algorithms for password storage. These methods are no longer secure and significantly increase the risk of your data being compromised.\n- **Do** use strong, recommended hashing libraries such as bcrypt or Argon2id for storing passwords. These libraries provide a higher level of security and are designed to protect against common attack vectors.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)","markdown":"## Description\n\nUsing a weak hashing library like MD5 for password storage compromises security. MD5 is outdated and vulnerable, making it easier for attackers to crack passwords and gain unauthorized access.\n\n## Remediations\n\n- **Do not** use MD5 or similar weak hashing algorithms for password storage. These methods are no longer secure and significantly increase the risk of your data being compromised.\n- **Do** use strong, recommended hashing libraries such as bcrypt or Argon2id for storing passwords. These libraries provide a higher level of security and are designed to protect against common attack vectors.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)"}},{"id":"javascript_lang_non_literal_fs_filename","name":"javascript_lang_non_literal_fs_filename","shortDescription":{"text":"Unsanitized dynamic input in file path"},"fullDescription":{"text":"Unsanitized dynamic input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","markdown":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)"}},{"id":"php_lang_regex_using_user_input","name":"php_lang_regex_using_user_input","shortDescription":{"text":"Unsanitized user input in regular expression"},"fullDescription":{"text":"Unsanitized user input in regular expression"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nConstructing regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This occurs because certain regular expressions can be processed with exponential time complexity, leading to excessive CPU usage and potentially crashing the system when handling malicious input.\n\n## Remediations\n\n- **Do not** use user input directly in regular expressions. This can prevent attackers from exploiting complex patterns to cause a denial of service.\n  ```php\n  $user_input = $_GET[\"name\"] . \".php\";\n  preg_grep($user_input, $array); // unsafe\n  ```\n- **Do** sanitize or validate user input before incorporating it into regular expressions. This reduces the risk of ReDoS attacks by ensuring only safe patterns are used.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","markdown":"## Description\n\nConstructing regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This occurs because certain regular expressions can be processed with exponential time complexity, leading to excessive CPU usage and potentially crashing the system when handling malicious input.\n\n## Remediations\n\n- **Do not** use user input directly in regular expressions. This can prevent attackers from exploiting complex patterns to cause a denial of service.\n  ```php\n  $user_input = $_GET[\"name\"] . \".php\";\n  preg_grep($user_input, $array); // unsafe\n  ```\n- **Do** sanitize or validate user input before incorporating it into regular expressions. This reduces the risk of ReDoS attacks by ensuring only safe patterns are used.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)"}},{"id":"php_lang_ssl_verification","name":"php_lang_ssl_verification","shortDescription":{"text":"Missing SSL certificate verification"},"fullDescription":{"text":"Missing SSL certificate verification"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nMissing SSL certificate verification can compromise the security of sensitive data. This vulnerability arises when an application fails to check for valid SSL certificates during data transmission, potentially allowing attackers to intercept or manipulate data.\n\n## Remediations\n\n- **Do not** disable SSL certificate validation in your HTTP client. Disabling it removes a critical layer of security and makes your application vulnerable to Man-in-the-Middle attacks..\n- **Do** ensure that both peer and hostname verification are enabled in your HTTP client. This step is crucial for establishing secure connections and protecting data in transit.\n  ```php\n  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true);\n  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);\n  ```","markdown":"## Description\n\nMissing SSL certificate verification can compromise the security of sensitive data. This vulnerability arises when an application fails to check for valid SSL certificates during data transmission, potentially allowing attackers to intercept or manipulate data.\n\n## Remediations\n\n- **Do not** disable SSL certificate validation in your HTTP client. Disabling it removes a critical layer of security and makes your application vulnerable to Man-in-the-Middle attacks..\n- **Do** ensure that both peer and hostname verification are enabled in your HTTP client. This step is crucial for establishing secure connections and protecting data in transit.\n  ```php\n  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true);\n  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);\n  ```"}},{"id":"go_gosec_blocklist_des","name":"go_gosec_blocklist_des","shortDescription":{"text":"Import of weak encryption algorithm (DES)"},"fullDescription":{"text":"Import of weak encryption algorithm (DES)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe Data Encryption Standard (DES) is an outdated encryption algorithm that is officially considered insecure and is no longer recommended for use. DES was withdrawn as a standard by the National Institute of Standards and Technology (NIST) in 2005 because of its 56-bit key size which makes it susceptible to brute-force attacks.\n\n## Remediations\n\n- **Do not** use DES for encrypting data. Its known vulnerabilities and insecurities make it an unsuitable choice for protecting sensitive information.\n- **Do** implement the Advanced Encryption Standard (AES) with a key size of 256 bits (AES-256) for encryption. AES-256 is recognized for its strong security properties and is widely accepted as a secure replacement for DES.\n\n## References\n\n- [NIST Recommendations](https://csrc.nist.gov/publications/detail/sp/800-131a/rev-2/final)\n- [AES-256 Encryption](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)","markdown":"## Description\n\nThe Data Encryption Standard (DES) is an outdated encryption algorithm that is officially considered insecure and is no longer recommended for use. DES was withdrawn as a standard by the National Institute of Standards and Technology (NIST) in 2005 because of its 56-bit key size which makes it susceptible to brute-force attacks.\n\n## Remediations\n\n- **Do not** use DES for encrypting data. Its known vulnerabilities and insecurities make it an unsuitable choice for protecting sensitive information.\n- **Do** implement the Advanced Encryption Standard (AES) with a key size of 256 bits (AES-256) for encryption. AES-256 is recognized for its strong security properties and is widely accepted as a secure replacement for DES.\n\n## References\n\n- [NIST Recommendations](https://csrc.nist.gov/publications/detail/sp/800-131a/rev-2/final)\n- [AES-256 Encryption](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)"}},{"id":"python_lang_weak_encryption_rsa","name":"python_lang_weak_encryption_rsa","shortDescription":{"text":"Usage of weak encryption algorithm (RSA)"},"fullDescription":{"text":"Usage of weak encryption algorithm (RSA)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak encryption algorithm, specifically 1024-bit RSA, compromises data security. This vulnerability can lead to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** use 1024-bit RSA for encryption. It is no longer considered secure.\n  ```python\n  RSA.generate(1024) # unsafe\n  ```\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```python\n  from Crypto.Cipher import AES\n\n  cipher = AES.new(aes_key, AES.MODE_OCB)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)","markdown":"## Description\n\nUsing a weak encryption algorithm, specifically 1024-bit RSA, compromises data security. This vulnerability can lead to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** use 1024-bit RSA for encryption. It is no longer considered secure.\n  ```python\n  RSA.generate(1024) # unsafe\n  ```\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```python\n  from Crypto.Cipher import AES\n\n  cipher = AES.new(aes_key, AES.MODE_OCB)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)"}},{"id":"go_third_parties_sentry","name":"go_third_parties_sentry","shortDescription":{"text":"Leakage of sensitive data to Sentry"},"fullDescription":{"text":"Leakage of sensitive data to Sentry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/platforms/go/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/platforms/go/)\n"}},{"id":"javascript_express_helmet_missing","name":"javascript_express_helmet_missing","shortDescription":{"text":"Missing Helmet configuration on HTTP headers"},"fullDescription":{"text":"Missing Helmet configuration on HTTP headers"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nHelmet can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately. Failing to configure Helmet for HTTP headers leaves your application vulnerable to several web attacks.\n\n## Remediations\n\n- **Do** use Helmet middleware to secure your app by adding it to your application's middleware.\n  ```javascript\n  const helmet = require(\"helmet\");\n  app.use(helmet());\n  ```\n\n## References\n\n- [Express Security Best Practices: Use Helmet](https://expressjs.com/en/advanced/best-practice-security.html#use-helmet)","markdown":"## Description\n\nHelmet can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately. Failing to configure Helmet for HTTP headers leaves your application vulnerable to several web attacks.\n\n## Remediations\n\n- **Do** use Helmet middleware to secure your app by adding it to your application's middleware.\n  ```javascript\n  const helmet = require(\"helmet\");\n  app.use(helmet());\n  ```\n\n## References\n\n- [Express Security Best Practices: Use Helmet](https://expressjs.com/en/advanced/best-practice-security.html#use-helmet)"}},{"id":"javascript_third_parties_bugsnag","name":"javascript_third_parties_bugsnag","shortDescription":{"text":"Leakage of sensitive data to Bugsnag"},"fullDescription":{"text":"Leakage of sensitive data to Bugsnag"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    import { Bugsnag } from \"@bugsnag/js\"\n\n    var bugSession = Bugsnag.startSession()\n    bugSession.notify(user.uuid)\n  ```\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/javascript/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    import { Bugsnag } from \"@bugsnag/js\"\n\n    var bugSession = Bugsnag.startSession()\n    bugSession.notify(user.uuid)\n  ```\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/javascript/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n"}},{"id":"go_lang_hardcoded_mysql_database_password","name":"go_lang_hardcoded_mysql_database_password","shortDescription":{"text":"Usage of hard-coded MySQL database password"},"fullDescription":{"text":"Usage of hard-coded MySQL database password"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour code contains a hard-coded password for MySQL database connections. Storing passwords directly in code compromises security and makes your application vulnerable to unauthorized access.\n\n## Remediations\n\n- **Do not** embed passwords directly in your code. This practice is insecure and exposes your database to potential breaches.\n- **Do** use environment variables to store sensitive information such as database passwords. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle passwords and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)","markdown":"## Description\n\nYour code contains a hard-coded password for MySQL database connections. Storing passwords directly in code compromises security and makes your application vulnerable to unauthorized access.\n\n## Remediations\n\n- **Do not** embed passwords directly in your code. This practice is insecure and exposes your database to potential breaches.\n- **Do** use environment variables to store sensitive information such as database passwords. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle passwords and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)"}},{"id":"javascript_lang_post_message_origin","name":"javascript_lang_post_message_origin","shortDescription":{"text":"Permissive origin in postMessage"},"fullDescription":{"text":"Permissive origin in postMessage"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe use of a permissive origin in postMessage calls poses a security risk. When you set the target origin to \"*\" in a postMessage call, it means any website can receive the message, potentially exposing sensitive information to third parties.\n\n## Remediations\n\n- **Do not** use \"*\" as the target origin in postMessage calls. This approach is insecure as it allows any website to receive the messages.\n  ```javascript\n  window.postMessage(message, '*'); // unsafe\n  ```\n- **Do** specify the exact origin of the target application when using postMessage. This practice ensures that only the intended recipient can read the message.\n  ```javascript\n  window.postMessage(message, 'https://myapp.example.com');\n  ```","markdown":"## Description\n\nThe use of a permissive origin in postMessage calls poses a security risk. When you set the target origin to \"*\" in a postMessage call, it means any website can receive the message, potentially exposing sensitive information to third parties.\n\n## Remediations\n\n- **Do not** use \"*\" as the target origin in postMessage calls. This approach is insecure as it allows any website to receive the messages.\n  ```javascript\n  window.postMessage(message, '*'); // unsafe\n  ```\n- **Do** specify the exact origin of the target application when using postMessage. This practice ensures that only the intended recipient can read the message.\n  ```javascript\n  window.postMessage(message, 'https://myapp.example.com');\n  ```"}},{"id":"php_lang_http_url_using_user_input","name":"php_lang_http_url_using_user_input","shortDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"fullDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)"}},{"id":"javascript_express_open_redirect","name":"javascript_express_open_redirect","shortDescription":{"text":"Unsanitized user input in redirect"},"fullDescription":{"text":"Unsanitized user input in redirect"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input for redirection can expose your application to phishing attacks. This vulnerability occurs when user input directly influences the destination of a redirect without proper validation, making it easier for attackers to redirect users to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirection. This can lead to security vulnerabilities where attackers could exploit the redirect to lead users to malicious sites.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that only pre-approved destinations are used for redirects, significantly reducing the risk of phishing attacks.\n  ```javascript\n  var map = {\n    \"1\": \"/planes\",\n    \"2\": \"/trains\",\n    \"3\": \"/automobiles\",\n  }\n\n  res.redirect(map[req.body.transport])\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized user input for redirection can expose your application to phishing attacks. This vulnerability occurs when user input directly influences the destination of a redirect without proper validation, making it easier for attackers to redirect users to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirection. This can lead to security vulnerabilities where attackers could exploit the redirect to lead users to malicious sites.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that only pre-approved destinations are used for redirects, significantly reducing the risk of phishing attacks.\n  ```javascript\n  var map = {\n    \"1\": \"/planes\",\n    \"2\": \"/trains\",\n    \"3\": \"/automobiles\",\n  }\n\n  res.redirect(map[req.body.transport])\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)"}},{"id":"javascript_lang_weak_encryption_rc4","name":"javascript_lang_weak_encryption_rc4","shortDescription":{"text":"Usage of weak encryption algorithm (RC4)"},"fullDescription":{"text":"Usage of weak encryption algorithm (RC4)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing the RC4 (Rivest Cipher 4) encryption algorithm introduces a significant security vulnerability. RC4 is outdated and has been proven to be susceptible to various attacks, making any data encrypted with it vulnerable to unauthorized access and compromise.\n\n## Remediations\n\n- **Do not** use RC4 for encrypting data. Its weaknesses can lead to compromised data security.\n- **Do** opt for stronger, more secure encryption algorithms like AES-256 when encrypting data. This ensures a higher level of security for your data.\n  ```javascript\n  const crypto = require(\"crypto\");\n\n  const cipher = crypto.createCipheriv(\"aes-256-cbc\", key, iv);\n  const encrypted = cipher.update(\"my secret message\", \"utf8\");\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)","markdown":"## Description\n\nUsing the RC4 (Rivest Cipher 4) encryption algorithm introduces a significant security vulnerability. RC4 is outdated and has been proven to be susceptible to various attacks, making any data encrypted with it vulnerable to unauthorized access and compromise.\n\n## Remediations\n\n- **Do not** use RC4 for encrypting data. Its weaknesses can lead to compromised data security.\n- **Do** opt for stronger, more secure encryption algorithms like AES-256 when encrypting data. This ensures a higher level of security for your data.\n  ```javascript\n  const crypto = require(\"crypto\");\n\n  const cipher = crypto.createCipheriv(\"aes-256-cbc\", key, iv);\n  const encrypted = cipher.update(\"my secret message\", \"utf8\");\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)"}},{"id":"go_lang_deserialization_of_user_input","name":"go_lang_deserialization_of_user_input","shortDescription":{"text":"Unsanitized user input in deserialization method"},"fullDescription":{"text":"Unsanitized user input in deserialization method"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nDeserializing data from untrusted sources, like user inputs or request parameters, without proper verification is a security risk. Attackers can embed malicious code or payloads within serialized data. When your application deserializes this data without checks, it becomes vulnerable to attacks.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This can lead to security vulnerabilities.\n- **Do** validate and sanitize all data before deserializing it. Ensure that the data is coming from a trusted source and is in the expected format.\n\n## References\n\n- [Gob Security Documentation](https://pkg.go.dev/encoding/gob#hdr-Security)\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)","markdown":"## Description\n\nDeserializing data from untrusted sources, like user inputs or request parameters, without proper verification is a security risk. Attackers can embed malicious code or payloads within serialized data. When your application deserializes this data without checks, it becomes vulnerable to attacks.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This can lead to security vulnerabilities.\n- **Do** validate and sanitize all data before deserializing it. Ensure that the data is coming from a trusted source and is in the expected format.\n\n## References\n\n- [Gob Security Documentation](https://pkg.go.dev/encoding/gob#hdr-Security)\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)"}},{"id":"python_lang_weak_hash_adler32","name":"python_lang_weak_hash_adler32","shortDescription":{"text":"Usage of weak hashing library (Adler-32)"},"fullDescription":{"text":"Usage of weak hashing library (Adler-32)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAdler-32 is a weak hashing algorithm that offers minimal security. It is not suitable for protecting data against intentional modifications.\n\n## Remediations\n\n- **Do not** use Adler-32 for hashing when security is a concern. Its simplicity and speed do not compensate for its lack of protection against data tampering.\n  ```python\n  myhash = zlib.adler32(data) # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data integrity and security.\n  ```python\n  myhash = hashlib.sha256(data).digest()\n  ```","markdown":"## Description\n\nAdler-32 is a weak hashing algorithm that offers minimal security. It is not suitable for protecting data against intentional modifications.\n\n## Remediations\n\n- **Do not** use Adler-32 for hashing when security is a concern. Its simplicity and speed do not compensate for its lack of protection against data tampering.\n  ```python\n  myhash = zlib.adler32(data) # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data integrity and security.\n  ```python\n  myhash = hashlib.sha256(data).digest()\n  ```"}},{"id":"php_lang_information_leakage","name":"php_lang_information_leakage","shortDescription":{"text":"Leakage of sensitive information in exception message"},"fullDescription":{"text":"Leakage of sensitive information in exception message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```php\n  echo $e-\u003egetTrace(); // unsafe\n  ```\n- **Do** log only the essential details required for error messages. This minimizes the risk of sensitive data exposure.\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","markdown":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```php\n  echo $e-\u003egetTrace(); // unsafe\n  ```\n- **Do** log only the essential details required for error messages. This minimizes the risk of sensitive data exposure.\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)"}},{"id":"javascript_lang_hardcoded_secret","name":"javascript_lang_hardcoded_secret","shortDescription":{"text":"Usage of hard-coded secret"},"fullDescription":{"text":"Usage of hard-coded secret"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.\n  ```javascript\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'my-id-123',\n        clientSecret: 'shh-my-secret',\n        callbackURL: 'http://localhost:3000/auth/example/callback'\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n  ```\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)","markdown":"## Description\n\nStoring secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.\n  ```javascript\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'my-id-123',\n        clientSecret: 'shh-my-secret',\n        callbackURL: 'http://localhost:3000/auth/example/callback'\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n  ```\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)"}},{"id":"go_gosec_http_http_slowloris","name":"go_gosec_http_http_slowloris","shortDescription":{"text":"Missing protection against 'Slowloris' attack"},"fullDescription":{"text":"Missing protection against 'Slowloris' attack"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour server configuration is missing the `ReadHeaderTimeout` setting, making it vulnerable to a type of Distributed Denial of Service (DDoS) attack known as a Slowloris attack. In such an attack, a hacker initiates many connections to your server, sending incomplete requests. Your server then keeps each connection open, waiting for the headers to be completed. This can lead to resource exhaustion, where your server cannot handle additional (legitimate) requests.\n\n## Remediations\n\n- **Do not** use default serve functions like `http.ListenAndServe` and `http.Serve` in production environments. You cannot set timeouts for these functions, making the server vulnerable to attacks.\n  ```go\n  http.ListenAndServe(\":8080\", nil) // unsafe\n  ```\n- **Do** create a custom `http.Server` object with configured timeouts to safeguard against resource exhaustion. For Slowloris attacks in particular, set `ReadHeaderTimeout` to an appropriate value to ensure that connections do not remain open indefinitely.\n  ```go\n  myServer := \u0026http.Server{\n      Addr:             \"localhost:8000\",\n      ReadHeaderTimeout: 15 * time.Second,\n      ReadTimeout:      15 * time.Second,\n      WriteTimeout:     10 * time.Second,\n      IdleTimeout:      30 * time.Second,\n  }\n  ```\n\n## References\n\n- [Configuring Timeouts in http.Server](https://pkg.go.dev/net/http#Server)\n- [How to Set Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)\n- [Understanding Slowloris Attacks](https://en.wikipedia.org/wiki/Slowloris_(computer_security))","markdown":"## Description\n\nYour server configuration is missing the `ReadHeaderTimeout` setting, making it vulnerable to a type of Distributed Denial of Service (DDoS) attack known as a Slowloris attack. In such an attack, a hacker initiates many connections to your server, sending incomplete requests. Your server then keeps each connection open, waiting for the headers to be completed. This can lead to resource exhaustion, where your server cannot handle additional (legitimate) requests.\n\n## Remediations\n\n- **Do not** use default serve functions like `http.ListenAndServe` and `http.Serve` in production environments. You cannot set timeouts for these functions, making the server vulnerable to attacks.\n  ```go\n  http.ListenAndServe(\":8080\", nil) // unsafe\n  ```\n- **Do** create a custom `http.Server` object with configured timeouts to safeguard against resource exhaustion. For Slowloris attacks in particular, set `ReadHeaderTimeout` to an appropriate value to ensure that connections do not remain open indefinitely.\n  ```go\n  myServer := \u0026http.Server{\n      Addr:             \"localhost:8000\",\n      ReadHeaderTimeout: 15 * time.Second,\n      ReadTimeout:      15 * time.Second,\n      WriteTimeout:     10 * time.Second,\n      IdleTimeout:      30 * time.Second,\n  }\n  ```\n\n## References\n\n- [Configuring Timeouts in http.Server](https://pkg.go.dev/net/http#Server)\n- [How to Set Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)\n- [Understanding Slowloris Attacks](https://en.wikipedia.org/wiki/Slowloris_(computer_security))"}},{"id":"python_lang_weak_hash_md5","name":"python_lang_weak_hash_md5","shortDescription":{"text":"Usage of weak hashing library (MDx)"},"fullDescription":{"text":"Usage of weak hashing library (MDx)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```python\n  hashlib.md5('password').digest() # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```python\n  hashlib.sha256('password').digest()\n  ```","markdown":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```python\n  hashlib.md5('password').digest() # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```python\n  hashlib.sha256('password').digest()\n  ```"}},{"id":"ruby_lang_http_insecure","name":"ruby_lang_http_insecure","shortDescription":{"text":"Usage of insecure HTTP connection"},"fullDescription":{"text":"Usage of insecure HTTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is at risk when it connects to APIs using insecure HTTP connections. This vulnerability occurs because HTTP does not encrypt data, making it susceptible to interception and alteration. Ensure that your application uses HTTPS, which encrypts data in transit, for all connections.\n\n## Remediations\n\n- **Do not** use unsecured HTTP connections for outgoing communications, particularly when making API calls.\n  ```ruby\n  response = HTTParty.get('http://insecure-api.com') # unsafe\n  ```\n- **Do** ensure all connections are made through HTTPS to protect data in transit with encryption.\n  ```ruby\n  response = HTTParty.get('https://secure-api.com')\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nYour application is at risk when it connects to APIs using insecure HTTP connections. This vulnerability occurs because HTTP does not encrypt data, making it susceptible to interception and alteration. Ensure that your application uses HTTPS, which encrypts data in transit, for all connections.\n\n## Remediations\n\n- **Do not** use unsecured HTTP connections for outgoing communications, particularly when making API calls.\n  ```ruby\n  response = HTTParty.get('http://insecure-api.com') # unsafe\n  ```\n- **Do** ensure all connections are made through HTTPS to protect data in transit with encryption.\n  ```ruby\n  response = HTTParty.get('https://secure-api.com')\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"go_gosec_filesystem_filereadtaint","name":"go_gosec_filesystem_filereadtaint","shortDescription":{"text":"Unsanitized user input in file path"},"fullDescription":{"text":"Unsanitized user input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","markdown":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)"}},{"id":"javascript_third_parties_openai","name":"javascript_third_parties_openai","shortDescription":{"text":"Leakage of sensitive data to OpenAI"},"fullDescription":{"text":"Leakage of sensitive data to OpenAI"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party services like OpenAI is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like OpenAI.\n\n## References\n- [OpenAI API docs](https://platform.openai.com/docs/api-reference/introduction)\n","markdown":"## Description\n\nLeaking sensitive data to third-party services like OpenAI is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like OpenAI.\n\n## References\n- [OpenAI API docs](https://platform.openai.com/docs/api-reference/introduction)\n"}},{"id":"go_gosec_filesystem_poor_write_permissions","name":"go_gosec_filesystem_poor_write_permissions","shortDescription":{"text":"Permissive file creation"},"fullDescription":{"text":"Permissive file creation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application sets file permissions that are overly permissive. This oversight could let unauthorized individuals read, write, or execute files, which could lead to the exposure of sensitive information or other security risks.\n\n## Remediations\n\n- **Do** use restrictive file permissions. Assign file permissions that strictly limit access, aligning with what your application genuinely needs:\n  - `0400` for read-only access by the file's owner.\n  - `0200` for write-only access by the file's owner.\n  - `0600` for read and write access by the file's owner, suitable for files that the application needs to read from and write to.\n- **Do** set the correct permissions when you create or modify files. This step is crucial to prevent unauthorized access right from the start.\n- **Do** regularly review and audit file permissions in your system to ensure they adhere to the principle of least privilege, minimizing the access level to what is strictly necessary for operational functionality.\n\n## References\n\n- [Go Documentation for os Package](https://pkg.go.dev/os)\n- [Linux 'chmod' Command](https://linux.die.net/man/1/chmod)\n- [OWASP File Handling Best Practices](https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html)","markdown":"## Description\n\nYour application sets file permissions that are overly permissive. This oversight could let unauthorized individuals read, write, or execute files, which could lead to the exposure of sensitive information or other security risks.\n\n## Remediations\n\n- **Do** use restrictive file permissions. Assign file permissions that strictly limit access, aligning with what your application genuinely needs:\n  - `0400` for read-only access by the file's owner.\n  - `0200` for write-only access by the file's owner.\n  - `0600` for read and write access by the file's owner, suitable for files that the application needs to read from and write to.\n- **Do** set the correct permissions when you create or modify files. This step is crucial to prevent unauthorized access right from the start.\n- **Do** regularly review and audit file permissions in your system to ensure they adhere to the principle of least privilege, minimizing the access level to what is strictly necessary for operational functionality.\n\n## References\n\n- [Go Documentation for os Package](https://pkg.go.dev/os)\n- [Linux 'chmod' Command](https://linux.die.net/man/1/chmod)\n- [OWASP File Handling Best Practices](https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html)"}},{"id":"go_gosec_leak_pprof_endpoint","name":"go_gosec_leak_pprof_endpoint","shortDescription":{"text":"Usage of active debug code (pprof enabled)"},"fullDescription":{"text":"Usage of active debug code (pprof enabled)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nEnabling Go's `net/http/pprof` in production environments exposes runtime profiling data via a `/debug/pprof` endpoint, creating a security vulnerability. This tool is part of Go's standard library and, while useful for debugging, it does not have authentication controls. This can lead to sensitive information leaks about the application's runtime state and environment if left accessible in production.\n\n## Remediations\n\n- **Do not** include `net/http/pprof` in your production code. Remove any imports of this package before deploying to ensure the profiling endpoint is not exposed.\n- **Do** use build tags for conditional compilation, and only allow profiling in non-production builds.\n- **Do** configure environment-specific settings to enable or disable profiling endpoints based on the deployment environment.\n- **Do** implement strong authentication mechanisms if profiling must be enabled in a controlled production scenario to secure the endpoint.\n\n## References\n\n- [Go net/http/pprof Package Documentation](https://pkg.go.dev/net/http/pprof)\n- [Go Build Constraints Documentation](https://pkg.go.dev/go/build#hdr-Build_Constraints)\n- [OWASP Secure Product Design Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secure_Product_Design_Cheat_Sheet.html)","markdown":"## Description\n\nEnabling Go's `net/http/pprof` in production environments exposes runtime profiling data via a `/debug/pprof` endpoint, creating a security vulnerability. This tool is part of Go's standard library and, while useful for debugging, it does not have authentication controls. This can lead to sensitive information leaks about the application's runtime state and environment if left accessible in production.\n\n## Remediations\n\n- **Do not** include `net/http/pprof` in your production code. Remove any imports of this package before deploying to ensure the profiling endpoint is not exposed.\n- **Do** use build tags for conditional compilation, and only allow profiling in non-production builds.\n- **Do** configure environment-specific settings to enable or disable profiling endpoints based on the deployment environment.\n- **Do** implement strong authentication mechanisms if profiling must be enabled in a controlled production scenario to secure the endpoint.\n\n## References\n\n- [Go net/http/pprof Package Documentation](https://pkg.go.dev/net/http/pprof)\n- [Go Build Constraints Documentation](https://pkg.go.dev/go/build#hdr-Build_Constraints)\n- [OWASP Secure Product Design Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secure_Product_Design_Cheat_Sheet.html)"}},{"id":"php_symfony_ui_redress","name":"php_symfony_ui_redress","shortDescription":{"text":"Unsanitized user input in UI"},"fullDescription":{"text":"Unsanitized user input in UI"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncorporating unsanitized user input to configure the X-Frame-Options or Content-Security-Policy HTTP headers exposes your application to UI redress attacks, commonly known as clickjacking. This vulnerability can be exploited to deceive users into performing unintended actions on your website.\n\n## Remediations\n\n- **Do** set the X-Frame-Options header to \"DENY\" to prevent your website from being framed by potentially malicious sites.\n  ```php\n  $response-\u003eheaders-\u003eset(\"X-Frame-Options\", \"DENY\");\n  ```\n- **Do** configure the Content-Security-Policy header with \"frame-ancestors 'none'\" to disallow embedding of your site's content in iframes, objects, or embed tags on unauthorized websites.\n  ```php\n  $response-\u003eheaders-\u003eset(\"Content-Security-Policy\", \"frame-ancestors 'none'\");\n  ```\n- **Do not** use user input directly to set these headers without proper sanitization and validation.\n\n## References\n\n- [OWASP Clickjacking attack explained](https://owasp.org/www-community/attacks/Clickjacking)\n- [OWASP Clickjacking defense cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html)","markdown":"## Description\n\nIncorporating unsanitized user input to configure the X-Frame-Options or Content-Security-Policy HTTP headers exposes your application to UI redress attacks, commonly known as clickjacking. This vulnerability can be exploited to deceive users into performing unintended actions on your website.\n\n## Remediations\n\n- **Do** set the X-Frame-Options header to \"DENY\" to prevent your website from being framed by potentially malicious sites.\n  ```php\n  $response-\u003eheaders-\u003eset(\"X-Frame-Options\", \"DENY\");\n  ```\n- **Do** configure the Content-Security-Policy header with \"frame-ancestors 'none'\" to disallow embedding of your site's content in iframes, objects, or embed tags on unauthorized websites.\n  ```php\n  $response-\u003eheaders-\u003eset(\"Content-Security-Policy\", \"frame-ancestors 'none'\");\n  ```\n- **Do not** use user input directly to set these headers without proper sanitization and validation.\n\n## References\n\n- [OWASP Clickjacking attack explained](https://owasp.org/www-community/attacks/Clickjacking)\n- [OWASP Clickjacking defense cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html)"}},{"id":"python_django_response_using_user_input","name":"python_django_response_using_user_input","shortDescription":{"text":"Unsanitized user input in output stream (XSS)"},"fullDescription":{"text":"Unsanitized user input in output stream (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use templating engines that automatically encode data based on its context.\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```python\n  user_input = request.GET[\"user\"]\n  encoded_user_input = django.utils.html.escape(user_input)\n  response = HttpResponse(encoded_user_input)\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```python\n  user_input = request.GET[\"user\"]\n  sanitized_user_input = django.utils.html.strip_tags(user_input)\n  response = HttpResponse(sanitized_user_input)\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use templating engines that automatically encode data based on its context.\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```python\n  user_input = request.GET[\"user\"]\n  encoded_user_input = django.utils.html.escape(user_input)\n  response = HttpResponse(encoded_user_input)\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```python\n  user_input = request.GET[\"user\"]\n  sanitized_user_input = django.utils.html.strip_tags(user_input)\n  response = HttpResponse(sanitized_user_input)\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"python_lang_sql_injection","name":"python_lang_sql_injection","shortDescription":{"text":"Unsanitized external input in SQL query"},"fullDescription":{"text":"Unsanitized external input in SQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```python\n  sorting_order = request.GET[\"untrusted\"]\n  query = f\"SELECT id, name FROM products ORDER BY name LIMIT 20 {sorting_order};\"; # unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```python\n  sorting_order = \"DESC\" if request.GET[\"sortingOrder\"] == \"DESC\" else \"ASC\"\n  ```\n- **Do** use parameters for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```python\n  cursor.execute(\"SELECT * FROM products WHERE id LIKE ?\", [f\"%{product_id}%\"])\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```python\n  from mysql.connector.conversion import MySQLConverter\n\n  converter = MySQLConverter(connection)\n  ok = converter.escape(request.GET[\"value\"])\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```python\n  sorting_order = request.GET[\"untrusted\"]\n  query = f\"SELECT id, name FROM products ORDER BY name LIMIT 20 {sorting_order};\"; # unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```python\n  sorting_order = \"DESC\" if request.GET[\"sortingOrder\"] == \"DESC\" else \"ASC\"\n  ```\n- **Do** use parameters for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```python\n  cursor.execute(\"SELECT * FROM products WHERE id LIKE ?\", [f\"%{product_id}%\"])\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```python\n  from mysql.connector.conversion import MySQLConverter\n\n  converter = MySQLConverter(connection)\n  ok = converter.escape(request.GET[\"value\"])\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)"}},{"id":"ruby_third_parties_airbrake","name":"ruby_third_parties_airbrake","shortDescription":{"text":"Leakage of sensitive data to Airbrake"},"fullDescription":{"text":"Leakage of sensitive data to Airbrake"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/)\n"}},{"id":"javascript_lang_exception","name":"javascript_lang_exception","shortDescription":{"text":"Leakage of sensitive data in exception message"},"fullDescription":{"text":"Leakage of sensitive data in exception message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose personal or confidential information.\n  ```javascript\n  throw new CustomError(`Error with ${user.email}`) // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to maintain user privacy and data security.\n  ```javascript\n  throw new CustomError(`Error with ${user.uuid}`)\n  ```","markdown":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose personal or confidential information.\n  ```javascript\n  throw new CustomError(`Error with ${user.email}`) // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to maintain user privacy and data security.\n  ```javascript\n  throw new CustomError(`Error with ${user.uuid}`)\n  ```"}},{"id":"python_lang_weak_tls_version","name":"python_lang_weak_tls_version","shortDescription":{"text":"Usage of deprecated TLS version"},"fullDescription":{"text":"Usage of deprecated TLS version"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nTLS (Transport Layer Security) versions 1.0 and 1.1 have known vulnerabilities and using them introduces security risks to your application. These outdated TLS versions can lead to the interception and compromise of sensitive data during transmission.\n\n## Remediations\n\n- **Do** enforce the use of TLS 1.3 when configuring SSL. TLS 1.3 offers significant security improvements, helping to protect data from known vulnerabilities present in older versions.\n  ```python\n  context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n  context.minimum_version = ssl.TLSVersion.TLSv1_3\n  ```\n- **Do** utilize configurations that support Perfect Forward Secrecy (PFS) with TLS 1.3. PFS enhances security by ensuring that past communications remain secure even if future session keys are compromised.\n- **Do not** configure your server to accept TLS versions 1.0 or 1.1. Removing these options from your TLS configuration is crucial to prevent downgrade attacks.\n\n## References\n\n- [IETF's Deprecation of TLS 1.0 and 1.1](https://tools.ietf.org/html/rfc8996)\n- [OWASP TLS Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html)\n- [Python `ssl` module documentation](https://docs.python.org/3/library/ssl.html)","markdown":"## Description\n\nTLS (Transport Layer Security) versions 1.0 and 1.1 have known vulnerabilities and using them introduces security risks to your application. These outdated TLS versions can lead to the interception and compromise of sensitive data during transmission.\n\n## Remediations\n\n- **Do** enforce the use of TLS 1.3 when configuring SSL. TLS 1.3 offers significant security improvements, helping to protect data from known vulnerabilities present in older versions.\n  ```python\n  context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n  context.minimum_version = ssl.TLSVersion.TLSv1_3\n  ```\n- **Do** utilize configurations that support Perfect Forward Secrecy (PFS) with TLS 1.3. PFS enhances security by ensuring that past communications remain secure even if future session keys are compromised.\n- **Do not** configure your server to accept TLS versions 1.0 or 1.1. Removing these options from your TLS configuration is crucial to prevent downgrade attacks.\n\n## References\n\n- [IETF's Deprecation of TLS 1.0 and 1.1](https://tools.ietf.org/html/rfc8996)\n- [OWASP TLS Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html)\n- [Python `ssl` module documentation](https://docs.python.org/3/library/ssl.html)"}},{"id":"javascript_express_reduce_fingerprint","name":"javascript_express_reduce_fingerprint","shortDescription":{"text":"Missing server configuration to reduce server fingerprinting"},"fullDescription":{"text":"Missing server configuration to reduce server fingerprinting"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nReducing server fingerprinting enhances security by making it harder for attackers to identify the software your server is running. Server fingerprinting involves analyzing the unique responses of server software to specific requests, which can reveal information about the server's software and version. While not a direct security vulnerability, minimizing this information leakage is a proactive step to obscure details that could be used in targeted attacks.\n\n## Remediations\n\n- **Do** disable the `X-Powered-By` header in Express.js applications to prevent revealing the server's technology stack. Use the `app.disable()` method to achieve this.\n  ```javascript\n  app.disable('x-powered-by');\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html)","markdown":"## Description\n\nReducing server fingerprinting enhances security by making it harder for attackers to identify the software your server is running. Server fingerprinting involves analyzing the unique responses of server software to specific requests, which can reveal information about the server's software and version. While not a direct security vulnerability, minimizing this information leakage is a proactive step to obscure details that could be used in targeted attacks.\n\n## Remediations\n\n- **Do** disable the `X-Powered-By` header in Express.js applications to prevent revealing the server's technology stack. Use the `app.disable()` method to achieve this.\n  ```javascript\n  app.disable('x-powered-by');\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html)"}},{"id":"ruby_lang_raw_html_using_user_input","name":"ruby_lang_raw_html_using_user_input","shortDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"fullDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```ruby\n  html = \"\u003ch1\u003e#{params[:title]}\u003c/h1\u003e\"\n  ```\n- **Do** use a templating language, such as ERB, and keep the template in a separate file to safely incorporate user input.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```ruby\n  html = \"\u003ch1\u003e#{strip_tags(params[:title])}\u003c/h1\u003e\"\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```ruby\n  html = \"\u003ch1\u003e#{params[:title]}\u003c/h1\u003e\"\n  ```\n- **Do** use a templating language, such as ERB, and keep the template in a separate file to safely incorporate user input.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```ruby\n  html = \"\u003ch1\u003e#{strip_tags(params[:title])}\u003c/h1\u003e\"\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"ruby_lang_weak_encryption_rsa","name":"ruby_lang_weak_encryption_rsa","shortDescription":{"text":"Usage of weak encryption algorithm (RSA)"},"fullDescription":{"text":"Usage of weak encryption algorithm (RSA)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak encryption algorithm, specifically 1024-bit RSA, compromises data security. This vulnerability can lead to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** use 1024-bit RSA for encryption. It is no longer considered secure.\n  ```ruby\n  OpenSSL::PKey::RSA.new(1024) # unsafe\n  ```\n- **Do** use stronger encryption methods, such as bcrypt, to enhance security.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)","markdown":"## Description\n\nUsing a weak encryption algorithm, specifically 1024-bit RSA, compromises data security. This vulnerability can lead to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** use 1024-bit RSA for encryption. It is no longer considered secure.\n  ```ruby\n  OpenSSL::PKey::RSA.new(1024) # unsafe\n  ```\n- **Do** use stronger encryption methods, such as bcrypt, to enhance security.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)"}},{"id":"go_gosec_crypto_bad_tls_settings","name":"go_gosec_crypto_bad_tls_settings","shortDescription":{"text":"Usage of insecure cipher"},"fullDescription":{"text":"Usage of insecure cipher"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing an insecure cipher suite in your application introduces a significant security risk. These weak cipher suites are susceptible to various attacks, compromising the security of your communications.\n\n## Remediations\n\n- **Do** use modern, secure cipher suites that offer Perfect Forward Secrecy (PFS), such as ECDHE-RSA-AES256-GCM-SHA384 or ECDHE-RSA-CHACHA20-POLY1305. PFS ensures that even if future private keys are compromised, past communications remain secure.\n- **Do** adopt TLS 1.3 whenever possible, as it includes enhancements that offer better security against various attacks. The Go standard library, for instance, automatically prefers the most secure protocol and cipher suite available.\n  ```go\n  cfg := \u0026tls.Config{\n      MinVersion: tls.VersionTLS13,\n  }\n  ```\n- **Do not** use obsolete or insecure cipher suites. Avoid any cipher suites that lack support for modern security standards or have known vulnerabilities.\n\n## References\n\n- [Mozilla's SSL Configuration Generator](https://ssl-config.mozilla.org/)\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)\n- [RFC 8446 - The Transport Layer Security (TLS) Protocol Version 1.3](https://tools.ietf.org/html/rfc8446)","markdown":"## Description\n\nUsing an insecure cipher suite in your application introduces a significant security risk. These weak cipher suites are susceptible to various attacks, compromising the security of your communications.\n\n## Remediations\n\n- **Do** use modern, secure cipher suites that offer Perfect Forward Secrecy (PFS), such as ECDHE-RSA-AES256-GCM-SHA384 or ECDHE-RSA-CHACHA20-POLY1305. PFS ensures that even if future private keys are compromised, past communications remain secure.\n- **Do** adopt TLS 1.3 whenever possible, as it includes enhancements that offer better security against various attacks. The Go standard library, for instance, automatically prefers the most secure protocol and cipher suite available.\n  ```go\n  cfg := \u0026tls.Config{\n      MinVersion: tls.VersionTLS13,\n  }\n  ```\n- **Do not** use obsolete or insecure cipher suites. Avoid any cipher suites that lack support for modern security standards or have known vulnerabilities.\n\n## References\n\n- [Mozilla's SSL Configuration Generator](https://ssl-config.mozilla.org/)\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)\n- [RFC 8446 - The Transport Layer Security (TLS) Protocol Version 1.3](https://tools.ietf.org/html/rfc8446)"}},{"id":"javascript_express_hardcoded_secret","name":"javascript_express_hardcoded_secret","shortDescription":{"text":"Usage of hard-coded secret"},"fullDescription":{"text":"Usage of hard-coded secret"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring secrets directly in code compromises security. It's safer to use environment variables or a secret management system.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This makes your application vulnerable to unauthorized access if the codebase is exposed.\n  ```javascript\n  app.use(\n    session({\n      secret: \"shh-my-secret\",\n      name: \"my-custom-session-name\",\n    })\n  )\n  ```\n- **Do** use environment variables to store secrets. This method keeps sensitive information out of your codebase.\n  ```javascript\n  app.use(\n    session({\n      secret: process.env.SECRET,\n      name: \"my-custom-session-name\",\n    })\n  )\n  ```\n- **Do** use a secret management system or a key management service (KMS) with encryption for enhanced security. These services provide secure storage and management of secrets, reducing the risk of exposure.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\n","markdown":"## Description\n\nStoring secrets directly in code compromises security. It's safer to use environment variables or a secret management system.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This makes your application vulnerable to unauthorized access if the codebase is exposed.\n  ```javascript\n  app.use(\n    session({\n      secret: \"shh-my-secret\",\n      name: \"my-custom-session-name\",\n    })\n  )\n  ```\n- **Do** use environment variables to store secrets. This method keeps sensitive information out of your codebase.\n  ```javascript\n  app.use(\n    session({\n      secret: process.env.SECRET,\n      name: \"my-custom-session-name\",\n    })\n  )\n  ```\n- **Do** use a secret management system or a key management service (KMS) with encryption for enhanced security. These services provide secure storage and management of secrets, reducing the risk of exposure.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\n"}},{"id":"python_lang_weak_password_hash_crc32","name":"python_lang_weak_password_hash_crc32","shortDescription":{"text":"Usage of weak hashing library on a password (CRC32)"},"fullDescription":{"text":"Usage of weak hashing library on a password (CRC32)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe use of CRC32 for password hashing is insecure. CRC32 is designed for error-checking and not for security purposes, making it vulnerable to intentional data tampering.\n\n## Remediations\n\n- **Do not** use CRC32 for password hashing. It is not secure against intentional data modifications.\n  ```python\n  myhash = zlib.crc32(user.password) # unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance the security of stored passwords.\n  ```python\n  myhash = hashlib.sha256(user.password).digest()\n  ```","markdown":"## Description\n\nThe use of CRC32 for password hashing is insecure. CRC32 is designed for error-checking and not for security purposes, making it vulnerable to intentional data tampering.\n\n## Remediations\n\n- **Do not** use CRC32 for password hashing. It is not secure against intentional data modifications.\n  ```python\n  myhash = zlib.crc32(user.password) # unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance the security of stored passwords.\n  ```python\n  myhash = hashlib.sha256(user.password).digest()\n  ```"}},{"id":"javascript_lang_sql_injection","name":"javascript_lang_sql_injection","shortDescription":{"text":"Unsanitized input in SQL query"},"fullDescription":{"text":"Unsanitized input in SQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** use raw SQL queries that concatenate unsanitized input directly.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId); // unsafe\n  ```\n- **Do** validate all query inputs to ensure they meet expected patterns or values before using them in a query.\n  ```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n  ```\n- **Do** use prepared (or parameterized) statements for querying databases to safely include external input.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** use raw SQL queries that concatenate unsanitized input directly.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId); // unsafe\n  ```\n- **Do** validate all query inputs to ensure they meet expected patterns or values before using them in a query.\n  ```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n  ```\n- **Do** use prepared (or parameterized) statements for querying databases to safely include external input.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)"}},{"id":"javascript_express_cross_site_scripting","name":"javascript_express_cross_site_scripting","shortDescription":{"text":"Unsanitized user input in HTTP response (XSS)"},"fullDescription":{"text":"Unsanitized user input in HTTP response (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in HTTP responses exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in a response. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  res.send(req.body.data); // unsafe\n  ```\n- **Do** sanitize user input before including it in a response. Use library functions or frameworks designed for input sanitization to ensure that user data cannot be interpreted as executable code.\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nIncluding unsanitized user input in HTTP responses exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in a response. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  res.send(req.body.data); // unsafe\n  ```\n- **Do** sanitize user input before including it in a response. Use library functions or frameworks designed for input sanitization to ensure that user data cannot be interpreted as executable code.\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"javascript_lang_weak_hash_sha1","name":"javascript_lang_weak_hash_sha1","shortDescription":{"text":"Usage of weak hashing library (SHA-1)"},"fullDescription":{"text":"Usage of weak hashing library (SHA-1)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It's no longer considered secure against well-funded attackers.\n  ```javascript\n  const hash = crypto.createHmac(\"sha1\", key).update(user.password); // unsafe\n  ```\n- **Do** use stronger hashing algorithms like SHA-256 or SHA-3 for enhanced security.\n  ```javascript\n  const hash = crypto.createHmac(\"sha256\", key).update(user.password);\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)","markdown":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It's no longer considered secure against well-funded attackers.\n  ```javascript\n  const hash = crypto.createHmac(\"sha1\", key).update(user.password); // unsafe\n  ```\n- **Do** use stronger hashing algorithms like SHA-256 or SHA-3 for enhanced security.\n  ```javascript\n  const hash = crypto.createHmac(\"sha256\", key).update(user.password);\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)"}},{"id":"php_symfony_session_key_using_user_input","name":"php_symfony_session_key_using_user_input","shortDescription":{"text":"Unsanitized user input in session key"},"fullDescription":{"text":"Unsanitized user input in session key"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncorporating user-provided data directly into session keys poses a significant security risk. This practice can allow attackers to manipulate session data or perform unauthorized actions by exploiting the predictability or vulnerability of the session mechanism.\n\n## Remediations\n\n- **Do not** use user-defined data directly in session keys. This can lead to vulnerabilities where attackers might exploit the session management.\n  ```php\n  $session = $requestStack-\u003egetSession();\n  $session-\u003eput($userInput, $data); // unsafe\n  ```\n- **Do** sanitize user input before incorporating it into session keys. Ensure that any data derived from user input is properly validated and sanitized to prevent injection attacks.\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)","markdown":"## Description\n\nIncorporating user-provided data directly into session keys poses a significant security risk. This practice can allow attackers to manipulate session data or perform unauthorized actions by exploiting the predictability or vulnerability of the session mechanism.\n\n## Remediations\n\n- **Do not** use user-defined data directly in session keys. This can lead to vulnerabilities where attackers might exploit the session management.\n  ```php\n  $session = $requestStack-\u003egetSession();\n  $session-\u003eput($userInput, $data); // unsafe\n  ```\n- **Do** sanitize user input before incorporating it into session keys. Ensure that any data derived from user input is properly validated and sanitized to prevent injection attacks.\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)"}},{"id":"go_lang_hardcoded_pg_database_password","name":"go_lang_hardcoded_pg_database_password","shortDescription":{"text":"Usage of hard-coded PostgreSQL database password"},"fullDescription":{"text":"Usage of hard-coded PostgreSQL database password"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour code contains a hard-coded password for connecting to a PostgreSQL database. Storing passwords directly in the code compromises security and makes your application vulnerable to unauthorized access.\n\n## Remediations\n\n- **Do not** embed passwords directly in your database connection strings or code. This practice exposes your database to potential security breaches.\n- **Do** use environment variables to store sensitive information such as database passwords. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle passwords and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)","markdown":"## Description\n\nYour code contains a hard-coded password for connecting to a PostgreSQL database. Storing passwords directly in the code compromises security and makes your application vulnerable to unauthorized access.\n\n## Remediations\n\n- **Do not** embed passwords directly in your database connection strings or code. This practice exposes your database to potential security breaches.\n- **Do** use environment variables to store sensitive information such as database passwords. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle passwords and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)"}},{"id":"ruby_lang_regex_using_user_input","name":"ruby_lang_regex_using_user_input","shortDescription":{"text":"Unsanitized user input in regular expression"},"fullDescription":{"text":"Unsanitized user input in regular expression"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** construct regular expressions directly from user inputs. This can make your application susceptible to ReDoS attacks.\n- **Do** set a timeout for regular expressions to prevent excessive CPU usage. This can help mitigate the impact of potential ReDoS attacks.\n  ```ruby\n  Regexp.new(/(a|b)/, timeout: 3)\n  ```\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","markdown":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** construct regular expressions directly from user inputs. This can make your application susceptible to ReDoS attacks.\n- **Do** set a timeout for regular expressions to prevent excessive CPU usage. This can help mitigate the impact of potential ReDoS attacks.\n  ```ruby\n  Regexp.new(/(a|b)/, timeout: 3)\n  ```\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)"}},{"id":"python_lang_http_response_splitting","name":"python_lang_http_response_splitting","shortDescription":{"text":"Unsanitized user input in HTTP response (XSS)"},"fullDescription":{"text":"Unsanitized user input in HTTP response (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in a HTTP response could allow an attacker inject Carriage Return Line Feed (CRLF) characters into the response. An entirely attacker-controlled response can then be returned, creating a cross-site scripting (XSS) vulnerability.\n\n## Remediations\n\n- **Do not** include user input in cookies or other HTTP headers without proper sanitization. This can prevent attackers from exploiting the input to manipulate the response.\n- **Do** remove CRLF sequences from user input to mitigate the risk of response splitting and XSS attacks. Use the following code snippet as a reference for sanitizing input in Java:\n  ```python\n  input = request.getParameter(\"data\");\n  var sanitized = input.replaceAll(\"\\r\\n\", \"\");\n  cookie.setValue(sanitized);\n  ```","markdown":"## Description\n\nIncluding unsanitized user input in a HTTP response could allow an attacker inject Carriage Return Line Feed (CRLF) characters into the response. An entirely attacker-controlled response can then be returned, creating a cross-site scripting (XSS) vulnerability.\n\n## Remediations\n\n- **Do not** include user input in cookies or other HTTP headers without proper sanitization. This can prevent attackers from exploiting the input to manipulate the response.\n- **Do** remove CRLF sequences from user input to mitigate the risk of response splitting and XSS attacks. Use the following code snippet as a reference for sanitizing input in Java:\n  ```python\n  input = request.getParameter(\"data\");\n  var sanitized = input.replaceAll(\"\\r\\n\", \"\");\n  cookie.setValue(sanitized);\n  ```"}},{"id":"javascript_third_parties_google_analytics","name":"javascript_third_parties_google_analytics","shortDescription":{"text":"Leakage of sensitive data to Google Analytics"},"fullDescription":{"text":"Leakage of sensitive data to Google Analytics"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party analytics tools like Google Analytics is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to analytics libraries like Google Analytics.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    gtag(\"event\", \"screen_view\", {\n      user: {\n        subscribed: true,\n      },\n    });\n  ```\n\n## References\n- [Google Analytics docs](https://developers.google.com/analytics/devguides/reporting/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party analytics tools like Google Analytics is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to analytics libraries like Google Analytics.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    gtag(\"event\", \"screen_view\", {\n      user: {\n        subscribed: true,\n      },\n    });\n  ```\n\n## References\n- [Google Analytics docs](https://developers.google.com/analytics/devguides/reporting/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n"}},{"id":"ruby_rails_insecure_communication","name":"ruby_rails_insecure_communication","shortDescription":{"text":"Missing secure HTTP server configuration"},"fullDescription":{"text":"Missing secure HTTP server configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application may be at risk if it does not enforce the use of SSL (Secure Sockets Layer) for all communications, especially when processing sensitive data. Be sure to enable force_ssl at the application level to ensure that all data transmitted is encrypted. Unencrypted HTTP communication sends all requests as plain text, meaning anyone listening in can see all the traffic and extract user data.\n\n## Remediations\n\n- **Do** enforce SSL to secure all data in transit. This is crucial for protecting sensitive information from eavesdropping or interception.\n  ```ruby\n  config.force_ssl = true\n  ```\n- **Do not** allow unencrypted HTTP traffic for your application. Unencrypted communications can be intercepted, exposing sensitive user data to attackers.\n\n## References\n\n- [Configuring Rails Applications - Ruby on Rails Guides](https://guides.rubyonrails.org/configuring.html#config-force-ssl)\n- [Session Hijacking - Ruby on Rails Guides](https://guides.rubyonrails.org/security.html#session-hijacking)","markdown":"## Description\n\nYour application may be at risk if it does not enforce the use of SSL (Secure Sockets Layer) for all communications, especially when processing sensitive data. Be sure to enable force_ssl at the application level to ensure that all data transmitted is encrypted. Unencrypted HTTP communication sends all requests as plain text, meaning anyone listening in can see all the traffic and extract user data.\n\n## Remediations\n\n- **Do** enforce SSL to secure all data in transit. This is crucial for protecting sensitive information from eavesdropping or interception.\n  ```ruby\n  config.force_ssl = true\n  ```\n- **Do not** allow unencrypted HTTP traffic for your application. Unencrypted communications can be intercepted, exposing sensitive user data to attackers.\n\n## References\n\n- [Configuring Rails Applications - Ruby on Rails Guides](https://guides.rubyonrails.org/configuring.html#config-force-ssl)\n- [Session Hijacking - Ruby on Rails Guides](https://guides.rubyonrails.org/security.html#session-hijacking)"}},{"id":"go_gosec_blocklist_sha1","name":"go_gosec_blocklist_sha1","shortDescription":{"text":"Import of weak hashing library (SHA-1)"},"fullDescription":{"text":"Import of weak hashing library (SHA-1)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe SHA-1 hashing algorithm is outdated and vulnerable to collision attacks, where two distinct inputs produce the same output hash. This flaw compromises the algorithm's ability to securely verify data integrity and authenticity, making it unsuitable for cryptographic security.\n\n## Remediations\n\n- **Do not** use SHA-1 for cryptographic purposes or to ensure data integrity. Its susceptibility to collision attacks poses a significant security risk.\n- **Do** use stronger hashing algorithms such as SHA-3 or BLAKE2 for general hashing purposes, such as file integrity checks or generating unique identifiers.\n- **Do** use recommended algorithms such as bcrypt or Argon2id for password hashing, as these are designed to be slower and therefore more effective against brute-force attacks.\n\n## References\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [NIST Policy on Hash Functions](https://csrc.nist.gov/projects/hash-functions)","markdown":"## Description\n\nThe SHA-1 hashing algorithm is outdated and vulnerable to collision attacks, where two distinct inputs produce the same output hash. This flaw compromises the algorithm's ability to securely verify data integrity and authenticity, making it unsuitable for cryptographic security.\n\n## Remediations\n\n- **Do not** use SHA-1 for cryptographic purposes or to ensure data integrity. Its susceptibility to collision attacks poses a significant security risk.\n- **Do** use stronger hashing algorithms such as SHA-3 or BLAKE2 for general hashing purposes, such as file integrity checks or generating unique identifiers.\n- **Do** use recommended algorithms such as bcrypt or Argon2id for password hashing, as these are designed to be slower and therefore more effective against brute-force attacks.\n\n## References\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [NIST Policy on Hash Functions](https://csrc.nist.gov/projects/hash-functions)"}},{"id":"php_third_parties_elasticsearch","name":"php_third_parties_elasticsearch","shortDescription":{"text":"Leakage of sensitive data to ElasticSearch"},"fullDescription":{"text":"Leakage of sensitive data to ElasticSearch"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html)\n"}},{"id":"python_lang_ssl_verification","name":"python_lang_ssl_verification","shortDescription":{"text":"Missing SSL certificate verification"},"fullDescription":{"text":"Missing SSL certificate verification"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nMissing or optional SSL certificate verification can compromise the security of sensitive data. This vulnerability arises when an application fails to check for valid SSL certificates during data transmission, potentially allowing attackers to intercept or manipulate data and leading to Man-in-the-Middle attacks. To protect against these kinds of attacks and to maintain secure communication, SSL certificates should always be properly validated in production environments.\n\n## Remediations\n\n- **Do not** disable SSL certificate verification in your HTTP client. Disabling it removes a critical layer of security and makes your application vulnerable to Man-in-the-Middle attacks.\n```python\nurllib3.HTTPSConnectionPool(..., cert_reqs=\"CERT_NONE\", ...) # unsafe\n# or\nrequests.get(..., verify=False, ...) # unsafe\n```\n- **Do** ensure SSL certificate verification is enabled when configuring connections, as well as hostname checking. For example, use `ssl.CERT_REQUIRED` to ensure SSL certificates are verified. \n  ```python\n  urllib3.HTTPSConnectionPool(\"my-host.com\", cert_reqs=ssl.CERT_REQUIRED, assert_hostname=True ...)\n  ```\n- **Do not** create custom SSL contexts that disable certificate verification\n```python\nctx = urllib3.create_urllib3_context(cert_reqs=ssl.CERT_NONE) # unsafe\n```\n\n## References\n- [Python 3 ssl module security considerations](https://docs.python.org/3/library/ssl.html#ssl-security)","markdown":"## Description\n\nMissing or optional SSL certificate verification can compromise the security of sensitive data. This vulnerability arises when an application fails to check for valid SSL certificates during data transmission, potentially allowing attackers to intercept or manipulate data and leading to Man-in-the-Middle attacks. To protect against these kinds of attacks and to maintain secure communication, SSL certificates should always be properly validated in production environments.\n\n## Remediations\n\n- **Do not** disable SSL certificate verification in your HTTP client. Disabling it removes a critical layer of security and makes your application vulnerable to Man-in-the-Middle attacks.\n```python\nurllib3.HTTPSConnectionPool(..., cert_reqs=\"CERT_NONE\", ...) # unsafe\n# or\nrequests.get(..., verify=False, ...) # unsafe\n```\n- **Do** ensure SSL certificate verification is enabled when configuring connections, as well as hostname checking. For example, use `ssl.CERT_REQUIRED` to ensure SSL certificates are verified. \n  ```python\n  urllib3.HTTPSConnectionPool(\"my-host.com\", cert_reqs=ssl.CERT_REQUIRED, assert_hostname=True ...)\n  ```\n- **Do not** create custom SSL contexts that disable certificate verification\n```python\nctx = urllib3.create_urllib3_context(cert_reqs=ssl.CERT_NONE) # unsafe\n```\n\n## References\n- [Python 3 ssl module security considerations](https://docs.python.org/3/library/ssl.html#ssl-security)"}},{"id":"python_lang_jwt_weak_encryption","name":"python_lang_jwt_weak_encryption","shortDescription":{"text":"Usage of weak encryption algorithm in JWT"},"fullDescription":{"text":"Usage of weak encryption algorithm in JWT"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nImplementing weak encryption algorithms in JWT (JSON Web Tokens) compromises the security of the tokens. This vulnerability occurs when an encryption algorithm that does not offer sufficient security strength is used, making the tokens susceptible to attacks.\n\n## Remediations\n\n- **Do** use robust encryption algorithms recommended for JWT. HS256 (HMAC with SHA-256) is a secure choice for signing JWTs.\n  ```python\n  jwt.encode(payload, secret, algorithm=\"HS256\")\n  ```\n\n## References\n\n- [OWASP weak encryption](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption)","markdown":"## Description\n\nImplementing weak encryption algorithms in JWT (JSON Web Tokens) compromises the security of the tokens. This vulnerability occurs when an encryption algorithm that does not offer sufficient security strength is used, making the tokens susceptible to attacks.\n\n## Remediations\n\n- **Do** use robust encryption algorithms recommended for JWT. HS256 (HMAC with SHA-256) is a secure choice for signing JWTs.\n  ```python\n  jwt.encode(payload, secret, algorithm=\"HS256\")\n  ```\n\n## References\n\n- [OWASP weak encryption](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption)"}},{"id":"javascript_lang_path_traversal","name":"javascript_lang_path_traversal","shortDescription":{"text":"Unsanitized dynamic input in file path"},"fullDescription":{"text":"Unsanitized dynamic input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\\..`, to prevent path traversal attacks.\n  ```javascript\n  var folder = target.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and remove any instances of the NULL byte (\"%00\") in user input to guard against poison NULL byte attacks.\n  ```javascript\n  if (target.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.\n  ```javascript\n  const path = require(\"path\");\n  var pathname = path.join(\"/public/\", folder);\n  if (pathname.indexOf(\"/public/\") !== 0) {\n    // Handle or reject the input\n  }\n  ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","markdown":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\\..`, to prevent path traversal attacks.\n  ```javascript\n  var folder = target.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and remove any instances of the NULL byte (\"%00\") in user input to guard against poison NULL byte attacks.\n  ```javascript\n  if (target.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.\n  ```javascript\n  const path = require(\"path\");\n  var pathname = path.join(\"/public/\", folder);\n  if (pathname.indexOf(\"/public/\") !== 0) {\n    // Handle or reject the input\n  }\n  ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)"}},{"id":"ruby_lang_ftp_using_user_input","name":"ruby_lang_ftp_using_user_input","shortDescription":{"text":"Unsanitized user input in FTP request"},"fullDescription":{"text":"Unsanitized user input in FTP request"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input in FTP requests can lead to severe security vulnerabilities. When your application uses raw user input in FTP operations without proper sanitization, it opens up avenues for attackers. They could exploit this to perform code injection attacks, where malicious code is executed by the application, or path traversal attacks, which allow unauthorized access to files and directories outside of the intended scope.\n\n## Remediations\n\n- **Do not** use unsanitized user input to form filenames or file paths in FTP operations. Always sanitize input to prevent malicious data from being processed.\n  ```ruby\n  Net::FTP.open(\"public/#{params[\"resource_name\"]}.txt\") do # unsafe\n    # ...\n  end\n  ```\n- **Do not** pass unsanitized user input as arguments to FTP methods. Ensure input is validated or sanitized before use.\n  ```ruby\n  Net::FTP.open(\"example.txt\", username: params[:user]) do # unsafe\n    # ...\n  end\n  ```\n- **Do** use a safelist for filenames and paths, allowing only known patterns.\n- **Do** implement strict input validation checks, such as length, format, and type, to ensure only expected data is processed.\n\n## References\n\n- [OWASP code injection](https://owasp.org/www-community/attacks/Code_Injection)\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","markdown":"## Description\n\nUsing unsanitized user input in FTP requests can lead to severe security vulnerabilities. When your application uses raw user input in FTP operations without proper sanitization, it opens up avenues for attackers. They could exploit this to perform code injection attacks, where malicious code is executed by the application, or path traversal attacks, which allow unauthorized access to files and directories outside of the intended scope.\n\n## Remediations\n\n- **Do not** use unsanitized user input to form filenames or file paths in FTP operations. Always sanitize input to prevent malicious data from being processed.\n  ```ruby\n  Net::FTP.open(\"public/#{params[\"resource_name\"]}.txt\") do # unsafe\n    # ...\n  end\n  ```\n- **Do not** pass unsanitized user input as arguments to FTP methods. Ensure input is validated or sanitized before use.\n  ```ruby\n  Net::FTP.open(\"example.txt\", username: params[:user]) do # unsafe\n    # ...\n  end\n  ```\n- **Do** use a safelist for filenames and paths, allowing only known patterns.\n- **Do** implement strict input validation checks, such as length, format, and type, to ensure only expected data is processed.\n\n## References\n\n- [OWASP code injection](https://owasp.org/www-community/attacks/Code_Injection)\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)"}},{"id":"ruby_rails_session","name":"ruby_rails_session","shortDescription":{"text":"Leakage of sensitive data in session cookie"},"fullDescription":{"text":"Leakage of sensitive data in session cookie"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring sensitive data in session cookies poses a security risk. This vulnerability arises when sensitive information is included within session cookies, making it susceptible to unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in session cookies. This approach risks exposing sensitive information since cookies are stored on the client side.\n  ```ruby\n  cookies[:user_credentials] = \"username:password\" # unsafe\n  ```\n- **Do** configure your Rails application to use a database-based session storage. This method enhances security by storing session data on the server side, making it more secure and easier to manage session invalidation.\n  ```ruby\n  Rails.application.config.session_store :active_record_store\n  ```\n\n## References\n\n- [Rails guide on configuring Rails applications](https://guides.rubyonrails.org/configuring.html)","markdown":"## Description\n\nStoring sensitive data in session cookies poses a security risk. This vulnerability arises when sensitive information is included within session cookies, making it susceptible to unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in session cookies. This approach risks exposing sensitive information since cookies are stored on the client side.\n  ```ruby\n  cookies[:user_credentials] = \"username:password\" # unsafe\n  ```\n- **Do** configure your Rails application to use a database-based session storage. This method enhances security by storing session data on the server side, making it more secure and easier to manage session invalidation.\n  ```ruby\n  Rails.application.config.session_store :active_record_store\n  ```\n\n## References\n\n- [Rails guide on configuring Rails applications](https://guides.rubyonrails.org/configuring.html)"}},{"id":"python_django_template_injection","name":"python_django_template_injection","shortDescription":{"text":"Unsanitized user input in web page generation (XSS)"},"fullDescription":{"text":"Unsanitized user input in web page generation (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\n\n## Remediations\n\n- **Do** encode user input based on the context it is used in, such as HTML content, HTML attributes, JavaScript, and CSS contexts. This helps prevent malicious scripts from being executed.\n  ```python\n  django.utils.html.escape(user_input)\n  ```\n- **Do** use templating engines like Django that automatically encode data based on its context.\n- **Do** sanitize data using libraries or functions specifically designed for this purpose, especially when inserting content into a web page.\n- **Do** separate data from code by avoiding inline scripting and event handlers. Use separate JavaScript files for event handling to minimize script injection risks.\n- **Do not** mix server-side and client-side templating systems, as server-side systems may not escape output safely for client-side use.\n- **Do not** encode user input before storing it in a database. Any encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [Django templates Documentation](https://docs.djangoproject.com/en/5.0/ref/templates/)","markdown":"## Description\n\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\n\n## Remediations\n\n- **Do** encode user input based on the context it is used in, such as HTML content, HTML attributes, JavaScript, and CSS contexts. This helps prevent malicious scripts from being executed.\n  ```python\n  django.utils.html.escape(user_input)\n  ```\n- **Do** use templating engines like Django that automatically encode data based on its context.\n- **Do** sanitize data using libraries or functions specifically designed for this purpose, especially when inserting content into a web page.\n- **Do** separate data from code by avoiding inline scripting and event handlers. Use separate JavaScript files for event handling to minimize script injection risks.\n- **Do not** mix server-side and client-side templating systems, as server-side systems may not escape output safely for client-side use.\n- **Do not** encode user input before storing it in a database. Any encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [Django templates Documentation](https://docs.djangoproject.com/en/5.0/ref/templates/)"}},{"id":"javascript_lang_websocket_insecure","name":"javascript_lang_websocket_insecure","shortDescription":{"text":"Usage of insecure websocket connection"},"fullDescription":{"text":"Usage of insecure websocket connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is at risk when it connects to APIs via insecure websocket connections. This vulnerability occurs because the data transmitted over these connections can be intercepted or tampered with by attackers. Ensure that all websocket connections in your application use SSL to encrypt the data in transit, safeguarding it from unauthorized access.\n\n## Remediations\n\n- **Do not** initiate websocket connections without SSL. Such connections are vulnerable to interception and compromise.\n  ```javascript\n  const client = new WebSocket('ws://insecure-api.com'); // unsafe\n  ```\n- **Do** ensure all websocket connections are secured with SSL. This encrypts the data transmitted, protecting it from eavesdroppers and tampering.\n  ```javascript\n  const client = new WebSocket('wss://secure-api.com');\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nYour application is at risk when it connects to APIs via insecure websocket connections. This vulnerability occurs because the data transmitted over these connections can be intercepted or tampered with by attackers. Ensure that all websocket connections in your application use SSL to encrypt the data in transit, safeguarding it from unauthorized access.\n\n## Remediations\n\n- **Do not** initiate websocket connections without SSL. Such connections are vulnerable to interception and compromise.\n  ```javascript\n  const client = new WebSocket('ws://insecure-api.com'); // unsafe\n  ```\n- **Do** ensure all websocket connections are secured with SSL. This encrypts the data transmitted, protecting it from eavesdroppers and tampering.\n  ```javascript\n  const client = new WebSocket('wss://secure-api.com');\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"php_lang_manual_html_sanitization","name":"php_lang_manual_html_sanitization","shortDescription":{"text":"Usage of manual HTML sanitization (XSS)"},"fullDescription":{"text":"Usage of manual HTML sanitization (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nManual HTML sanitization can introduce Cross-Site Scripting (XSS) vulnerabilities. This security risk arises when developers attempt to manually escape HTML entities, which is a process prone to errors and oversights, potentially leaving the application vulnerable to XSS attacks.\n\n## Remediations\n\n- **Do not** manually escape HTML entities in an attempt to sanitize input or output. This method is unreliable and increases the risk of XSS vulnerabilities.\n  ```php\n  $html = str_replace(\"\u0026\", \"\u0026amp;\", $text); // unsafe\n  ```\n- **Do** use built-in HTML sanitizers to handle escaping of HTML content securely. These tools are designed to mitigate the risk of XSS by properly encoding user input or any data displayed in an HTML context.\n  ```php\n  $html = htmlspecialchars($text);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","markdown":"## Description\n\nManual HTML sanitization can introduce Cross-Site Scripting (XSS) vulnerabilities. This security risk arises when developers attempt to manually escape HTML entities, which is a process prone to errors and oversights, potentially leaving the application vulnerable to XSS attacks.\n\n## Remediations\n\n- **Do not** manually escape HTML entities in an attempt to sanitize input or output. This method is unreliable and increases the risk of XSS vulnerabilities.\n  ```php\n  $html = str_replace(\"\u0026\", \"\u0026amp;\", $text); // unsafe\n  ```\n- **Do** use built-in HTML sanitizers to handle escaping of HTML content securely. These tools are designed to mitigate the risk of XSS by properly encoding user input or any data displayed in an HTML context.\n  ```php\n  $html = htmlspecialchars($text);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)"}},{"id":"ruby_lang_weak_password_encryption_dsa","name":"ruby_lang_weak_password_encryption_dsa","shortDescription":{"text":"Usage of weak encryption algorithm on a password (DSA)"},"fullDescription":{"text":"Usage of weak encryption algorithm on a password (DSA)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak encryption algorithm like DSA for passwords increases the risk of data breaches. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use encryption algorithms for password storage. Encryption is not secure enough for this purpose as it allows for the possibility of retrieving the original password.\n- **Do** use strong hashing algorithms such as bcrypt or Argon2id for password storage. These provide a more secure way to handle passwords by making it extremely difficult to reverse the process and obtain the original password.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)","markdown":"## Description\n\nUsing a weak encryption algorithm like DSA for passwords increases the risk of data breaches. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use encryption algorithms for password storage. Encryption is not secure enough for this purpose as it allows for the possibility of retrieving the original password.\n- **Do** use strong hashing algorithms such as bcrypt or Argon2id for password storage. These provide a more secure way to handle passwords by making it extremely difficult to reverse the process and obtain the original password.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)"}},{"id":"python_lang_insecure_ftp","name":"python_lang_insecure_ftp","shortDescription":{"text":"Usage of insecure FTP connection"},"fullDescription":{"text":"Usage of insecure FTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing insecure FTP connections can compromise the security of sensitive data. This vulnerability arises when applications that handle sensitive information communicate with FTP servers without secure protocols. Always verify that FTP connections in your application utilize SFTP for enhanced security.\n\n## Remediations\n\n- **Do** use the `FTP_TLS` class to establish secure FTP connections. This function ensures that your connection to the FTP server is encrypted, protecting the data transmitted from potential interception or eavesdropping.\n  ```python\n  ftp = FTP_TLS(\"ftp.example.com\")\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nUsing insecure FTP connections can compromise the security of sensitive data. This vulnerability arises when applications that handle sensitive information communicate with FTP servers without secure protocols. Always verify that FTP connections in your application utilize SFTP for enhanced security.\n\n## Remediations\n\n- **Do** use the `FTP_TLS` class to establish secure FTP connections. This function ensures that your connection to the FTP server is encrypted, protecting the data transmitted from potential interception or eavesdropping.\n  ```python\n  ftp = FTP_TLS(\"ftp.example.com\")\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"ruby_third_parties_bigquery","name":"ruby_third_parties_bigquery","shortDescription":{"text":"Leakage of sensitive data to BigQuery"},"fullDescription":{"text":"Leakage of sensitive data to BigQuery"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools like BigQuery is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like BigQuery.\n\n## References\n- [BigQuery docs](https://cloud.google.com/ruby/docs)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools like BigQuery is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like BigQuery.\n\n## References\n- [BigQuery docs](https://cloud.google.com/ruby/docs)\n"}},{"id":"php_lang_exec_using_user_input","name":"php_lang_exec_using_user_input","shortDescription":{"text":"Unsanitized user input in OS command"},"fullDescription":{"text":"Unsanitized user input in OS command"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","markdown":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)"}},{"id":"go_lang_weak_hash_sha1","name":"go_lang_weak_hash_sha1","shortDescription":{"text":"Usage of weak hashing library (SHA-1)"},"fullDescription":{"text":"Usage of weak hashing library (SHA-1)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library such as SHA-1 can compromise data security. SHA-1 is no longer considered secure due to vulnerabilities that can lead to data breaches.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is considered weak and vulnerable to attacks.\n  ```go\n  sha1.Sum([]byte(\"password\")) // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```go\n  sha256.Sum256([]byte(\"string\"))\n  ```","markdown":"## Description\n\nUsing a weak hashing library such as SHA-1 can compromise data security. SHA-1 is no longer considered secure due to vulnerabilities that can lead to data breaches.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is considered weak and vulnerable to attacks.\n  ```go\n  sha1.Sum([]byte(\"password\")) // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```go\n  sha256.Sum256([]byte(\"string\"))\n  ```"}},{"id":"go_third_parties_open_telemetry","name":"go_third_parties_open_telemetry","shortDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"fullDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n","markdown":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n"}},{"id":"go_third_parties_new_relic","name":"go_third_parties_new_relic","shortDescription":{"text":"Leakage of sensitive data to New Relic"},"fullDescription":{"text":"Leakage of sensitive data to New Relic"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n"}},{"id":"php_lang_weak_hash_md","name":"php_lang_weak_hash_md","shortDescription":{"text":"Usage of weak hashing library (MDx)"},"fullDescription":{"text":"Usage of weak hashing library (MDx)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","markdown":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```"}},{"id":"go_lang_observable_timing","name":"go_lang_observable_timing","shortDescription":{"text":"Observable Timing Discrepancy"},"fullDescription":{"text":"Observable Timing Discrepancy"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information, such as password checks, to run in constant time. This approach helps in mitigating timing attacks by ensuring that operations take the same amount of time regardless of the input.\n- **Do** use built-in cryptographic libraries that offer functions safe against timing attacks for comparing secret values. These libraries are designed to prevent timing discrepancies that could leak sensitive information.\n- **Do not** use direct string comparisons for sensitive information. This method can result in early termination of the comparison function, leading to timing discrepancies based on the first mismatched character.\n- **Do not** design application logic that alters execution paths in a manner that could introduce observable timing differences, particularly when processing user input or comparing secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)","markdown":"## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information, such as password checks, to run in constant time. This approach helps in mitigating timing attacks by ensuring that operations take the same amount of time regardless of the input.\n- **Do** use built-in cryptographic libraries that offer functions safe against timing attacks for comparing secret values. These libraries are designed to prevent timing discrepancies that could leak sensitive information.\n- **Do not** use direct string comparisons for sensitive information. This method can result in early termination of the comparison function, leading to timing discrepancies based on the first mismatched character.\n- **Do not** design application logic that alters execution paths in a manner that could introduce observable timing differences, particularly when processing user input or comparing secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)"}},{"id":"ruby_lang_eval_using_user_input","name":"ruby_lang_eval_using_user_input","shortDescription":{"text":"Unsanitized user input in 'eval' type function"},"fullDescription":{"text":"Unsanitized user input in 'eval' type function"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nExecuting code with 'eval' or similar functions using unsanitized user input is risky and can lead to code injection vulnerabilities. This happens when external input is used directly in functions that execute code, allowing attackers to run malicious code within your application.\n\n## Remediations\n\n- **Do not** use `eval` or similar code execution functions with unsanitized user input. This can create a significant security risk by allowing code injection.\n- **Do** use dynamic hardcoded values instead of direct user input to mitigate the risk of code injection. This approach allows for controlled execution of code without exposing your application to injected malicious code.\n  ```ruby\n  get_total_str = if params[\"include_vat\"]\n    \"def get_total(a,b,c); a + b + c; end\"\n  else\n    \"def get_total(a,b); a + b; end\"\n  end\n\n  cart.instance_eval(get_total_str)\n  ```\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","markdown":"## Description\n\nExecuting code with 'eval' or similar functions using unsanitized user input is risky and can lead to code injection vulnerabilities. This happens when external input is used directly in functions that execute code, allowing attackers to run malicious code within your application.\n\n## Remediations\n\n- **Do not** use `eval` or similar code execution functions with unsanitized user input. This can create a significant security risk by allowing code injection.\n- **Do** use dynamic hardcoded values instead of direct user input to mitigate the risk of code injection. This approach allows for controlled execution of code without exposing your application to injected malicious code.\n  ```ruby\n  get_total_str = if params[\"include_vat\"]\n    \"def get_total(a,b,c); a + b + c; end\"\n  else\n    \"def get_total(a,b); a + b; end\"\n  end\n\n  cart.instance_eval(get_total_str)\n  ```\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)"}},{"id":"javascript_third_parties_algolia","name":"javascript_third_parties_algolia","shortDescription":{"text":"Leakage of sensitive data to Algolia"},"fullDescription":{"text":"Leakage of sensitive data to Algolia"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    const algoliaSearch = require('algoliasearch')\n    const myAlgolia = algoliaSearch(\"123\", \"123\")\n    const index = myAlgolia.initIndex(user.uuid)\n  ```\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    const algoliaSearch = require('algoliasearch')\n    const myAlgolia = algoliaSearch(\"123\", \"123\")\n    const index = myAlgolia.initIndex(user.uuid)\n  ```\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n"}},{"id":"javascript_lang_import_using_user_input","name":"javascript_lang_import_using_user_input","shortDescription":{"text":"Usage of externally controlled input to select code"},"fullDescription":{"text":"Usage of externally controlled input to select code"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLoading code dynamically from a path dictated by user input can allow attackers to execute arbitrary code on your system.\n\n## Remediations\n\n- **Do not** pass user or request input directly to the `require()` function. This practice can lead to severe security vulnerabilities.\n- **Do** sanitize user input if it must be used to dynamically load code. Ensure that the input is checked and cleaned to prevent malicious data from being processed.\n- **Do** use a safelist approach when relying on user input to load code dynamically. Verify that the input matches a predefined list of safe values before processing.\n  ```javascript\n  var path = req.body.path;\n  if (['users', 'posts', 'pages'].includes(path)) {\n    require(`${path}.js`);\n  }\n  ```","markdown":"## Description\n\nLoading code dynamically from a path dictated by user input can allow attackers to execute arbitrary code on your system.\n\n## Remediations\n\n- **Do not** pass user or request input directly to the `require()` function. This practice can lead to severe security vulnerabilities.\n- **Do** sanitize user input if it must be used to dynamically load code. Ensure that the input is checked and cleaned to prevent malicious data from being processed.\n- **Do** use a safelist approach when relying on user input to load code dynamically. Verify that the input matches a predefined list of safe values before processing.\n  ```javascript\n  var path = req.body.path;\n  if (['users', 'posts', 'pages'].includes(path)) {\n    require(`${path}.js`);\n  }\n  ```"}},{"id":"javascript_express_jwt_not_revoked","name":"javascript_express_jwt_not_revoked","shortDescription":{"text":"Missing revoke method on JWT"},"fullDescription":{"text":"Missing revoke method on JWT"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nFailing to implement a revoke method for JSON Web Tokens (JWTs) can lead to security vulnerabilities, especially when the tokens contain sensitive information. In order to maintain the integrity and confidentiality of any data contained within JWTs, it is best practice caching policy to always revoke them.\n\n## Remediations\n\n- **Do** ensure JWTs are short-lived by implementing a method to revoke them. This reduces the risk of unauthorized access to sensitive information.\n  ```javascript\n  expressjwt({\n    ...\n    isRevoked: this.customRevokeCall(),\n    ...\n  })\n  ```\n\n## References\n\n- [ExpressJWT documentation on revoking tokens](https://github.com/auth0/express-jwt#revoked-tokens)","markdown":"## Description\n\nFailing to implement a revoke method for JSON Web Tokens (JWTs) can lead to security vulnerabilities, especially when the tokens contain sensitive information. In order to maintain the integrity and confidentiality of any data contained within JWTs, it is best practice caching policy to always revoke them.\n\n## Remediations\n\n- **Do** ensure JWTs are short-lived by implementing a method to revoke them. This reduces the risk of unauthorized access to sensitive information.\n  ```javascript\n  expressjwt({\n    ...\n    isRevoked: this.customRevokeCall(),\n    ...\n  })\n  ```\n\n## References\n\n- [ExpressJWT documentation on revoking tokens](https://github.com/auth0/express-jwt#revoked-tokens)"}},{"id":"javascript_express_insecure_allow_origin","name":"javascript_express_insecure_allow_origin","shortDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"fullDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** define the Access-Control-Allow-Origin header with user input. This practice can compromise the security of your application by allowing data access to unintended users.\n- **Do** verify user input if it is absolutely necessary to use it for defining origins. Ensure that the verification process is robust to prevent security breaches.\n- **Do** use a safelist approach when specifying origins. This uses a predefined list of trusted origins and only allows requests from those origins.\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)","markdown":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** define the Access-Control-Allow-Origin header with user input. This practice can compromise the security of your application by allowing data access to unintended users.\n- **Do** verify user input if it is absolutely necessary to use it for defining origins. Ensure that the verification process is robust to prevent security breaches.\n- **Do** use a safelist approach when specifying origins. This uses a predefined list of trusted origins and only allows requests from those origins.\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)"}},{"id":"ruby_third_parties_datadog","name":"ruby_third_parties_datadog","shortDescription":{"text":"Leakage of sensitive data to Datadog"},"fullDescription":{"text":"Leakage of sensitive data to Datadog"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=ruby#scrub-sensitive-data-from-your-spans)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=ruby#scrub-sensitive-data-from-your-spans)\n"}},{"id":"python_third_parties_algolia","name":"python_third_parties_algolia","shortDescription":{"text":"Leakage of sensitive data to Algolia"},"fullDescription":{"text":"Leakage of sensitive data to Algolia"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n"}},{"id":"go_gosec_filesystem_ziparchive","name":"go_gosec_filesystem_ziparchive","shortDescription":{"text":"Missing protection against 'Zip Slip' path traversal"},"fullDescription":{"text":"Missing protection against 'Zip Slip' path traversal"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is vulnerable to a 'Zip Slip' path traversal attack when it extracts files from archives that are not trusted. This occurs because malicious archives may contain files with relative paths aiming to escape the intended directory. As a result, these files could overwrite important system files or be placed in sensitive locations, leading to security breaches.\n\n## Remediations\n\n- **Do** implement checks to limit the zip archive's size. This prevents 'Zip Bombs', which are archives that decompress into sizes much larger than expected. For example, use `file.UncompressedSize64` to check the size of a file within a ZIP file.\n- **Do** generate unique filenames for extracted files or sanitize the original filenames to avoid overwriting files intentionally. You can use `filepath.Base`, for example, to extract the filename from a path and discard any directory information.\n  ```go\n  name := filepath.Base(file.Name)\n  ```\n- **Do** validate the paths of extracted files to ensure they are written to a specified, trusted directory without traversing outside of it.\n- **Do** process only regular files. Exclude symbolic links to prevent indirect file read/write vulnerabilities.\n  ```go\n  if !file.Mode().IsRegular() {\n    log.Fatal(\"non-regular file: %s\\n\", file.Name)\n  }\n  ```\n- **Do** ensure directories within the zip archive are processed securely by cleaning the path and strictly validating it against the base path.\n\n## References\n\n- [Go Documentation: archive/zip package](https://pkg.go.dev/archive/zip)","markdown":"## Description\n\nYour application is vulnerable to a 'Zip Slip' path traversal attack when it extracts files from archives that are not trusted. This occurs because malicious archives may contain files with relative paths aiming to escape the intended directory. As a result, these files could overwrite important system files or be placed in sensitive locations, leading to security breaches.\n\n## Remediations\n\n- **Do** implement checks to limit the zip archive's size. This prevents 'Zip Bombs', which are archives that decompress into sizes much larger than expected. For example, use `file.UncompressedSize64` to check the size of a file within a ZIP file.\n- **Do** generate unique filenames for extracted files or sanitize the original filenames to avoid overwriting files intentionally. You can use `filepath.Base`, for example, to extract the filename from a path and discard any directory information.\n  ```go\n  name := filepath.Base(file.Name)\n  ```\n- **Do** validate the paths of extracted files to ensure they are written to a specified, trusted directory without traversing outside of it.\n- **Do** process only regular files. Exclude symbolic links to prevent indirect file read/write vulnerabilities.\n  ```go\n  if !file.Mode().IsRegular() {\n    log.Fatal(\"non-regular file: %s\\n\", file.Name)\n  }\n  ```\n- **Do** ensure directories within the zip archive are processed securely by cleaning the path and strictly validating it against the base path.\n\n## References\n\n- [Go Documentation: archive/zip package](https://pkg.go.dev/archive/zip)"}},{"id":"javascript_express_default_session_config","name":"javascript_express_default_session_config","shortDescription":{"text":"Usage of default session cookie configuration"},"fullDescription":{"text":"Usage of default session cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing default session cookie configurations can expose your application to security vulnerabilities. This vulnerability arises when session cookie are set with their default values, making them predictable and easier to exploit.\n\n## Remediations\n\n- **Do not** rely on the default session cookie names and values provided by your framework. These defaults can be easily guessed by attackers, increasing the risk of session hijacking.\n- **Do** use generic, non-descriptive names for session cookies. This makes it harder for attackers to identify and exploit the session management mechanism of your application.\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)","markdown":"## Description\n\nUsing default session cookie configurations can expose your application to security vulnerabilities. This vulnerability arises when session cookie are set with their default values, making them predictable and easier to exploit.\n\n## Remediations\n\n- **Do not** rely on the default session cookie names and values provided by your framework. These defaults can be easily guessed by attackers, increasing the risk of session hijacking.\n- **Do** use generic, non-descriptive names for session cookies. This makes it harder for attackers to identify and exploit the session management mechanism of your application.\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)"}},{"id":"go_third_parties_rollbar","name":"go_third_parties_rollbar","shortDescription":{"text":"Leakage of sensitive data to RollBar"},"fullDescription":{"text":"Leakage of sensitive data to RollBar"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/go)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/go)\n"}},{"id":"go_gorilla_cookie_missing_http_only","name":"go_gorilla_cookie_missing_http_only","shortDescription":{"text":"Missing HTTP Only option in cookie configuration"},"fullDescription":{"text":"Missing HTTP Only option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe absence of the \"HttpOnly\" attribute in cookie settings leaves the cookie vulnerable to being accessed by client-side JavaScript, such as through \"document.cookie\". This vulnerability is particularly concerning for websites susceptible to Cross-Site Scripting (XSS) attacks, as it allows malicious scripts to read the cookie value. Properly configuring the \"HttpOnly\" attribute is a critical step in securing cookies, especially for session management.\n\n## Remediations\n\n- **Do** set the `HttpOnly` attribute to `true` for cookies, especially session cookies, to prevent them from being accessed by client-side scripts. This is a key measure in mitigating the risk of XSS attacks.\n  ```go\n  func MyHandler(w http.ResponseWriter, r *http.Request) {\n      session, _ := store.Get(r, \"session-name\")\n      ...\n      session.Options.HttpOnly = true\n      session.Save(r, w)\n  }\n  ```\n- **Do** use Gorilla SecureCookie for encoding and decoding session data securely. This method provides an additional layer of security for session information.\n  ```go\n  var s = sessions.NewCookieStore([]byte(\"your-secret-key\"))\n  ```\n- **Do** implement robust session management with Gorilla Sessions. Proper session management helps prevent attacks related to session fixation and enhances overall session security.\n\n## References\n\n- [Gorilla Sessions Documentation](http://www.gorillatoolkit.org/pkg/sessions)\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","markdown":"## Description\n\nThe absence of the \"HttpOnly\" attribute in cookie settings leaves the cookie vulnerable to being accessed by client-side JavaScript, such as through \"document.cookie\". This vulnerability is particularly concerning for websites susceptible to Cross-Site Scripting (XSS) attacks, as it allows malicious scripts to read the cookie value. Properly configuring the \"HttpOnly\" attribute is a critical step in securing cookies, especially for session management.\n\n## Remediations\n\n- **Do** set the `HttpOnly` attribute to `true` for cookies, especially session cookies, to prevent them from being accessed by client-side scripts. This is a key measure in mitigating the risk of XSS attacks.\n  ```go\n  func MyHandler(w http.ResponseWriter, r *http.Request) {\n      session, _ := store.Get(r, \"session-name\")\n      ...\n      session.Options.HttpOnly = true\n      session.Save(r, w)\n  }\n  ```\n- **Do** use Gorilla SecureCookie for encoding and decoding session data securely. This method provides an additional layer of security for session information.\n  ```go\n  var s = sessions.NewCookieStore([]byte(\"your-secret-key\"))\n  ```\n- **Do** implement robust session management with Gorilla Sessions. Proper session management helps prevent attacks related to session fixation and enhances overall session security.\n\n## References\n\n- [Gorilla Sessions Documentation](http://www.gorillatoolkit.org/pkg/sessions)\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)"}},{"id":"javascript_third_parties_open_telemetry","name":"javascript_third_parties_open_telemetry","shortDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"fullDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n","markdown":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n"}},{"id":"javascript_lang_weak_password_hash_sha1","name":"javascript_lang_weak_password_hash_sha1","shortDescription":{"text":"Usage of weak hashing library on a password (SHA-1)"},"fullDescription":{"text":"Usage of weak hashing library on a password (SHA-1)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing weak hashing algorithms like SHA-1 for password storage compromises security. These algorithms are vulnerable to attacks, making it easier for attackers to crack passwords and access sensitive information.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing passwords. These algorithms are no longer considered secure due to their vulnerability to various attacks.\n- **Do** use a recommended hashing library such as Argon2id for hashing passwords. This approach enhances security by providing a more robust defense against brute-force attacks.\n  ```javascript\n  const argon2 = require(\"argon2\");\n  const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)","markdown":"## Description\n\nUsing weak hashing algorithms like SHA-1 for password storage compromises security. These algorithms are vulnerable to attacks, making it easier for attackers to crack passwords and access sensitive information.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing passwords. These algorithms are no longer considered secure due to their vulnerability to various attacks.\n- **Do** use a recommended hashing library such as Argon2id for hashing passwords. This approach enhances security by providing a more robust defense against brute-force attacks.\n  ```javascript\n  const argon2 = require(\"argon2\");\n  const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)"}},{"id":"ruby_lang_weak_encryption_dsa","name":"ruby_lang_weak_encryption_dsa","shortDescription":{"text":"Usage of weak encryption algorithm (DSA)"},"fullDescription":{"text":"Usage of weak encryption algorithm (DSA)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak encryption algorithm like 1024-bit DSA (Digital Signature Algorithm) compromises data security, making it vulnerable to breaches.\n\n## Remediations\n\n- **Do not** use 1024-bit DSA for encryption. This algorithm is no longer considered secure.\n  ```ruby\n  OpenSSL::PKey::DSA.new(1024) # unsafe\n  ```\n- **Do** use stronger, more secure algorithms such as bcrypt for encrypting data. bcrypt is designed to be a slow hashing algorithm, which makes it harder for attackers to decrypt.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)","markdown":"## Description\n\nUsing a weak encryption algorithm like 1024-bit DSA (Digital Signature Algorithm) compromises data security, making it vulnerable to breaches.\n\n## Remediations\n\n- **Do not** use 1024-bit DSA for encryption. This algorithm is no longer considered secure.\n  ```ruby\n  OpenSSL::PKey::DSA.new(1024) # unsafe\n  ```\n- **Do** use stronger, more secure algorithms such as bcrypt for encrypting data. bcrypt is designed to be a slow hashing algorithm, which makes it harder for attackers to decrypt.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)"}},{"id":"javascript_third_parties_datadog","name":"javascript_third_parties_datadog","shortDescription":{"text":"Leakage of sensitive data to Datadog"},"fullDescription":{"text":"Leakage of sensitive data to Datadog"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    const StatsD = require(\"hot-shots\");\n    const client = new StatsD({\n      port: 8020,\n      globalTags: { env: process.env.NODE_ENV },\n      errorHandler: errorHandler,\n    });\n\n    client.event(user.uuid, \"logged_in\", {});\n  ```\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=mongodb#scrub-sensitive-data-from-your-spans)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    const StatsD = require(\"hot-shots\");\n    const client = new StatsD({\n      port: 8020,\n      globalTags: { env: process.env.NODE_ENV },\n      errorHandler: errorHandler,\n    });\n\n    client.event(user.uuid, \"logged_in\", {});\n  ```\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=mongodb#scrub-sensitive-data-from-your-spans)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n"}},{"id":"python_third_parties_sentry","name":"python_third_parties_sentry","shortDescription":{"text":"Leakage of sensitive data to Sentry"},"fullDescription":{"text":"Leakage of sensitive data to Sentry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/)\n"}},{"id":"php_third_parties_datadog","name":"php_third_parties_datadog","shortDescription":{"text":"Leakage of sensitive data to Datadog"},"fullDescription":{"text":"Leakage of sensitive data to Datadog"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=php#scrub-sensitive-data-from-your-spans)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=php#scrub-sensitive-data-from-your-spans)\n"}},{"id":"ruby_third_parties_open_telemetry","name":"ruby_third_parties_open_telemetry","shortDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"fullDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n","markdown":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n"}},{"id":"ruby_lang_weak_password_encryption_rc4","name":"ruby_lang_weak_password_encryption_rc4","shortDescription":{"text":"Usage of weak encryption algorithm on a password (RC4)"},"fullDescription":{"text":"Usage of weak encryption algorithm on a password (RC4)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak encryption algorithm like RC4 for passwords increases the risk of security breaches. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use encryption algorithms, including RC4, for password storage. Encryption's reversible nature makes it inappropriate for securing passwords.\n\n- **Do** use strong hashing algorithms such as bcrypt or Argon2id for password storage. These algorithms are designed to securely hash passwords, making them much harder to crack.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)","markdown":"## Description\n\nUsing a weak encryption algorithm like RC4 for passwords increases the risk of security breaches. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use encryption algorithms, including RC4, for password storage. Encryption's reversible nature makes it inappropriate for securing passwords.\n\n- **Do** use strong hashing algorithms such as bcrypt or Argon2id for password storage. These algorithms are designed to securely hash passwords, making them much harder to crack.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)"}},{"id":"go_gosec_secrets_secrets","name":"go_gosec_secrets_secrets","shortDescription":{"text":"Usage of hard-coded secret"},"fullDescription":{"text":"Usage of hard-coded secret"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring secrets like keys, passwords, or API tokens in your source code introduces a significant security risk. If your code is exposed or accessed improperly, these secrets can be easily obtained by attackers.\n\n## Remediations\n\n- **Do** implement dynamic secret retrieval. Fetch secrets at runtime from a secure source instead of embedding them in your source files.\n- **Do** use environment variables to provide secrets to your application at runtime, keeping them out of your source code.\n- **Do** utilize secrets management systems. These tools securely store and handle sensitive information away from your codebase.\n- **Do** store secrets in encrypted configuration files. Decrypt these secrets only within the application at runtime.\n- **Do** ensure strict access control for the storage locations of your secrets to prevent unauthorized access.\n- **Do** regularly audit and rotate secrets to reduce risks in case they are compromised.\n\n## References\n\n- [OWASP: Use of Hard-coded Passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP: Secrets Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)","markdown":"## Description\n\nStoring secrets like keys, passwords, or API tokens in your source code introduces a significant security risk. If your code is exposed or accessed improperly, these secrets can be easily obtained by attackers.\n\n## Remediations\n\n- **Do** implement dynamic secret retrieval. Fetch secrets at runtime from a secure source instead of embedding them in your source files.\n- **Do** use environment variables to provide secrets to your application at runtime, keeping them out of your source code.\n- **Do** utilize secrets management systems. These tools securely store and handle sensitive information away from your codebase.\n- **Do** store secrets in encrypted configuration files. Decrypt these secrets only within the application at runtime.\n- **Do** ensure strict access control for the storage locations of your secrets to prevent unauthorized access.\n- **Do** regularly audit and rotate secrets to reduce risks in case they are compromised.\n\n## References\n\n- [OWASP: Use of Hard-coded Passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP: Secrets Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)"}},{"id":"php_lang_exception","name":"php_lang_exception","shortDescription":{"text":"Leakage of sensitive data in exception message"},"fullDescription":{"text":"Leakage of sensitive data in exception message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```php\n  throw new Exception(\"error for {$user-\u003eemail}\"); // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```php\n  throw new Exception(\"error for {$user-\u003euuid}\");\n  ```","markdown":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```php\n  throw new Exception(\"error for {$user-\u003eemail}\"); // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```php\n  throw new Exception(\"error for {$user-\u003euuid}\");\n  ```"}},{"id":"python_django_sql_injection","name":"python_django_sql_injection","shortDescription":{"text":"Unsanitized external input in SQL query"},"fullDescription":{"text":"Unsanitized external input in SQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```python\n  sorting_order = request.GET[\"untrusted\"]\n  query = f\"SELECT id, name FROM products ORDER BY name LIMIT 20 {sorting_order};\"; # unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```python\n  sorting_order = \"DESC\" if request.GET[\"sortingOrder\"] == \"DESC\" else \"ASC\"\n  ```\n- **Do** use parameters for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```python\n  Product.objects.raw(\"SELECT * FROM products WHERE id LIKE ?\", [f\"%{product_id}%\"])\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```python\n  from mysql.connector.conversion import MySQLConverter\n\n  converter = MySQLConverter(connection)\n  ok = converter.escape(request.GET[\"value\"])\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```python\n  sorting_order = request.GET[\"untrusted\"]\n  query = f\"SELECT id, name FROM products ORDER BY name LIMIT 20 {sorting_order};\"; # unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```python\n  sorting_order = \"DESC\" if request.GET[\"sortingOrder\"] == \"DESC\" else \"ASC\"\n  ```\n- **Do** use parameters for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```python\n  Product.objects.raw(\"SELECT * FROM products WHERE id LIKE ?\", [f\"%{product_id}%\"])\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```python\n  from mysql.connector.conversion import MySQLConverter\n\n  converter = MySQLConverter(connection)\n  ok = converter.escape(request.GET[\"value\"])\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)"}},{"id":"php_lang_ui_redress","name":"php_lang_ui_redress","shortDescription":{"text":"Unsanitized user input in UI"},"fullDescription":{"text":"Unsanitized user input in UI"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncorporating unsanitized user input to configure the X-Frame-Options or Content-Security-Policy HTTP headers exposes your application to UI redress attacks, commonly known as clickjacking. This vulnerability can be exploited to deceive users into performing unintended actions on your website.\n\n## Remediations\n\n- **Do** set the X-Frame-Options header to \"DENY\" to prevent your website from being framed by potentially malicious sites.\n  ```php\n  header(\"X-Frame-Options: DENY\");\n  ```\n- **Do** configure the Content-Security-Policy header with \"frame-ancestors 'none'\" to disallow embedding your content in iframes across all sites.\n  ```php\n  header(\"Content-Security-Policy: frame-ancestors 'none'\");\n  ```\n- **Do not** use user input directly to set these headers without proper sanitization and validation.\n\n## References\n\n- [OWASP Clickjacking attack explained](https://owasp.org/www-community/attacks/Clickjacking)\n- [OWASP Clickjacking defense cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html)","markdown":"## Description\n\nIncorporating unsanitized user input to configure the X-Frame-Options or Content-Security-Policy HTTP headers exposes your application to UI redress attacks, commonly known as clickjacking. This vulnerability can be exploited to deceive users into performing unintended actions on your website.\n\n## Remediations\n\n- **Do** set the X-Frame-Options header to \"DENY\" to prevent your website from being framed by potentially malicious sites.\n  ```php\n  header(\"X-Frame-Options: DENY\");\n  ```\n- **Do** configure the Content-Security-Policy header with \"frame-ancestors 'none'\" to disallow embedding your content in iframes across all sites.\n  ```php\n  header(\"Content-Security-Policy: frame-ancestors 'none'\");\n  ```\n- **Do not** use user input directly to set these headers without proper sanitization and validation.\n\n## References\n\n- [OWASP Clickjacking attack explained](https://owasp.org/www-community/attacks/Clickjacking)\n- [OWASP Clickjacking defense cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html)"}},{"id":"go_gosec_subproc_subproc","name":"go_gosec_subproc_subproc","shortDescription":{"text":"Unsanitized external input in code execution"},"fullDescription":{"text":"Unsanitized external input in code execution"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized external input in code execution can result in code injection. This vulnerability arises when external or user-provided data is directly used in the execution flow of a program without proper sanitization, potentially leading to unauthorized actions or access.\n\n## Remediations\n\n- **Do not** pass unsanitized external input directly to execution functions. This practice can introduce code injection vulnerabilities.\n- **Do** implement thorough input validation. Ensure all external input is checked against a strict set of rules to verify it does not contain harmful characters or patterns.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","markdown":"## Description\n\nUnsanitized external input in code execution can result in code injection. This vulnerability arises when external or user-provided data is directly used in the execution flow of a program without proper sanitization, potentially leading to unauthorized actions or access.\n\n## Remediations\n\n- **Do not** pass unsanitized external input directly to execution functions. This practice can introduce code injection vulnerabilities.\n- **Do** implement thorough input validation. Ensure all external input is checked against a strict set of rules to verify it does not contain harmful characters or patterns.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)"}},{"id":"python_lang_xml_external_entity_vulnerability","name":"python_lang_xml_external_entity_vulnerability","shortDescription":{"text":"Usage of vulnerable XML libraries"},"fullDescription":{"text":"Usage of vulnerable XML libraries"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nCertain XML parsers - like xml.sax and pulldom - are known to be vulnerable to XML parsing attacks such as Billion Laughs (exponential entity expansion). These parsers should be avoided. Avoid such vulnerable libraries, and as an additional precaution, use something like defusedxml to further mitigate XML vulnerabilities in Python.   \n\n## Remediations\n\n- **Do not** use XML parsers that are known to be vulnerable to external entity attacks.\n- **Do** exercise caution when parsing XML and always ensure parser input is sufficiently validated and sanitized.\n\n## References\n\n- [Python XML parsers and their vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)\n- [The defusexml package](https://pypi.org/project/defusedxml/)\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python)","markdown":"## Description\n\nCertain XML parsers - like xml.sax and pulldom - are known to be vulnerable to XML parsing attacks such as Billion Laughs (exponential entity expansion). These parsers should be avoided. Avoid such vulnerable libraries, and as an additional precaution, use something like defusedxml to further mitigate XML vulnerabilities in Python.   \n\n## Remediations\n\n- **Do not** use XML parsers that are known to be vulnerable to external entity attacks.\n- **Do** exercise caution when parsing XML and always ensure parser input is sufficiently validated and sanitized.\n\n## References\n\n- [Python XML parsers and their vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)\n- [The defusexml package](https://pypi.org/project/defusedxml/)\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python)"}},{"id":"javascript_lang_file_permissions","name":"javascript_lang_file_permissions","shortDescription":{"text":"Permissive file assignment"},"fullDescription":{"text":"Permissive file assignment"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nPermissive file assignment exposes sensitive information by granting unnecessary read, write, or execute permissions to users without ownership privileges.\n\n## Remediations\n\n- **Do** keep file permissions as restrictive as possible to minimize the risk of unauthorized access. Use the principle of least privilege to only grant permissions that are absolutely necessary for the operation of the application.\n  ```javascript\n  fs.chmod(path, 0o600);\n  ```\n- **Do** prefer assigning file permissions to 'groups' rather than 'other' when you need to extend privileges to users who are not the owners. This approach helps in limiting access to a more controlled set of users.","markdown":"## Description\n\nPermissive file assignment exposes sensitive information by granting unnecessary read, write, or execute permissions to users without ownership privileges.\n\n## Remediations\n\n- **Do** keep file permissions as restrictive as possible to minimize the risk of unauthorized access. Use the principle of least privilege to only grant permissions that are absolutely necessary for the operation of the application.\n  ```javascript\n  fs.chmod(path, 0o600);\n  ```\n- **Do** prefer assigning file permissions to 'groups' rather than 'other' when you need to extend privileges to users who are not the owners. This approach helps in limiting access to a more controlled set of users."}},{"id":"php_lang_cbc_predictable_iv","name":"php_lang_cbc_predictable_iv","shortDescription":{"text":"Usage of CBC (Cipher Block Chaining) with predictable Initialization Vector (IV)"},"fullDescription":{"text":"Usage of CBC (Cipher Block Chaining) with predictable Initialization Vector (IV)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen your application employs Cipher Block Chaining (CBC) mode for encryption, it's crucial to avoid using a predictable Initialization Vector (IV). A predictable IV can make your encryption vulnerable to dictionary attacks, where attackers can guess the encryption key by trying many possibilities.\n\n## Remediations\n\n- **Do not** use a static or predictable Initialization Vector (IV) for encryption. This approach can compromise the security of your encrypted data.\n  ```php\n  openssl_encrypt($data, \"aes-256-cbc\", iv: \"literal-iv\"); // unsafe\n  ```\n- **Do** use a strong, random IV for each encryption operation to enhance security. This practice prevents attackers from predicting the IV and launching dictionary attacks.","markdown":"## Description\n\nWhen your application employs Cipher Block Chaining (CBC) mode for encryption, it's crucial to avoid using a predictable Initialization Vector (IV). A predictable IV can make your encryption vulnerable to dictionary attacks, where attackers can guess the encryption key by trying many possibilities.\n\n## Remediations\n\n- **Do not** use a static or predictable Initialization Vector (IV) for encryption. This approach can compromise the security of your encrypted data.\n  ```php\n  openssl_encrypt($data, \"aes-256-cbc\", iv: \"literal-iv\"); // unsafe\n  ```\n- **Do** use a strong, random IV for each encryption operation to enhance security. This practice prevents attackers from predicting the IV and launching dictionary attacks."}},{"id":"ruby_third_parties_clickhouse","name":"ruby_third_parties_clickhouse","shortDescription":{"text":"Leakage of sensitive data to ClickHouse"},"fullDescription":{"text":"Leakage of sensitive data to ClickHouse"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to a third-party service like ClickHouse is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ClickHouse.\n\n## References\n- [ClickHouse docs](https://clickhouse.com/docs/en/intro/)\n","markdown":"## Description\n\nLeaking sensitive data to a third-party service like ClickHouse is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ClickHouse.\n\n## References\n- [ClickHouse docs](https://clickhouse.com/docs/en/intro/)\n"}},{"id":"javascript_lang_raw_html_using_user_input","name":"javascript_lang_raw_html_using_user_input","shortDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"fullDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"ruby_lang_sql_injection","name":"ruby_lang_sql_injection","shortDescription":{"text":"Unsanitized user input in SQL query"},"fullDescription":{"text":"Unsanitized user input in SQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do** employ bind variables in SQL queries to separate the query structure from the data, effectively preventing SQL injection.\n  ```ruby\n  SQLite3::Database.new(\"data.db\") do |db|\n    db.execute(\"SELECT * FROM users WHERE username = ?\", [unsafe_input])\n  end\n  ```\n\n- **Do not** use raw SQL queries that incorporate unsanitized external input directly. This approach is vulnerable to SQL injection.\n  ```ruby\n  SQLite3::Database.new(\"data.db\") do |db|\n    db.execute(\"SELECT * FROM users WHERE username = '#{unsafe_input}'\")\n  end\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","markdown":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do** employ bind variables in SQL queries to separate the query structure from the data, effectively preventing SQL injection.\n  ```ruby\n  SQLite3::Database.new(\"data.db\") do |db|\n    db.execute(\"SELECT * FROM users WHERE username = ?\", [unsafe_input])\n  end\n  ```\n\n- **Do not** use raw SQL queries that incorporate unsanitized external input directly. This approach is vulnerable to SQL injection.\n  ```ruby\n  SQLite3::Database.new(\"data.db\") do |db|\n    db.execute(\"SELECT * FROM users WHERE username = '#{unsafe_input}'\")\n  end\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n"}},{"id":"javascript_lang_weak_hash_md5","name":"javascript_lang_weak_hash_md5","shortDescription":{"text":"Usage of weak hashing library (MD5)"},"fullDescription":{"text":"Usage of weak hashing library (MD5)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing or security purposes. It is no longer considered secure for cryptographic applications.\n- **Do** opt for stronger hashing algorithms like SHA-256 for enhanced security.\n  ```javascript\n  const crypto = require(\"crypto\");\n\n  const key = \"secret key\";\n  const hash = crypto.createHmac(\"sha256\", key).update(user.password).digest('hex');\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)","markdown":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing or security purposes. It is no longer considered secure for cryptographic applications.\n- **Do** opt for stronger hashing algorithms like SHA-256 for enhanced security.\n  ```javascript\n  const crypto = require(\"crypto\");\n\n  const key = \"secret key\";\n  const hash = crypto.createHmac(\"sha256\", key).update(user.password).digest('hex');\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)"}},{"id":"javascript_lang_unsafe_deserialization","name":"javascript_lang_unsafe_deserialization","shortDescription":{"text":"Unsanitized user input in deserialization method"},"fullDescription":{"text":"Unsanitized user input in deserialization method"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nDeserializing untrusted data is a risky practice. This vulnerability arises when data, especially from external sources like request objects, is deserialized without proper sanitization. Attackers can embed malicious payloads within serialized data, compromising your application's security upon deserialization.\n\n## Remediations\n\n- **Do not** deserialize data that comes directly from untrusted sources. This prevents attackers from injecting malicious payloads that could compromise your application.\n- **Do** opt for data-only and language-neutral serialization formats like JSON or XML for deserializing data. These formats are less susceptible to manipulation by attackers aiming to exploit the deserialization process.\n  ```javascript\n  JSON.parse(req.params);\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)","markdown":"## Description\n\nDeserializing untrusted data is a risky practice. This vulnerability arises when data, especially from external sources like request objects, is deserialized without proper sanitization. Attackers can embed malicious payloads within serialized data, compromising your application's security upon deserialization.\n\n## Remediations\n\n- **Do not** deserialize data that comes directly from untrusted sources. This prevents attackers from injecting malicious payloads that could compromise your application.\n- **Do** opt for data-only and language-neutral serialization formats like JSON or XML for deserializing data. These formats are less susceptible to manipulation by attackers aiming to exploit the deserialization process.\n  ```javascript\n  JSON.parse(req.params);\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)"}},{"id":"ruby_rails_logger","name":"ruby_rails_logger","shortDescription":{"text":"Leakage of sensitive information in logger message"},"fullDescription":{"text":"Leakage of sensitive information in logger message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSensitive information leakage in logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintended exposure of personal or confidential information.\n  ```ruby\n  Rails.logger.info('User is: #{user.email}') # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users or other entities in log messages. This approach maintains privacy while still allowing for effective logging.\n  ```ruby\n  Rails.logger.info('User is: #{user.uuid}')\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","markdown":"## Description\n\nSensitive information leakage in logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintended exposure of personal or confidential information.\n  ```ruby\n  Rails.logger.info('User is: #{user.email}') # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users or other entities in log messages. This approach maintains privacy while still allowing for effective logging.\n  ```ruby\n  Rails.logger.info('User is: #{user.uuid}')\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)"}},{"id":"php_third_parties_clickhouse","name":"php_third_parties_clickhouse","shortDescription":{"text":"Leakage of sensitive data to ClickHouse"},"fullDescription":{"text":"Leakage of sensitive data to ClickHouse"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to a third-party service like ClickHouse is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ClickHouse.\n\n## References\n- [ClickHouse docs](https://clickhouse.com/docs/en/intro/)\n","markdown":"## Description\n\nLeaking sensitive data to a third-party service like ClickHouse is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ClickHouse.\n\n## References\n- [ClickHouse docs](https://clickhouse.com/docs/en/intro/)\n"}},{"id":"go_gosec_crypto_weak_tls_version","name":"go_gosec_crypto_weak_tls_version","shortDescription":{"text":"Usage of deprecated TLS version"},"fullDescription":{"text":"Usage of deprecated TLS version"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nTLS (Transport Layer Security) versions 1.0 and 1.1 have known vulnerabilities and using them introduces security risks to your application. These outdated TLS versions can lead to the interception and compromise of sensitive data during transmission.\n\n## Remediations\n\n- **Do** enforce the use of TLS 1.3 when configuring Go's TLS library. TLS 1.3 offers significant security improvements, helping to protect data from known vulnerabilities present in older versions.\n  ```go\n    cfg := \u0026tls.Config{\n      MinVersion:   tls.VersionTLS13,\n      ...\n    }\n  ```\n- **Do** utilize configurations that support Perfect Forward Secrecy (PFS) with TLS 1.3. PFS enhances security by ensuring that past communications remain secure even if future session keys are compromised.\n- **Do** regularly update your Go version and dependencies to incorporate the latest security fixes and improvements.\n- **Do not** configure your server to accept TLS versions 1.0 or 1.1. Removing these options from your TLS configuration is crucial to prevent downgrade attacks.\n\n## References\n\n- [IETF's Deprecation of TLS 1.0 and 1.1](https://tools.ietf.org/html/rfc8996)\n- [OWASP TLS Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html)\n- [Go `crypto/tls` package documentation](https://pkg.go.dev/crypto/tls)","markdown":"## Description\n\nTLS (Transport Layer Security) versions 1.0 and 1.1 have known vulnerabilities and using them introduces security risks to your application. These outdated TLS versions can lead to the interception and compromise of sensitive data during transmission.\n\n## Remediations\n\n- **Do** enforce the use of TLS 1.3 when configuring Go's TLS library. TLS 1.3 offers significant security improvements, helping to protect data from known vulnerabilities present in older versions.\n  ```go\n    cfg := \u0026tls.Config{\n      MinVersion:   tls.VersionTLS13,\n      ...\n    }\n  ```\n- **Do** utilize configurations that support Perfect Forward Secrecy (PFS) with TLS 1.3. PFS enhances security by ensuring that past communications remain secure even if future session keys are compromised.\n- **Do** regularly update your Go version and dependencies to incorporate the latest security fixes and improvements.\n- **Do not** configure your server to accept TLS versions 1.0 or 1.1. Removing these options from your TLS configuration is crucial to prevent downgrade attacks.\n\n## References\n\n- [IETF's Deprecation of TLS 1.0 and 1.1](https://tools.ietf.org/html/rfc8996)\n- [OWASP TLS Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html)\n- [Go `crypto/tls` package documentation](https://pkg.go.dev/crypto/tls)"}},{"id":"javascript_lang_weak_password_hash_argon2","name":"javascript_lang_weak_password_hash_argon2","shortDescription":{"text":"Usage of weak hashing library on a password (Argon2)"},"fullDescription":{"text":"Usage of weak hashing library on a password (Argon2)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nChoosing a weak hashing algorithm for passwords compromises security. Argon2 has three variants: Argon2i, Argon2d, and Argon2id. Argon2id is the strongest and most recommended for password hashing because of its balanced resistance against both side-channel and GPU attack vectors.\n\n## Remediations\n\n- **Do not** override the Argon2 type when implementing the Argon2 hashing library. Using Argon2id ensures the highest level of security for password storage.\n  ```javascript\n    const argon2 = require(\"argon2\");\n    const hash = await argon2.hash(req.params.password, { type: argon2.argon2i }) // unsafe\n  ```\n- **Do** rely on the default Argon2 type - Argon2id as it is the most secure.\n  ```javascript\n    const argon2 = require(\"argon2\");\n    const hash = await argon2.hash(req.params.password);\n  ```\n\n## References\n\n- [Argon2 type options](https://github.com/ranisalt/node-argon2/wiki/Options#type)\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)","markdown":"## Description\n\nChoosing a weak hashing algorithm for passwords compromises security. Argon2 has three variants: Argon2i, Argon2d, and Argon2id. Argon2id is the strongest and most recommended for password hashing because of its balanced resistance against both side-channel and GPU attack vectors.\n\n## Remediations\n\n- **Do not** override the Argon2 type when implementing the Argon2 hashing library. Using Argon2id ensures the highest level of security for password storage.\n  ```javascript\n    const argon2 = require(\"argon2\");\n    const hash = await argon2.hash(req.params.password, { type: argon2.argon2i }) // unsafe\n  ```\n- **Do** rely on the default Argon2 type - Argon2id as it is the most secure.\n  ```javascript\n    const argon2 = require(\"argon2\");\n    const hash = await argon2.hash(req.params.password);\n  ```\n\n## References\n\n- [Argon2 type options](https://github.com/ranisalt/node-argon2/wiki/Options#type)\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)"}},{"id":"javascript_express_unsafe_deserialization","name":"javascript_express_unsafe_deserialization","shortDescription":{"text":"Unsanitized user input in deserialization method"},"fullDescription":{"text":"Unsanitized user input in deserialization method"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nDeserializing untrusted data exposes your application to security risks. This vulnerability occurs when data, especially from external sources like request objects, is deserialized without proper sanitization. Attackers can embed malicious code or payloads in serialized data, compromising your application's security upon deserialization.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This practice can lead to security vulnerabilities by executing malicious code embedded in the data.\n- **Do** use data-only and language-agnostic serialization formats such as JSON or XML for deserializing data. These formats are less susceptible to manipulation by attackers aiming to exploit the deserialization process.\n  ```javascript\n  JSON.parse(req.params);\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)","markdown":"## Description\n\nDeserializing untrusted data exposes your application to security risks. This vulnerability occurs when data, especially from external sources like request objects, is deserialized without proper sanitization. Attackers can embed malicious code or payloads in serialized data, compromising your application's security upon deserialization.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This practice can lead to security vulnerabilities by executing malicious code embedded in the data.\n- **Do** use data-only and language-agnostic serialization formats such as JSON or XML for deserializing data. These formats are less susceptible to manipulation by attackers aiming to exploit the deserialization process.\n  ```javascript\n  JSON.parse(req.params);\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)"}},{"id":"python_lang_raw_html_using_user_input","name":"python_lang_raw_html_using_user_input","shortDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"fullDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```python\n  html = f\"\u003ch1\u003e{user_input}\u003c/h1\u003e\" # unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```python\n  from html_sanitizer import Sanitizer\n\n  sanitizer = Sanitizer()\n  sanitized_value = sanitizer.sanitize(user_input)\n  html = f\"\u003ch1\u003e{sanitized_value}\u003c/h1\u003e\"\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```python\n  html = f\"\u003ch1\u003e{user_input}\u003c/h1\u003e\" # unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```python\n  from html_sanitizer import Sanitizer\n\n  sanitizer = Sanitizer()\n  sanitized_value = sanitizer.sanitize(user_input)\n  html = f\"\u003ch1\u003e{sanitized_value}\u003c/h1\u003e\"\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"javascript_lang_observable_timing","name":"javascript_lang_observable_timing","shortDescription":{"text":"Observable Timing Discrepancy"},"fullDescription":{"text":"Observable Timing Discrepancy"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)","markdown":"## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)"}},{"id":"ruby_rails_http_verb_confusion","name":"ruby_rails_http_verb_confusion","shortDescription":{"text":"Possible HTTP verb confusion"},"fullDescription":{"text":"Possible HTTP verb confusion"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIn Rails applications, the same actions are often used to respond to both GET and HEAD requests. This can become problematic when actions are designed to handle both GET requests, which should not alter the application state, and requests like POST, which may alter state. Relying on `request.get?` to differentiate request types can inadvertently lead to unexpected changes in the application state.\n\n## Remediations\n\n- **Do** use separate action logic for handling GET and POST requests to prevent unintended state changes.\n- **Do** explicitly check for state-altering HTTP verbs (such as POST) instead of relying on GET to ensure that state changes only occur when intended.\n  ```ruby\n  if request.post?\n    alter_state\n  end\n  ```","markdown":"## Description\n\nIn Rails applications, the same actions are often used to respond to both GET and HEAD requests. This can become problematic when actions are designed to handle both GET requests, which should not alter the application state, and requests like POST, which may alter state. Relying on `request.get?` to differentiate request types can inadvertently lead to unexpected changes in the application state.\n\n## Remediations\n\n- **Do** use separate action logic for handling GET and POST requests to prevent unintended state changes.\n- **Do** explicitly check for state-altering HTTP verbs (such as POST) instead of relying on GET to ensure that state changes only occur when intended.\n  ```ruby\n  if request.post?\n    alter_state\n  end\n  ```"}},{"id":"javascript_lang_weak_password_hash_md5","name":"javascript_lang_weak_password_hash_md5","shortDescription":{"text":"Usage of weak hashing library on a password (MD5)"},"fullDescription":{"text":"Usage of weak hashing library on a password (MD5)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like MD5 for password storage compromises security. MD5 is outdated and vulnerable, making it easier for attackers to crack passwords and gain unauthorized access.\n\n## Remediations\n\n- **Do not** use MD5 for hashing passwords or any sensitive data. It is no longer considered secure.\n- **Do** use a strong and recommended hashing library such as Argon2id for hashing passwords. This method enhances security by making it significantly harder for attackers to crack stored passwords.\n  ```javascript\n  const argon2 = require(\"argon2\");\n  const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)","markdown":"## Description\n\nUsing a weak hashing library like MD5 for password storage compromises security. MD5 is outdated and vulnerable, making it easier for attackers to crack passwords and gain unauthorized access.\n\n## Remediations\n\n- **Do not** use MD5 for hashing passwords or any sensitive data. It is no longer considered secure.\n- **Do** use a strong and recommended hashing library such as Argon2id for hashing passwords. This method enhances security by making it significantly harder for attackers to crack stored passwords.\n  ```javascript\n  const argon2 = require(\"argon2\");\n  const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)"}},{"id":"ruby_lang_insecure_ftp","name":"ruby_lang_insecure_ftp","shortDescription":{"text":"Usage of insecure FTP connection"},"fullDescription":{"text":"Usage of insecure FTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing an insecure FTP connection can expose sensitive data to interception and unauthorized access. This vulnerability occurs when applications that handle sensitive information communicate with FTP servers without secure protocols like SFTP.\n\n## Remediations\n\n- **Do** use the Net::SFTP library for secure FTP connections. This ensures that data transmitted between your application and the FTP server is encrypted and protected from potential eavesdropping.\n  ```ruby\n  require 'net/sftp'\n  Net::SFTP.start('host', 'username', password: ENV['password']) do |sftp|\n    ...\n  end\n  ```\n\n## References\n\n- [net-sftp](https://github.com/net-ssh/net-sftp)","markdown":"## Description\n\nUsing an insecure FTP connection can expose sensitive data to interception and unauthorized access. This vulnerability occurs when applications that handle sensitive information communicate with FTP servers without secure protocols like SFTP.\n\n## Remediations\n\n- **Do** use the Net::SFTP library for secure FTP connections. This ensures that data transmitted between your application and the FTP server is encrypted and protected from potential eavesdropping.\n  ```ruby\n  require 'net/sftp'\n  Net::SFTP.start('host', 'username', password: ENV['password']) do |sftp|\n    ...\n  end\n  ```\n\n## References\n\n- [net-sftp](https://github.com/net-ssh/net-sftp)"}},{"id":"javascript_lang_dynamic_os_command","name":"javascript_lang_dynamic_os_command","shortDescription":{"text":"Unsanitized dynamic input in OS command"},"fullDescription":{"text":"Unsanitized dynamic input in OS command"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncorporating unsanitized dynamic input directly into operating system commands poses a significant security risk. This practice could give attackers the opportunity to execute harmful commands on your system.\n\n## Remediations\n\n- **Do** use static, hardcoded values in command strings - wherever possible - to avoid relying on dynamic data.\n  ```javascript\n  let filePattern = \"*.js\";\n  cp.exec(`cp ${filePattern} destinationFolder`, (error, stdout, stderr) =\u003e {});\n  ```\n- **Do** sanitize any dynamic input used in OS commands to ensure it does not contain malicious code. This can be achieved by validating and escaping the input.\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","markdown":"## Description\n\nIncorporating unsanitized dynamic input directly into operating system commands poses a significant security risk. This practice could give attackers the opportunity to execute harmful commands on your system.\n\n## Remediations\n\n- **Do** use static, hardcoded values in command strings - wherever possible - to avoid relying on dynamic data.\n  ```javascript\n  let filePattern = \"*.js\";\n  cp.exec(`cp ${filePattern} destinationFolder`, (error, stdout, stderr) =\u003e {});\n  ```\n- **Do** sanitize any dynamic input used in OS commands to ensure it does not contain malicious code. This can be achieved by validating and escaping the input.\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)"}},{"id":"python_lang_insecure_allow_origin","name":"python_lang_insecure_allow_origin","shortDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"fullDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** use user input to define the `Access-Control-Allow-Origin` header without validation. This practice can inadvertently grant access to sensitive information.\n  ```python\n  self.send_header('Access-Control-Allow-Origin', external_input) # unsafe\n  ```\n- **Do** validate user input if it must be used to set the `Access-Control-Allow-Origin` header. Ensure that only trusted origins are allowed by implementing a safelist of approved origins.\n  ```python\n    allowed_origins = ['http://www.example.com', 'https://www.secure.example.com']\n    \n    user_origin = input(\"Enter origin: \")\n    \n    if user_origin in allowed_origins:\n      self.send_header('Access-Control-Allow-Origin', user_origin)\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)","markdown":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** use user input to define the `Access-Control-Allow-Origin` header without validation. This practice can inadvertently grant access to sensitive information.\n  ```python\n  self.send_header('Access-Control-Allow-Origin', external_input) # unsafe\n  ```\n- **Do** validate user input if it must be used to set the `Access-Control-Allow-Origin` header. Ensure that only trusted origins are allowed by implementing a safelist of approved origins.\n  ```python\n    allowed_origins = ['http://www.example.com', 'https://www.secure.example.com']\n    \n    user_origin = input(\"Enter origin: \")\n    \n    if user_origin in allowed_origins:\n      self.send_header('Access-Control-Allow-Origin', user_origin)\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)"}},{"id":"python_lang_weak_hash_crc32","name":"python_lang_weak_hash_crc32","shortDescription":{"text":"Usage of weak hashing library (CRC32)"},"fullDescription":{"text":"Usage of weak hashing library (CRC32)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe use of CRC32 for hashing is insecure. CRC32 is designed for error-checking and not for security purposes, making it vulnerable to intentional data tampering.\n\n## Remediations\n\n- **Do not** use CRC32 for hashing when security is a concern. It is not secure against intentional data modifications.\n  ```python\n  myhash = zlib.crc32(data) # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data integrity and security.\n  ```python\n  myhash = hashlib.sha256(data).digest()\n  ```","markdown":"## Description\n\nThe use of CRC32 for hashing is insecure. CRC32 is designed for error-checking and not for security purposes, making it vulnerable to intentional data tampering.\n\n## Remediations\n\n- **Do not** use CRC32 for hashing when security is a concern. It is not secure against intentional data modifications.\n  ```python\n  myhash = zlib.crc32(data) # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data integrity and security.\n  ```python\n  myhash = hashlib.sha256(data).digest()\n  ```"}},{"id":"python_lang_weak_encryption_blowfish","name":"python_lang_weak_encryption_blowfish","shortDescription":{"text":"Usage of weak encryption algorithm (Blowfish)"},"fullDescription":{"text":"Usage of weak encryption algorithm (Blowfish)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour code is at risk due to the use of Blowfish, a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use Blowfish as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```python\n  from Crypto.Cipher import AES\n\n  cipher = AES.new(aes_key, AES.MODE_OCB)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)","markdown":"## Description\n\nYour code is at risk due to the use of Blowfish, a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use Blowfish as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```python\n  from Crypto.Cipher import AES\n\n  cipher = AES.new(aes_key, AES.MODE_OCB)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)"}},{"id":"php_lang_weak_hash_adler32","name":"php_lang_weak_hash_adler32","shortDescription":{"text":"Usage of weak hashing library (Adler-32)"},"fullDescription":{"text":"Usage of weak hashing library (Adler-32)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAdler-32 is a weak hashing algorithm that offers minimal security. It is not suitable for protecting data against intentional modifications.\n\n## Remediations\n\n- **Do not** use Adler-32 for hashing when security is a concern. Its simplicity and speed do not compensate for its lack of protection against data tampering.\n  ```php\n  $myhash = hash('adler32', $input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data integrity and security.\n  ```php\n  $myhash = hash('sha256', $input);\n  ```","markdown":"## Description\n\nAdler-32 is a weak hashing algorithm that offers minimal security. It is not suitable for protecting data against intentional modifications.\n\n## Remediations\n\n- **Do not** use Adler-32 for hashing when security is a concern. Its simplicity and speed do not compensate for its lack of protection against data tampering.\n  ```php\n  $myhash = hash('adler32', $input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data integrity and security.\n  ```php\n  $myhash = hash('sha256', $input);\n  ```"}},{"id":"go_gorilla_insecure_cookie","name":"go_gorilla_insecure_cookie","shortDescription":{"text":"Missing Secure option in cookie configuration"},"fullDescription":{"text":"Missing Secure option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe Secure attribute in cookie configuration is crucial for protecting cookies from unauthorized third-party access. When set to \"true,\" it ensures cookies are only sent over HTTPS, safeguarding the data during transmission.\n\n## Remediations\n\n- **Do** set the Secure flag for cookies if your site uses HTTPS. This action restricts cookies to secure channels, enhancing their security.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      Secure:   true,\n      HttpOnly: true,\n  })\n  ```\n- **Do** use Gorilla SecureCookie for encoding and decoding session data securely. This method provides an additional layer of security for session information.\n  ```go\n  var s = sessions.NewCookieStore([]byte(\"your-secret-key\"))\n  ```\n- **Do** implement robust session management with Gorilla Sessions. Proper session management helps prevent attacks related to session fixation and enhances overall session security.\n\n## References\n\n- [Gorilla Sessions Documentation](http://www.gorillatoolkit.org/pkg/sessions)\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","markdown":"## Description\n\nThe Secure attribute in cookie configuration is crucial for protecting cookies from unauthorized third-party access. When set to \"true,\" it ensures cookies are only sent over HTTPS, safeguarding the data during transmission.\n\n## Remediations\n\n- **Do** set the Secure flag for cookies if your site uses HTTPS. This action restricts cookies to secure channels, enhancing their security.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      Secure:   true,\n      HttpOnly: true,\n  })\n  ```\n- **Do** use Gorilla SecureCookie for encoding and decoding session data securely. This method provides an additional layer of security for session information.\n  ```go\n  var s = sessions.NewCookieStore([]byte(\"your-secret-key\"))\n  ```\n- **Do** implement robust session management with Gorilla Sessions. Proper session management helps prevent attacks related to session fixation and enhances overall session security.\n\n## References\n\n- [Gorilla Sessions Documentation](http://www.gorillatoolkit.org/pkg/sessions)\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)"}},{"id":"php_lang_sql_injection","name":"php_lang_sql_injection","shortDescription":{"text":"Unsanitized external input in SQL query"},"fullDescription":{"text":"Unsanitized external input in SQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```php\n  $sortingOrder = $_GET['untrusted'];\n  $query  = \"SELECT id, name FROM products ORDER BY name LIMIT 20 $sortingOrder;\"; // unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```php\n  $sortingOrder = $_GET['sortingOrder'] === 'DESC' ? 'DESC' : 'ASC';\n  ```\n- **Do** use safe lists to validate external input, if dynamic input is required.\n  ```php\n  private function validatedTableName($table_name)\n  {\n    if in_array($table_name, $ALLOWED_TABLE_NAMES) {\n      return $table_name\n    }\n    // handle invalid table name\n  }\n  ```\n- **Do** use prepared statements for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```php\n  $stmt = $pdo-\u003eprepare(\"SELECT * FROM products WHERE id LIKE ? ORDER BY price {$sortingOrder}\");\n  $stmt-\u003eexecute([\"%{$productId}%\"]);\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```php\n  $ok = mysqli_real_escape_string($conn, $_GET['ok']);\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```php\n  $sortingOrder = $_GET['untrusted'];\n  $query  = \"SELECT id, name FROM products ORDER BY name LIMIT 20 $sortingOrder;\"; // unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```php\n  $sortingOrder = $_GET['sortingOrder'] === 'DESC' ? 'DESC' : 'ASC';\n  ```\n- **Do** use safe lists to validate external input, if dynamic input is required.\n  ```php\n  private function validatedTableName($table_name)\n  {\n    if in_array($table_name, $ALLOWED_TABLE_NAMES) {\n      return $table_name\n    }\n    // handle invalid table name\n  }\n  ```\n- **Do** use prepared statements for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```php\n  $stmt = $pdo-\u003eprepare(\"SELECT * FROM products WHERE id LIKE ? ORDER BY price {$sortingOrder}\");\n  $stmt-\u003eexecute([\"%{$productId}%\"]);\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```php\n  $ok = mysqli_real_escape_string($conn, $_GET['ok']);\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)"}},{"id":"go_third_parties_bigquery","name":"go_third_parties_bigquery","shortDescription":{"text":"Leakage of sensitive data to BigQuery"},"fullDescription":{"text":"Leakage of sensitive data to BigQuery"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools like BigQuery is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like BigQuery.\n\n## References\n- [BigQuery package](https://pkg.go.dev/cloud.google.com/go/bigquery)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools like BigQuery is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like BigQuery.\n\n## References\n- [BigQuery package](https://pkg.go.dev/cloud.google.com/go/bigquery)\n"}},{"id":"php_symfony_insecure_cookie","name":"php_symfony_insecure_cookie","shortDescription":{"text":"Missing Secure option in cookie configuration"},"fullDescription":{"text":"Missing Secure option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure attribute is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` attribute to `true` for cookies to ensure they are only sent over HTTPS.\n  ```php\n  $cookie = Cookie::create($name, $value);\n  $cookie-\u003ewithSecure(true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","markdown":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure attribute is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` attribute to `true` for cookies to ensure they are only sent over HTTPS.\n  ```php\n  $cookie = Cookie::create($name, $value);\n  $cookie-\u003ewithSecure(true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)"}},{"id":"python_lang_weak_hash_sha1","name":"python_lang_weak_hash_sha1","shortDescription":{"text":"Usage of weak hashing library (SHA-1)"},"fullDescription":{"text":"Usage of weak hashing library (SHA-1)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure due to its vulnerability to collision attacks.\n  ```python\n  hashlib.sha1('password').digest() # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```python\n  hashlib.sha256('password').digest()\n  ```","markdown":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure due to its vulnerability to collision attacks.\n  ```python\n  hashlib.sha1('password').digest() # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```python\n  hashlib.sha256('password').digest()\n  ```"}},{"id":"python_lang_weak_encryption_ecb_mode","name":"python_lang_weak_encryption_ecb_mode","shortDescription":{"text":"Usage of ECB cipher mode"},"fullDescription":{"text":"Usage of ECB cipher mode"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```python\n  from Crypto.Cipher import ChaCha20_Poly1305\n\n  cipher = ChaCha20_Poly1305.new(key)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)","markdown":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```python\n  from Crypto.Cipher import ChaCha20_Poly1305\n\n  cipher = ChaCha20_Poly1305.new(key)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)"}},{"id":"python_django_html_magic_method","name":"python_django_html_magic_method","shortDescription":{"text":"Usage of __html__ magic method"},"fullDescription":{"text":"Usage of __html__ magic method"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe Django template engine considers values returned by the `__html__` method as \"safe\" for rendering and therefore no HTML escaping is applied (escaping special characters like ampersands or quotes). Using this method exposes your application to Cross-Site Scripting (XSS) vulnerabilities.  \n\n## Remediations\n\n- **Do not** use the `__html__` magic method\n- **Do** use `format_html` instead to build up HTML fragments. This is more appropriate because it applies escaping to its arguments by default. \n  ```python\n  from django.utils.html import format_html\n\n  format_html(\"{} \u003cb\u003e{}\u003c/b\u003e {}\", mark_safe(some_html), some text)\n  ```\n","markdown":"## Description\n\nThe Django template engine considers values returned by the `__html__` method as \"safe\" for rendering and therefore no HTML escaping is applied (escaping special characters like ampersands or quotes). Using this method exposes your application to Cross-Site Scripting (XSS) vulnerabilities.  \n\n## Remediations\n\n- **Do not** use the `__html__` magic method\n- **Do** use `format_html` instead to build up HTML fragments. This is more appropriate because it applies escaping to its arguments by default. \n  ```python\n  from django.utils.html import format_html\n\n  format_html(\"{} \u003cb\u003e{}\u003c/b\u003e {}\", mark_safe(some_html), some text)\n  ```\n"}},{"id":"javascript_third_parties_segment","name":"javascript_third_parties_segment","shortDescription":{"text":"Leakage of sensitive data to Segment"},"fullDescription":{"text":"Leakage of sensitive data to Segment"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party analytics tools like Segment is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party analytics libraries like Segment.\n\n## References\n- [Segment Node.js docs](https://segment.com/docs/connections/sources/catalog/libraries/server/node/)\n- [Segment JavaScript docs](https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party analytics tools like Segment is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party analytics libraries like Segment.\n\n## References\n- [Segment Node.js docs](https://segment.com/docs/connections/sources/catalog/libraries/server/node/)\n- [Segment JavaScript docs](https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/)\n"}},{"id":"python_django_permissive_allow_origin","name":"python_django_permissive_allow_origin","shortDescription":{"text":"Permissive Access-Control-Allow-Origin configuration"},"fullDescription":{"text":"Permissive Access-Control-Allow-Origin configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nA permissive Access-Control-Allow-Origin configuration can expose your application to security risks. When this header is set to \"*\", it means your application's responses can be accessed by any website, potentially leading to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** set the Access-Control-Allow-Origin header to \"*\". This overly permissive setting can make your application vulnerable to attacks.\n  ```python\n  response.headers['Access-Control-Allow-Origin'] = '*' # unsafe\n  ```\n- **Do** restrict the Access-Control-Allow-Origin header to only allow specific, trusted origins that need access to your application. This minimizes the risk of sensitive data exposure.\n  ```python\n  response.headers['Access-Control-Allow-Origin'] = 'myapp.example.com'\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)","markdown":"## Description\n\nA permissive Access-Control-Allow-Origin configuration can expose your application to security risks. When this header is set to \"*\", it means your application's responses can be accessed by any website, potentially leading to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** set the Access-Control-Allow-Origin header to \"*\". This overly permissive setting can make your application vulnerable to attacks.\n  ```python\n  response.headers['Access-Control-Allow-Origin'] = '*' # unsafe\n  ```\n- **Do** restrict the Access-Control-Allow-Origin header to only allow specific, trusted origins that need access to your application. This minimizes the risk of sensitive data exposure.\n  ```python\n  response.headers['Access-Control-Allow-Origin'] = 'myapp.example.com'\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)"}},{"id":"python_lang_code_injection","name":"python_lang_code_injection","shortDescription":{"text":"Unsanitized external input in code generation"},"fullDescription":{"text":"Unsanitized external input in code generation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAllowing external input (dynamic or user-controlled) to directly influence code generation or scripting functions without proper sanitization can lead to code injection vulnerabilities. This occurs when an attacker is able to insert malicious code into your application, which is then executed, potentially leading to unauthorized actions or data access.\n\n## Remediations\n\n- **Do not** pass unsanitized external input to functions or methods that dynamically execute code.\n- **Do** always validate or sanitize input to ensure it does not contain harmful code before using it in such contexts.\n\n## References\n\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)","markdown":"## Description\n\nAllowing external input (dynamic or user-controlled) to directly influence code generation or scripting functions without proper sanitization can lead to code injection vulnerabilities. This occurs when an attacker is able to insert malicious code into your application, which is then executed, potentially leading to unauthorized actions or data access.\n\n## Remediations\n\n- **Do not** pass unsanitized external input to functions or methods that dynamically execute code.\n- **Do** always validate or sanitize input to ensure it does not contain harmful code before using it in such contexts.\n\n## References\n\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)"}},{"id":"go_lang_insufficiently_random_values","name":"go_lang_insufficiently_random_values","shortDescription":{"text":"Usage of insufficient random value"},"fullDescription":{"text":"Usage of insufficient random value"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is at risk when it uses predictable random values, particularly for security-related functions.\n\n## Remediations\n\n- **Do** use a stronger, more secure library for generating random values. This is crucial for enhancing the security of your application.\n  ```go\n  import (\n    \"crypto/rand\"\n    \"encoding/base64\"\n    \"fmt\"\n  )\n\n  func generateSecureToken(length int) (string, error) {\n    bytes := make([]byte, length)\n    _, err := rand.Read(bytes)\n    if err != nil {\n      return \"\", err\n    }\n\n    // Encode the binary data to a string for easier use\n    return base64.URLEncoding.EncodeToString(bytes), nil\n  }\n  ```\n\n## References\n\n- [Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)","markdown":"## Description\n\nYour application is at risk when it uses predictable random values, particularly for security-related functions.\n\n## Remediations\n\n- **Do** use a stronger, more secure library for generating random values. This is crucial for enhancing the security of your application.\n  ```go\n  import (\n    \"crypto/rand\"\n    \"encoding/base64\"\n    \"fmt\"\n  )\n\n  func generateSecureToken(length int) (string, error) {\n    bytes := make([]byte, length)\n    _, err := rand.Read(bytes)\n    if err != nil {\n      return \"\", err\n    }\n\n    // Encode the binary data to a string for easier use\n    return base64.URLEncoding.EncodeToString(bytes), nil\n  }\n  ```\n\n## References\n\n- [Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"}},{"id":"php_third_parties_sentry","name":"php_third_parties_sentry","shortDescription":{"text":"Leakage of sensitive data to Sentry"},"fullDescription":{"text":"Leakage of sensitive data to Sentry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/platforms/php/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/platforms/php/)\n"}},{"id":"php_lang_websocket_insecure","name":"php_lang_websocket_insecure","shortDescription":{"text":"Usage of insecure websocket connection"},"fullDescription":{"text":"Usage of insecure websocket connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing insecure websocket connections can compromise data security. This vulnerability arises when applications connect to APIs without SSL, making the data susceptible to interception and manipulation.\n\n## Remediations\n\n- **Do not** use unsecured websocket connections. These connections lack encryption, putting data at risk.\n  ```php\n  $client = new Client('ws://insecure-api.com') // unsafe\n  ```\n- **Do** ensure all websocket connections are secured with SSL. This encrypts the data, protecting it from unauthorized access.\n  ```php\n  $client = new Client('wss://secure-api.com')\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nUsing insecure websocket connections can compromise data security. This vulnerability arises when applications connect to APIs without SSL, making the data susceptible to interception and manipulation.\n\n## Remediations\n\n- **Do not** use unsecured websocket connections. These connections lack encryption, putting data at risk.\n  ```php\n  $client = new Client('ws://insecure-api.com') // unsafe\n  ```\n- **Do** ensure all websocket connections are secured with SSL. This encrypts the data, protecting it from unauthorized access.\n  ```php\n  $client = new Client('wss://secure-api.com')\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"python_third_parties_honeybadger","name":"python_third_parties_honeybadger","shortDescription":{"text":"Leakage of sensitive data to Honeybadger"},"fullDescription":{"text":"Leakage of sensitive data to Honeybadger"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/python/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/python/)\n"}},{"id":"php_lang_file_generation","name":"php_lang_file_generation","shortDescription":{"text":"Leakage of sensitive data in dynamic file generation"},"fullDescription":{"text":"Leakage of sensitive data in dynamic file generation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWriting sensitive data to static files, such as logs, backups, or data exports, can lead to unintended data exposure. Be vigilant against instances where your code may inadvertently save sensitive information in a format that could be accessed by unauthorized parties.\n\n## Remediations\n\n- **Do not** write sensitive data directly to static files without considering the security implications. This includes personal user information like emails and addresses.\n  ```php\n  foreach ($users as $user) {\n    fputcsv($csvFile, [$user['email'], $user['address']]); // unsafe\n  }\n  ```\n- **Do** ensure that if writing sensitive data to files is a requirement, such actions are thoroughly documented. Include the file's location and the rationale for storing sensitive data in this manner, adhering to your organization's internal policies.","markdown":"## Description\n\nWriting sensitive data to static files, such as logs, backups, or data exports, can lead to unintended data exposure. Be vigilant against instances where your code may inadvertently save sensitive information in a format that could be accessed by unauthorized parties.\n\n## Remediations\n\n- **Do not** write sensitive data directly to static files without considering the security implications. This includes personal user information like emails and addresses.\n  ```php\n  foreach ($users as $user) {\n    fputcsv($csvFile, [$user['email'], $user['address']]); // unsafe\n  }\n  ```\n- **Do** ensure that if writing sensitive data to files is a requirement, such actions are thoroughly documented. Include the file's location and the rationale for storing sensitive data in this manner, adhering to your organization's internal policies."}},{"id":"python_lang_eval_using_user_input","name":"python_lang_eval_using_user_input","shortDescription":{"text":"Unsanitized user input in 'eval' type function"},"fullDescription":{"text":"Unsanitized user input in 'eval' type function"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nExecuting code with 'eval' or similar functions using unsanitized user input is risky and can lead to code injection vulnerabilities. This happens when external input is used directly in functions that execute code, allowing attackers to run malicious code within your application.\n\n## Remediations\n\n- **Do not** use `eval` or similar code execution functions with unsanitized user input. This can create a significant security risk by allowing code injection.\n- **Do not** use `ast.literal_eval()` with unsanitized user input. While `literal_eval` is often considered to be less risky than `eval` because it evaluates strings as Python data structures only (integers, strings, dictionaries,etc), an attacker could exploit this function with deeply nested structures that could cause excessive memory allocation or stack consumption.\n- **Do** use dynamic hardcoded values instead of direct user input to mitigate the risk of code injection. This approach allows for controlled execution of code without exposing your application to injected malicious code. For example, use a dictionary to store functions, and call these based on user input.\n  ```python\n  def total_with_vat(a, b):\n    total = a + b\n    return total + total * 0.15\n\n  def total_without_vat(a, b):\n    return a + b\n\n  get_total = {\n    \"incl_vat\": total_with_vat,\n    \"excl_vat\": total_without_vat\n  }\n\n  if form.cleaned_data[\"include_vat\"]:\n    total_func = get_total[\"incl_vat\"]\n    total = total_func(a, b)\n\n  # ...\n  ```\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","markdown":"## Description\n\nExecuting code with 'eval' or similar functions using unsanitized user input is risky and can lead to code injection vulnerabilities. This happens when external input is used directly in functions that execute code, allowing attackers to run malicious code within your application.\n\n## Remediations\n\n- **Do not** use `eval` or similar code execution functions with unsanitized user input. This can create a significant security risk by allowing code injection.\n- **Do not** use `ast.literal_eval()` with unsanitized user input. While `literal_eval` is often considered to be less risky than `eval` because it evaluates strings as Python data structures only (integers, strings, dictionaries,etc), an attacker could exploit this function with deeply nested structures that could cause excessive memory allocation or stack consumption.\n- **Do** use dynamic hardcoded values instead of direct user input to mitigate the risk of code injection. This approach allows for controlled execution of code without exposing your application to injected malicious code. For example, use a dictionary to store functions, and call these based on user input.\n  ```python\n  def total_with_vat(a, b):\n    total = a + b\n    return total + total * 0.15\n\n  def total_without_vat(a, b):\n    return a + b\n\n  get_total = {\n    \"incl_vat\": total_with_vat,\n    \"excl_vat\": total_without_vat\n  }\n\n  if form.cleaned_data[\"include_vat\"]:\n    total_func = get_total[\"incl_vat\"]\n    total = total_func(a, b)\n\n  # ...\n  ```\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)"}},{"id":"python_lang_os_command_injection","name":"python_lang_os_command_injection","shortDescription":{"text":"Unsanitized user input in OS command"},"fullDescription":{"text":"Unsanitized user input in OS command"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands. \n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands. Use safe lists or dictionaries if you need to be dynamic. \n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","markdown":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands. \n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands. Use safe lists or dictionaries if you need to be dynamic. \n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)"}},{"id":"ruby_third_parties_appsignal","name":"ruby_third_parties_appsignal","shortDescription":{"text":"Leakage of sensitive data to AppSignal"},"fullDescription":{"text":"Leakage of sensitive data to AppSignal"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like AppSignal is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like AppSignal.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```ruby\n  Appsignal.tag_request(user_id: current_user.uuid)\n  ```\n\n## References\n- [AppSignal Documentation](https://docs.appsignal.com/)\n- [Filtering Application Data in AppSignal](https://docs.appsignal.com/guides/filter-data.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like AppSignal is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like AppSignal.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```ruby\n  Appsignal.tag_request(user_id: current_user.uuid)\n  ```\n\n## References\n- [AppSignal Documentation](https://docs.appsignal.com/)\n- [Filtering Application Data in AppSignal](https://docs.appsignal.com/guides/filter-data.html)\n"}},{"id":"javascript_lang_open_redirect","name":"javascript_lang_open_redirect","shortDescription":{"text":"Unsanitized user input in redirect"},"fullDescription":{"text":"Unsanitized user input in redirect"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input in redirects increases the risk of phishing attacks. This vulnerability occurs when an application dynamically redirects users to a URL that includes user-controlled input without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input in redirect URLs. This can lead to phishing attacks where attackers can redirect users to malicious sites.\n- **Do** validate and sanitize all user input used in redirects. Ensure that the destination URLs are safe and intended. Use a whitelist of allowed URLs if possible.\n- **Do** use server-side redirection methods that do not allow user input to directly influence the destination. This ensures that the application controls the redirect targets.\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized user input in redirects increases the risk of phishing attacks. This vulnerability occurs when an application dynamically redirects users to a URL that includes user-controlled input without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input in redirect URLs. This can lead to phishing attacks where attackers can redirect users to malicious sites.\n- **Do** validate and sanitize all user input used in redirects. Ensure that the destination URLs are safe and intended. Use a whitelist of allowed URLs if possible.\n- **Do** use server-side redirection methods that do not allow user input to directly influence the destination. This ensures that the application controls the redirect targets.\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)"}},{"id":"php_third_parties_rollbar","name":"php_third_parties_rollbar","shortDescription":{"text":"Leakage of sensitive data to RollBar"},"fullDescription":{"text":"Leakage of sensitive data to RollBar"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/php)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/php)\n"}},{"id":"php_third_parties_bugsnag","name":"php_third_parties_bugsnag","shortDescription":{"text":"Leakage of sensitive data to Bugsnag"},"fullDescription":{"text":"Leakage of sensitive data to Bugsnag"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/php/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/php/)\n"}},{"id":"go_lang_weak_password_encryption_sha1","name":"go_lang_weak_password_encryption_sha1","shortDescription":{"text":"Usage of weak hashing library on a password (SHA-1)"},"fullDescription":{"text":"Usage of weak hashing library on a password (SHA-1)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like SHA-1 for passwords increases the risk of data breaches. SHA-1 is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing passwords. This algorithm is no longer considered secure and can make your system vulnerable.\n  ```go\n  sha1.Sum([]byte('password')) // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```go\n  sha256.Sum256([]byte('string'))\n  ```","markdown":"## Description\n\nUsing a weak hashing library like SHA-1 for passwords increases the risk of data breaches. SHA-1 is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing passwords. This algorithm is no longer considered secure and can make your system vulnerable.\n  ```go\n  sha1.Sum([]byte('password')) // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```go\n  sha256.Sum256([]byte('string'))\n  ```"}},{"id":"ruby_lang_path_using_user_input","name":"ruby_lang_path_using_user_input","shortDescription":{"text":"Unsanitized user input in file path"},"fullDescription":{"text":"Unsanitized user input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths or filenames. This can open up your application to path manipulation attacks.\n- **Do** validate and sanitize user input before using it in file paths.\n- **Do** ensure that the constructed path is within the intended directory. For example, restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n- **Do** use file path manipulation methods to verify and constrain the path appropriately.\n  ```ruby\n  path = File.expand_path(\"/home/\" + params[:resource_name])\n  if path.starts_with?(\"/home/\")\n    Dir.chdir(path)\n  else\n    # Handle unexpected path\n  end\n  ```\n\n## References\n\n- [OWASP Path Traversal Attack](https://owasp.org/www-community/attacks/Path_Traversal)","markdown":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths or filenames. This can open up your application to path manipulation attacks.\n- **Do** validate and sanitize user input before using it in file paths.\n- **Do** ensure that the constructed path is within the intended directory. For example, restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n- **Do** use file path manipulation methods to verify and constrain the path appropriately.\n  ```ruby\n  path = File.expand_path(\"/home/\" + params[:resource_name])\n  if path.starts_with?(\"/home/\")\n    Dir.chdir(path)\n  else\n    # Handle unexpected path\n  end\n  ```\n\n## References\n\n- [OWASP Path Traversal Attack](https://owasp.org/www-community/attacks/Path_Traversal)"}},{"id":"go_gosec_http_http_serve","name":"go_gosec_http_http_serve","shortDescription":{"text":"Usage of vulnerable 'serve' function"},"fullDescription":{"text":"Usage of vulnerable 'serve' function"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe default `serve` functions in Go's `net/http` package are susceptible to resource consumption attacks. This vulnerability arises when attackers flood the server with incomplete or persistent connections, depleting its resources and blocking new legitimate connections.\n\n## Remediations\n\n- **Do not** use default serve functions like `http.ListenAndServe` and `http.Serve` in production environments. You cannot set timeouts for these functions, making the server vulnerable to attacks.\n  ```go\n  http.ListenAndServe(\":8080\", nil) // unsafe\n  ```\n- **Do** create a custom `http.Server` object with configured timeouts to safeguard against resource exhaustion. Set `ReadHeaderTimeout`, `ReadTimeout`, `WriteTimeout`, and `IdleTimeout` to appropriate values.\n  ```go\n  myServer := \u0026http.Server{\n      Addr:             \"localhost:8000\",\n      ReadHeaderTimeout: 15 * time.Second,\n      ReadTimeout:      15 * time.Second,\n      WriteTimeout:     10 * time.Second,\n      IdleTimeout:      30 * time.Second,\n  }\n  ```\n- **Do** enforce timeouts on individual requests using `http.TimeoutHandler`. This wrapper ensures that the server does not indefinitely wait for a request to finish, preventing potential denial of service.\n\n## References\n\n- [http.Server Timeouts Documentation](https://pkg.go.dev/net/http#Server)\n- [Guide to Setting Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)\n- [Understanding the Slowloris Attack](https://en.wikipedia.org/wiki/Slowloris_(computer_security))","markdown":"## Description\n\nThe default `serve` functions in Go's `net/http` package are susceptible to resource consumption attacks. This vulnerability arises when attackers flood the server with incomplete or persistent connections, depleting its resources and blocking new legitimate connections.\n\n## Remediations\n\n- **Do not** use default serve functions like `http.ListenAndServe` and `http.Serve` in production environments. You cannot set timeouts for these functions, making the server vulnerable to attacks.\n  ```go\n  http.ListenAndServe(\":8080\", nil) // unsafe\n  ```\n- **Do** create a custom `http.Server` object with configured timeouts to safeguard against resource exhaustion. Set `ReadHeaderTimeout`, `ReadTimeout`, `WriteTimeout`, and `IdleTimeout` to appropriate values.\n  ```go\n  myServer := \u0026http.Server{\n      Addr:             \"localhost:8000\",\n      ReadHeaderTimeout: 15 * time.Second,\n      ReadTimeout:      15 * time.Second,\n      WriteTimeout:     10 * time.Second,\n      IdleTimeout:      30 * time.Second,\n  }\n  ```\n- **Do** enforce timeouts on individual requests using `http.TimeoutHandler`. This wrapper ensures that the server does not indefinitely wait for a request to finish, preventing potential denial of service.\n\n## References\n\n- [http.Server Timeouts Documentation](https://pkg.go.dev/net/http#Server)\n- [Guide to Setting Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)\n- [Understanding the Slowloris Attack](https://en.wikipedia.org/wiki/Slowloris_(computer_security))"}},{"id":"ruby_rails_open_redirect","name":"ruby_rails_open_redirect","shortDescription":{"text":"Unsanitized user input in redirect"},"fullDescription":{"text":"Unsanitized user input in redirect"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n  ```ruby\n  transport_path = case params[:transport_type]\n    when \"planes\"\n      planes_path\n    when \"trains\"\n      trains_path\n    when \"automobiles\"\n      automobiles_path\n    else\n      root_path\n    end\n\n  redirect_to transport_path\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n  ```ruby\n  transport_path = case params[:transport_type]\n    when \"planes\"\n      planes_path\n    when \"trains\"\n      trains_path\n    when \"automobiles\"\n      automobiles_path\n    else\n      root_path\n    end\n\n  redirect_to transport_path\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)"}},{"id":"go_gosec_injection_subproc_injection","name":"go_gosec_injection_subproc_injection","shortDescription":{"text":"Unsanitized dynamic input in OS command"},"fullDescription":{"text":"Unsanitized dynamic input in OS command"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized dynamic or external input in an OS command is a critical security flaw that can enable attackers to execute unauthorized commands on the host operating system, potentially leading to a complete system takeover.\n\n## Remediations\n\n- **Do not** construct OS commands or command-line arguments using externally-supplied information. This practice can introduce command injection vulnerabilities.\n  ```go\n  cmd := exec.Command(\"bash\", \"-c\", \"echo \" + externalInput) // unsafe\n  ```\n- **Do** validate all external input against a strict set of rules to ensure it does not include harmful characters or patterns.\n  ```go\n  if !regexp.MustCompile(`^[a-zA-Z0-9]+$`).MatchString(externalInput) {\n    log.Fatal(\"Invalid input\")\n  }\n  ```\n- **Do** use hardcoded arguments when invoking OS commands to prevent external input from altering the command's execution.\n  ```go\n  cmd := exec.Command(\"ls\", \"-l\", \"/var/log\")\n  ```\n- **Do** prefer native libraries or programming language features over invoking shell commands for enhanced security and efficiency.\n\n## References\n\n- [OWASP OS Command Injection Defense Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized dynamic or external input in an OS command is a critical security flaw that can enable attackers to execute unauthorized commands on the host operating system, potentially leading to a complete system takeover.\n\n## Remediations\n\n- **Do not** construct OS commands or command-line arguments using externally-supplied information. This practice can introduce command injection vulnerabilities.\n  ```go\n  cmd := exec.Command(\"bash\", \"-c\", \"echo \" + externalInput) // unsafe\n  ```\n- **Do** validate all external input against a strict set of rules to ensure it does not include harmful characters or patterns.\n  ```go\n  if !regexp.MustCompile(`^[a-zA-Z0-9]+$`).MatchString(externalInput) {\n    log.Fatal(\"Invalid input\")\n  }\n  ```\n- **Do** use hardcoded arguments when invoking OS commands to prevent external input from altering the command's execution.\n  ```go\n  cmd := exec.Command(\"ls\", \"-l\", \"/var/log\")\n  ```\n- **Do** prefer native libraries or programming language features over invoking shell commands for enhanced security and efficiency.\n\n## References\n\n- [OWASP OS Command Injection Defense Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)"}},{"id":"python_lang_reflection_using_user_input","name":"python_lang_reflection_using_user_input","shortDescription":{"text":"Usage of external input in code reflection"},"fullDescription":{"text":"Usage of external input in code reflection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing external input for dynamic class loading or code execution through reflection poses a significant security risk. This practice can be exploited by attackers to load harmful classes or execute malicious methods, potentially resulting in remote code execution and other severe security threats.\n\n## Remediations\n\n- **Do not** - wherever possible - use external input with code reflection. Avoiding this practice altogether significantly lowers the risk of executing unauthorized or malicious code.\n- **Do** limit the allowed class names and method names to a predefined safelist. This approach restricts the scope of classes and methods that can be dynamically accessed, reducing the risk of unauthorized actions.\n- **Do** sanitize external input by removing special and unexpected characters that could facilitate code injection attacks. Characters such as single or double quotation marks and backslashes are particularly risky and should be filtered out.\n","markdown":"## Description\n\nUsing external input for dynamic class loading or code execution through reflection poses a significant security risk. This practice can be exploited by attackers to load harmful classes or execute malicious methods, potentially resulting in remote code execution and other severe security threats.\n\n## Remediations\n\n- **Do not** - wherever possible - use external input with code reflection. Avoiding this practice altogether significantly lowers the risk of executing unauthorized or malicious code.\n- **Do** limit the allowed class names and method names to a predefined safelist. This approach restricts the scope of classes and methods that can be dynamically accessed, reducing the risk of unauthorized actions.\n- **Do** sanitize external input by removing special and unexpected characters that could facilitate code injection attacks. Characters such as single or double quotation marks and backslashes are particularly risky and should be filtered out.\n"}},{"id":"ruby_rails_sql_injection","name":"ruby_rails_sql_injection","shortDescription":{"text":"Unsanitized external input in SQL query"},"fullDescription":{"text":"Unsanitized external input in SQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** use raw SQL queries that incorporate unsanitized external input directly. This approach is vulnerable to SQL injection.\n  ```ruby\n  User.where(\"user.email = #{params[:email]}\") # unsafe\n  ```\n- **Do** utilize the ActiveRecord API for constructing SQL queries to automatically handle input sanitization.\n  ```ruby\n  User.where(email: params[:email])\n  ```\n- **Do** employ bind variables in SQL queries to separate the query structure from the data, effectively preventing SQL injection.\n  ```ruby\n  User.where(\"user.email = ?\", [params[:email]])\n  ```\n- **Do** manually sanitize input values when constructing SQL queries to ensure that any potentially harmful characters are neutralized.\n  ```ruby\n  User.where(sanitize_sql([\"user.email = ?\", params[:email]]))\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)","markdown":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** use raw SQL queries that incorporate unsanitized external input directly. This approach is vulnerable to SQL injection.\n  ```ruby\n  User.where(\"user.email = #{params[:email]}\") # unsafe\n  ```\n- **Do** utilize the ActiveRecord API for constructing SQL queries to automatically handle input sanitization.\n  ```ruby\n  User.where(email: params[:email])\n  ```\n- **Do** employ bind variables in SQL queries to separate the query structure from the data, effectively preventing SQL injection.\n  ```ruby\n  User.where(\"user.email = ?\", [params[:email]])\n  ```\n- **Do** manually sanitize input values when constructing SQL queries to ensure that any potentially harmful characters are neutralized.\n  ```ruby\n  User.where(sanitize_sql([\"user.email = ?\", params[:email]]))\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)"}},{"id":"php_lang_eval_using_user_input","name":"php_lang_eval_using_user_input","shortDescription":{"text":"Unsanitized user input in 'eval' type function"},"fullDescription":{"text":"Unsanitized user input in 'eval' type function"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nExecuting code with 'eval' or similar functions using unsanitized user input is risky and can lead to code injection vulnerabilities. This happens when external input is used directly in functions that execute code, allowing attackers to run malicious code within your application.\n\n## Remediations\n\n- **Do not** use 'eval' or similar functions with user-supplied data. This can open your application to severe security risks.\n  ```php\n  eval(\"echo \" . $_GET[\"untrusted\"]);  // unsafe\n  ```\n- **Do** validate and sanitize all user input before using it in your code. Ensure that the input does not contain malicious code or commands.\n- **Do** use safer alternatives to 'eval' for dynamic code execution. Consider using functions that limit the scope and capabilities of executed code to reduce risk.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","markdown":"## Description\n\nExecuting code with 'eval' or similar functions using unsanitized user input is risky and can lead to code injection vulnerabilities. This happens when external input is used directly in functions that execute code, allowing attackers to run malicious code within your application.\n\n## Remediations\n\n- **Do not** use 'eval' or similar functions with user-supplied data. This can open your application to severe security risks.\n  ```php\n  eval(\"echo \" . $_GET[\"untrusted\"]);  // unsafe\n  ```\n- **Do** validate and sanitize all user input before using it in your code. Ensure that the input does not contain malicious code or commands.\n- **Do** use safer alternatives to 'eval' for dynamic code execution. Consider using functions that limit the scope and capabilities of executed code to reduce risk.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)"}},{"id":"go_lang_information_leakage","name":"go_lang_information_leakage","shortDescription":{"text":"Leakage of sensitive information in exception message"},"fullDescription":{"text":"Leakage of sensitive information in exception message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive information in exception messages can compromise your application's security. This occurs when exception messages reveal too much about your application's internal workings or user-specific data, potentially aiding attackers in crafting targeted attacks such as path traversal.\n\n## Remediations\n\n- **Do not** include sensitive information in exception messages. This prevents accidental exposure of application details or user data.\n- **Do** limit the information logged in error messages to only what is necessary for troubleshooting. This minimizes the risk of information leakage.\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","markdown":"## Description\n\nLeakage of sensitive information in exception messages can compromise your application's security. This occurs when exception messages reveal too much about your application's internal workings or user-specific data, potentially aiding attackers in crafting targeted attacks such as path traversal.\n\n## Remediations\n\n- **Do not** include sensitive information in exception messages. This prevents accidental exposure of application details or user data.\n- **Do** limit the information logged in error messages to only what is necessary for troubleshooting. This minimizes the risk of information leakage.\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)"}},{"id":"php_third_parties_honeybadger","name":"php_third_parties_honeybadger","shortDescription":{"text":"Leakage of sensitive data to Honeybadger"},"fullDescription":{"text":"Leakage of sensitive data to Honeybadger"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/php/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/php/)\n"}},{"id":"go_gosec_injection_ssrf_injection","name":"go_gosec_injection_ssrf_injection","shortDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"fullDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in HTTP requests puts your application at risk of Server-Side Request Forgery (SSRF). This is a security vulnerability that occurs when a server-side application makes HTTP requests to arbitrary URLs controlled by the user. SSRF can be exploited by attackers to target internal systems behind firewalls that are otherwise inaccessible from the external network, by tricking the server into making requests to these systems.\n\n## Remediations\n\n- **Do not** use direct user input to construct URLs for backend requests. If user input is necessary, ensure it is strictly validated or sanitized to prevent malicious manipulation.\n- **Do** use a safelist or predefined mapping when incorporating user input in URLs. This ensures that your application only redirects users to safe and intended destinations.\n  ```go\n  safeURLs := map[string]string{\n      \"key1\": \"https://safe-domain1.com\",\n      \"key2\": \"https://safe-domain2.com\",\n  }\n  requestedKey := getUserInput()\n  if url, ok := safeURLs[requestedKey]; ok {\n      // continue with request\n  } else {\n      log.Fatal(\"Requested URL is not allowed\")\n  }\n  ```\n- **Do** implement IP safelists and blocklists to customize and block specific IP ranges, especially those that are private, loopback, or otherwise non-routable.\n- **Do** use network-level security measures. If your HTTP client does not support IP range blocking, run it with restricted system permissions or within a network environment where firewall rules can effectively block requests to dangerous addresses.\n- **Do** consider using a secure HTTP proxy to route all backend HTTP requests. This proxy can serve as a filter to block requests to potentially harmful addresses, acting as an additional layer of security.\n\n## References\n\n- [OWASP SSRF Prevention Cheat Sheet](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)","markdown":"## Description\n\nIncluding unsanitized user input in HTTP requests puts your application at risk of Server-Side Request Forgery (SSRF). This is a security vulnerability that occurs when a server-side application makes HTTP requests to arbitrary URLs controlled by the user. SSRF can be exploited by attackers to target internal systems behind firewalls that are otherwise inaccessible from the external network, by tricking the server into making requests to these systems.\n\n## Remediations\n\n- **Do not** use direct user input to construct URLs for backend requests. If user input is necessary, ensure it is strictly validated or sanitized to prevent malicious manipulation.\n- **Do** use a safelist or predefined mapping when incorporating user input in URLs. This ensures that your application only redirects users to safe and intended destinations.\n  ```go\n  safeURLs := map[string]string{\n      \"key1\": \"https://safe-domain1.com\",\n      \"key2\": \"https://safe-domain2.com\",\n  }\n  requestedKey := getUserInput()\n  if url, ok := safeURLs[requestedKey]; ok {\n      // continue with request\n  } else {\n      log.Fatal(\"Requested URL is not allowed\")\n  }\n  ```\n- **Do** implement IP safelists and blocklists to customize and block specific IP ranges, especially those that are private, loopback, or otherwise non-routable.\n- **Do** use network-level security measures. If your HTTP client does not support IP range blocking, run it with restricted system permissions or within a network environment where firewall rules can effectively block requests to dangerous addresses.\n- **Do** consider using a secure HTTP proxy to route all backend HTTP requests. This proxy can serve as a filter to block requests to potentially harmful addresses, acting as an additional layer of security.\n\n## References\n\n- [OWASP SSRF Prevention Cheat Sheet](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)"}},{"id":"python_third_parties_clickhouse","name":"python_third_parties_clickhouse","shortDescription":{"text":"Leakage of sensitive data to ClickHouse"},"fullDescription":{"text":"Leakage of sensitive data to ClickHouse"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to a third-party service like ClickHouse is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ClickHouse.\n\n## References\n- [ClickHouse docs](https://clickhouse.com/docs/en/intro/)\n","markdown":"## Description\n\nLeaking sensitive data to a third-party service like ClickHouse is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ClickHouse.\n\n## References\n- [ClickHouse docs](https://clickhouse.com/docs/en/intro/)\n"}},{"id":"python_lang_regex_using_user_input","name":"python_lang_regex_using_user_input","shortDescription":{"text":"Unsanitized user input in regular expression"},"fullDescription":{"text":"Unsanitized user input in regular expression"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** construct regular expressions directly from user inputs. This can make your application susceptible to ReDoS attacks.\n- **Do** consider using the `regex` module for regular expressions in Python. Unlike the `re` module, `regex` allows you to set a timeout for regular expressions to prevent excessive CPU usage. This can help mitigate the impact of potential ReDoS attacks.\n  ```python\n  regex.match(pattern, string, timeout=0.1)\n  ```\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","markdown":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** construct regular expressions directly from user inputs. This can make your application susceptible to ReDoS attacks.\n- **Do** consider using the `regex` module for regular expressions in Python. Unlike the `re` module, `regex` allows you to set a timeout for regular expressions to prevent excessive CPU usage. This can help mitigate the impact of potential ReDoS attacks.\n  ```python\n  regex.match(pattern, string, timeout=0.1)\n  ```\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)"}},{"id":"php_third_parties_airbrake","name":"php_third_parties_airbrake","shortDescription":{"text":"Leakage of sensitive data to Airbrake"},"fullDescription":{"text":"Leakage of sensitive data to Airbrake"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/)\n"}},{"id":"ruby_lang_xml_external_entity_vulnerability","name":"ruby_lang_xml_external_entity_vulnerability","shortDescription":{"text":"Unsanitized input in XML External Entity"},"fullDescription":{"text":"Unsanitized input in XML External Entity"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\nAvoid parsing untrusted data as XML. Such data could include URIs that resolve to resources that are outside of the current context, leading to XML External Entity (XXE) injection.\n\n## Remediations\n\n- **Do** disable external entity expansion in REXML before parsing any XML from untrusted sources. Set the REXML::Security.entity_expansion_text_limit to 0.\n  ```ruby\n  REXML::Security.entity_expansion_text_limit = 0 # prevent REXML from expanding any text entities\n\n  def parse_xml(raw_xml)\n    begin\n      return REXML::Document.new(raw_xml)\n    rescue REXML::ParseException =\u003e e\n      # handle error\n    end\n  end\n  ```\n- **Do not** allow REXML to expand text entities from untrusted input. This is the primary mechanism attackers use to perform XXE attacks. Avoid parsing XML without first disabling entity expansion.\n  ```ruby\n  def unsafe_parse_xml(raw_xml)\n    return REXML::Document.new(raw_xml) # unsafe\n  end\n  ```\n\n## References\n\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n","markdown":"## Description\nAvoid parsing untrusted data as XML. Such data could include URIs that resolve to resources that are outside of the current context, leading to XML External Entity (XXE) injection.\n\n## Remediations\n\n- **Do** disable external entity expansion in REXML before parsing any XML from untrusted sources. Set the REXML::Security.entity_expansion_text_limit to 0.\n  ```ruby\n  REXML::Security.entity_expansion_text_limit = 0 # prevent REXML from expanding any text entities\n\n  def parse_xml(raw_xml)\n    begin\n      return REXML::Document.new(raw_xml)\n    rescue REXML::ParseException =\u003e e\n      # handle error\n    end\n  end\n  ```\n- **Do not** allow REXML to expand text entities from untrusted input. This is the primary mechanism attackers use to perform XXE attacks. Avoid parsing XML without first disabling entity expansion.\n  ```ruby\n  def unsafe_parse_xml(raw_xml)\n    return REXML::Document.new(raw_xml) # unsafe\n  end\n  ```\n\n## References\n\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n"}},{"id":"python_lang_manual_html_sanitization","name":"python_lang_manual_html_sanitization","shortDescription":{"text":"Usage of manual HTML sanitization (XSS)"},"fullDescription":{"text":"Usage of manual HTML sanitization (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nManually sanitizing HTML is prone to mistakes and can lead to Cross-Site Scripting (XSS) vulnerabilities. This occurs when user input is not properly sanitized, allowing attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** manually escape HTML to sanitize user input. This method is unreliable and can easily miss certain exploits.\n  ```python\n  sanitized_value = user_input.replace('\u003c', '\u0026lt;').replace('\u003e', '\u0026gt;'); # unsafe\n  html = f\"\u003cstrong\u003e{sanitized_value}\u003c/strong\u003e\"\n  ```\n- **Do** use a trusted HTML sanitization library to handle user input safely. Libraries designed for sanitization are more reliable as they cover a wide range of XSS attack vectors.\n  ```python\n  from html_sanitizer import Sanitizer\n\n  sanitizer = Sanitizer()\n  sanitized_value = sanitizer.sanitize(user_input)\n\n  html = f\"\u003cstrong\u003e{sanitized_value}\u003c/strong\u003e\"\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","markdown":"## Description\n\nManually sanitizing HTML is prone to mistakes and can lead to Cross-Site Scripting (XSS) vulnerabilities. This occurs when user input is not properly sanitized, allowing attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** manually escape HTML to sanitize user input. This method is unreliable and can easily miss certain exploits.\n  ```python\n  sanitized_value = user_input.replace('\u003c', '\u0026lt;').replace('\u003e', '\u0026gt;'); # unsafe\n  html = f\"\u003cstrong\u003e{sanitized_value}\u003c/strong\u003e\"\n  ```\n- **Do** use a trusted HTML sanitization library to handle user input safely. Libraries designed for sanitization are more reliable as they cover a wide range of XSS attack vectors.\n  ```python\n  from html_sanitizer import Sanitizer\n\n  sanitizer = Sanitizer()\n  sanitized_value = sanitizer.sanitize(user_input)\n\n  html = f\"\u003cstrong\u003e{sanitized_value}\u003c/strong\u003e\"\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)"}},{"id":"go_lang_logger","name":"go_lang_logger","shortDescription":{"text":"Leakage of sensitive information in logger message"},"fullDescription":{"text":"Leakage of sensitive information in logger message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive information in logger messages can compromise data security. This vulnerability arises when sensitive data is included in log messages, potentially leading to unauthorized access.\n\n## Remediations\n\n- **Do not** include sensitive data, such as email addresses, in logger messages. This can inadvertently expose personal information.\n  ```go\n  logger.info(f\"User is: '{user.email}'\") // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers, like user UUIDs, in logger messages to maintain user privacy and data security.\n  ```go\n  logger.info(f\"User is: '{user.uuid}'\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","markdown":"## Description\n\nLeakage of sensitive information in logger messages can compromise data security. This vulnerability arises when sensitive data is included in log messages, potentially leading to unauthorized access.\n\n## Remediations\n\n- **Do not** include sensitive data, such as email addresses, in logger messages. This can inadvertently expose personal information.\n  ```go\n  logger.info(f\"User is: '{user.email}'\") // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers, like user UUIDs, in logger messages to maintain user privacy and data security.\n  ```go\n  logger.info(f\"User is: '{user.uuid}'\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)"}},{"id":"python_django_insecure_cookie_settings","name":"python_django_insecure_cookie_settings","shortDescription":{"text":"Usage of insecure cookie settings"},"fullDescription":{"text":"Usage of insecure cookie settings"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing insecure cookie settings when configuring your application poses a significant security risk. If session (or CSRF) cookies are transmitted over an unencrypted HTTP connection, an attacker could capture a cookie and use this to hijack a user's session, thereby gaining unauthorized access to - potentially sensitive - data and resources. \n\nTo prevent this vulnerability, always enable to secure attributes for session and CSRF cookies in your settings.py file. This is especially important for production environments.  \n\n## Remediations\n\n- **Do not** disable secure session cookies or CSRF cookies in production environments\n```python\n  SESSION_COOKIE_SECURE = False # unsafe\n  CSRF_COOKIE_SECURE = False # unsafe\n```\n","markdown":"## Description\n\nUsing insecure cookie settings when configuring your application poses a significant security risk. If session (or CSRF) cookies are transmitted over an unencrypted HTTP connection, an attacker could capture a cookie and use this to hijack a user's session, thereby gaining unauthorized access to - potentially sensitive - data and resources. \n\nTo prevent this vulnerability, always enable to secure attributes for session and CSRF cookies in your settings.py file. This is especially important for production environments.  \n\n## Remediations\n\n- **Do not** disable secure session cookies or CSRF cookies in production environments\n```python\n  SESSION_COOKIE_SECURE = False # unsafe\n  CSRF_COOKIE_SECURE = False # unsafe\n```\n"}},{"id":"python_lang_jwt_verification_bypass","name":"python_lang_jwt_verification_bypass","shortDescription":{"text":"Missing signature verification of JWT"},"fullDescription":{"text":"Missing signature verification of JWT"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nFailing to verify the signature of JSON Web Tokens (JWTs) compromises the security of an application. Signature verification is crucial for confirming the authenticity and integrity of JWTs. Without this verification, your application is open to token forgery and replay attacks, where attackers can manipulate or reuse tokens to gain unauthorized access.\n\n## Remediations\n\n- **Do not** disable verification of the token's signature, because this leaves a significant security gap.\n  ```python\n  jwt.decode(token, options={\"verify_signature\": False}) # unsafe\n  ```","markdown":"## Description\n\nFailing to verify the signature of JSON Web Tokens (JWTs) compromises the security of an application. Signature verification is crucial for confirming the authenticity and integrity of JWTs. Without this verification, your application is open to token forgery and replay attacks, where attackers can manipulate or reuse tokens to gain unauthorized access.\n\n## Remediations\n\n- **Do not** disable verification of the token's signature, because this leaves a significant security gap.\n  ```python\n  jwt.decode(token, options={\"verify_signature\": False}) # unsafe\n  ```"}},{"id":"php_lang_format_string_using_user_input","name":"php_lang_format_string_using_user_input","shortDescription":{"text":"Unsanitized user input in format string"},"fullDescription":{"text":"Unsanitized user input in format string"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in format string can lead to security vulnerabilities. This issue arises when user input is directly incorporated into a format string, enabling attackers to manipulate the output through format specifiers, resulting in misleading or fabricated messages.\n\n## Remediations\n\n- **Do not** include user input directly in format strings. This approach can be exploited by attackers to manipulate the output.\n  ```php\n  sprintf(\"The value was ${_GET[\"value\"]}\"); // unsafe\n  ```\n- **Do** use a literal format string with user input as separate arguments. This method helps prevent attackers from influencing the format of the output.\n  ```php\n  sprintf(\"The value was %s\", $_GET[\"value\"]);\n  ```\n\n## References\n\n- [OWASP Testing for Format String Injection](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection)","markdown":"## Description\n\nUnsanitized user input in format string can lead to security vulnerabilities. This issue arises when user input is directly incorporated into a format string, enabling attackers to manipulate the output through format specifiers, resulting in misleading or fabricated messages.\n\n## Remediations\n\n- **Do not** include user input directly in format strings. This approach can be exploited by attackers to manipulate the output.\n  ```php\n  sprintf(\"The value was ${_GET[\"value\"]}\"); // unsafe\n  ```\n- **Do** use a literal format string with user input as separate arguments. This method helps prevent attackers from influencing the format of the output.\n  ```php\n  sprintf(\"The value was %s\", $_GET[\"value\"]);\n  ```\n\n## References\n\n- [OWASP Testing for Format String Injection](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection)"}},{"id":"php_lang_weak_password_hash_sha1","name":"php_lang_weak_password_hash_sha1","shortDescription":{"text":"Usage of weak hashing library on a password (SHA-1)"},"fullDescription":{"text":"Usage of weak hashing library on a password (SHA-1)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like SHA-1 for passwords increases the risk of data breaches. SHA-1 is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing passwords. This algorithm is no longer considered secure and can make your system vulnerable to attacks.\n  ```php\n  $encrypted_password = sha1($user-\u003epassword); // unsafe\n  ```\n- **Do** use stronger, more secure hashing functions like those provided by `password_hash` in PHP for storing passwords. This function is designed to use a strong hash algorithm that is currently considered secure.\n  ```php\n  $encrypted_password = password_hash($user-\u003epassword, PASSWORD_DEFAULT);\n  ```","markdown":"## Description\n\nUsing a weak hashing library like SHA-1 for passwords increases the risk of data breaches. SHA-1 is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing passwords. This algorithm is no longer considered secure and can make your system vulnerable to attacks.\n  ```php\n  $encrypted_password = sha1($user-\u003epassword); // unsafe\n  ```\n- **Do** use stronger, more secure hashing functions like those provided by `password_hash` in PHP for storing passwords. This function is designed to use a strong hash algorithm that is currently considered secure.\n  ```php\n  $encrypted_password = password_hash($user-\u003epassword, PASSWORD_DEFAULT);\n  ```"}},{"id":"php_third_parties_scout_apm","name":"php_third_parties_scout_apm","shortDescription":{"text":"Leakage of sensitive data to Scout APM"},"fullDescription":{"text":"Leakage of sensitive data to Scout APM"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Scout APM is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Scout APM.\n\n## References\n- [Scout APM docs](https://scoutapm.com/docs/php)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Scout APM is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Scout APM.\n\n## References\n- [Scout APM docs](https://scoutapm.com/docs/php)\n"}},{"id":"python_lang_insecure_websocket","name":"python_lang_insecure_websocket","shortDescription":{"text":"Usage of insecure websocket connection"},"fullDescription":{"text":"Usage of insecure websocket connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing insecure websocket connections can compromise data security. This vulnerability arises when applications connect to APIs without SSL, making the data susceptible to interception and manipulation.\n\n## Remediations\n\n- **Do not** use unsecured websocket connections. These connections lack encryption, putting data at risk.\n  ```python\n  websockets.connect(\"ws://insecure-api.com\") # unsafe\n  ```\n- **Do** ensure all websocket connections are secured with SSL. This encrypts the data, protecting it from unauthorized access.\n  ```python\n  websockets.connect(\"wss://secure-api.com\")\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nUsing insecure websocket connections can compromise data security. This vulnerability arises when applications connect to APIs without SSL, making the data susceptible to interception and manipulation.\n\n## Remediations\n\n- **Do not** use unsecured websocket connections. These connections lack encryption, putting data at risk.\n  ```python\n  websockets.connect(\"ws://insecure-api.com\") # unsafe\n  ```\n- **Do** ensure all websocket connections are secured with SSL. This encrypts the data, protecting it from unauthorized access.\n  ```python\n  websockets.connect(\"wss://secure-api.com\")\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"ruby_lang_weak_hash_dss","name":"ruby_lang_weak_hash_dss","shortDescription":{"text":"Usage of weak hashing library (DSS)"},"fullDescription":{"text":"Usage of weak hashing library (DSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like DSS increases the risk of data breaches. DSS has known security flaws and vulnerabilities, and its use is no longer recommended.\n\n## Remediations\n\n- **Do not** use DSS for hashing as it is considered a weak algorithm. This can compromise data security.\n  ```ruby\n  OpenSSL::Digest.new(\"dss\").digest(\"weak\") # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like bcrypt to enhance security.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)","markdown":"## Description\n\nUsing a weak hashing library like DSS increases the risk of data breaches. DSS has known security flaws and vulnerabilities, and its use is no longer recommended.\n\n## Remediations\n\n- **Do not** use DSS for hashing as it is considered a weak algorithm. This can compromise data security.\n  ```ruby\n  OpenSSL::Digest.new(\"dss\").digest(\"weak\") # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like bcrypt to enhance security.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)"}},{"id":"javascript_lang_regex_using_user_input","name":"javascript_lang_regex_using_user_input","shortDescription":{"text":"Unsanitized user input in regular expression"},"fullDescription":{"text":"Unsanitized user input in regular expression"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** use user-supplied data directly in regular expressions. This can prevent attackers from exploiting the ReDoS vulnerability to cause a denial of service.\n  ```javascript\n  new RegExp(`abc${req.params.untrusted}`, 'i'); // unsafe\n  ```\n- **Do** sanitize or validate all user input if it must be used in a regular expression, to ensure it does not contain patterns that can lead to ReDoS attacks.\n- **Do** consider implementing timeouts or other limitations on regex operations to mitigate potential ReDoS attacks when user input is involved.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","markdown":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** use user-supplied data directly in regular expressions. This can prevent attackers from exploiting the ReDoS vulnerability to cause a denial of service.\n  ```javascript\n  new RegExp(`abc${req.params.untrusted}`, 'i'); // unsafe\n  ```\n- **Do** sanitize or validate all user input if it must be used in a regular expression, to ensure it does not contain patterns that can lead to ReDoS attacks.\n- **Do** consider implementing timeouts or other limitations on regex operations to mitigate potential ReDoS attacks when user input is involved.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)"}},{"id":"php_symfony_permissive_allow_origin","name":"php_symfony_permissive_allow_origin","shortDescription":{"text":"Permissive Access-Control-Allow-Origin configuration"},"fullDescription":{"text":"Permissive Access-Control-Allow-Origin configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nA permissive Access-Control-Allow-Origin configuration can expose your application to security risks. When this header is set to \"*\", it means your application's responses can be accessed by any website, potentially leading to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** set the Access-Control-Allow-Origin header to \"*\". This overly permissive setting can make your application vulnerable to attacks.\n  ```php\n  $response = new Response();\n  $response-\u003eheaders-\u003eset('Access-Control-Allow-Origin', \"*\"); // unsafe\n  ```\n\n- **Do** restrict the Access-Control-Allow-Origin header to only allow specific, trusted origins that need access to your application. This minimizes the risk of sensitive data exposure.\n  ```php\n  $response = new Response();\n  $response-\u003eheaders-\u003eset('Access-Control-Allow-Origin', \"myapp.example.com\");\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)","markdown":"## Description\n\nA permissive Access-Control-Allow-Origin configuration can expose your application to security risks. When this header is set to \"*\", it means your application's responses can be accessed by any website, potentially leading to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** set the Access-Control-Allow-Origin header to \"*\". This overly permissive setting can make your application vulnerable to attacks.\n  ```php\n  $response = new Response();\n  $response-\u003eheaders-\u003eset('Access-Control-Allow-Origin', \"*\"); // unsafe\n  ```\n\n- **Do** restrict the Access-Control-Allow-Origin header to only allow specific, trusted origins that need access to your application. This minimizes the risk of sensitive data exposure.\n  ```php\n  $response = new Response();\n  $response-\u003eheaders-\u003eset('Access-Control-Allow-Origin', \"myapp.example.com\");\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)"}},{"id":"ruby_lang_format_string_using_user_input","name":"ruby_lang_format_string_using_user_input","shortDescription":{"text":"Unsanitized user input in format string"},"fullDescription":{"text":"Unsanitized user input in format string"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding user input directly in a format string can lead to security vulnerabilities. Attackers might exploit these format strings to generate misleading or fabricated messages by inserting format specifiers into the user input.\n\n## Remediations\n\n- **Do not** include user input directly in format strings. This approach is vulnerable to manipulation by attackers.\n  ```ruby\n  sprintf(\"The value was #{params[:value]}\") # unsafe\n  ```\n- **Do** use a literal format string with user input as separate arguments. This method prevents attackers from exploiting the format string.\n  ```ruby\n  sprintf(\"The value was %s\", params[:value])\n  ```","markdown":"## Description\n\nIncluding user input directly in a format string can lead to security vulnerabilities. Attackers might exploit these format strings to generate misleading or fabricated messages by inserting format specifiers into the user input.\n\n## Remediations\n\n- **Do not** include user input directly in format strings. This approach is vulnerable to manipulation by attackers.\n  ```ruby\n  sprintf(\"The value was #{params[:value]}\") # unsafe\n  ```\n- **Do** use a literal format string with user input as separate arguments. This method prevents attackers from exploiting the format string.\n  ```ruby\n  sprintf(\"The value was %s\", params[:value])\n  ```"}},{"id":"go_lang_cookie_missing_http_only","name":"go_lang_cookie_missing_http_only","shortDescription":{"text":"Missing HTTP Only option in cookie configuration"},"fullDescription":{"text":"Missing HTTP Only option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nMissing the HTTP Only option in cookie configuration exposes cookies to client-side script access. This vulnerability occurs when cookies are set without the `HttpOnly` attribute, allowing them to be accessible via JavaScript. This can lead to sensitive information being compromised, especially if the site is susceptible to Cross-Site Scripting (XSS) attacks.\n\n## Remediations\n\n- **Do** set the `HttpOnly` attribute for cookies to `true`. This action prevents client-side scripts from accessing the cookie, significantly reducing the risk of XSS attacks.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      HttpOnly: true,\n      ...\n  })\n  ```\n- **Do** also consider setting `Secure`, `SameSite`, and `Domain` attributes for cookies. These additional configurations help in further securing cookies against various web vulnerabilities, tailoring the protection to your application's specific needs.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)","markdown":"## Description\n\nMissing the HTTP Only option in cookie configuration exposes cookies to client-side script access. This vulnerability occurs when cookies are set without the `HttpOnly` attribute, allowing them to be accessible via JavaScript. This can lead to sensitive information being compromised, especially if the site is susceptible to Cross-Site Scripting (XSS) attacks.\n\n## Remediations\n\n- **Do** set the `HttpOnly` attribute for cookies to `true`. This action prevents client-side scripts from accessing the cookie, significantly reducing the risk of XSS attacks.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      HttpOnly: true,\n      ...\n  })\n  ```\n- **Do** also consider setting `Secure`, `SameSite`, and `Domain` attributes for cookies. These additional configurations help in further securing cookies against various web vulnerabilities, tailoring the protection to your application's specific needs.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)"}},{"id":"ruby_rails_insecure_disabling_of_callback","name":"ruby_rails_insecure_disabling_of_callback","shortDescription":{"text":"Permissive callback disable configuration"},"fullDescription":{"text":"Permissive callback disable configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing the `except` option to disable a callback can inadvertently bypass critical access control logic. This oversight can compromise the security of your application by not enforcing necessary checks on certain actions.\n\n## Remediations\n\n- **Do** explicitly list all actions where a callback should be skipped using the `only` option. This approach minimizes the risk of accidentally bypassing important security controls.\n  ```ruby\n  skip_before_action :access_control, only: %i[public_action1 public_action2]\n  ```","markdown":"## Description\n\nUsing the `except` option to disable a callback can inadvertently bypass critical access control logic. This oversight can compromise the security of your application by not enforcing necessary checks on certain actions.\n\n## Remediations\n\n- **Do** explicitly list all actions where a callback should be skipped using the `only` option. This approach minimizes the risk of accidentally bypassing important security controls.\n  ```ruby\n  skip_before_action :access_control, only: %i[public_action1 public_action2]\n  ```"}},{"id":"javascript_express_https_protocol_missing","name":"javascript_express_https_protocol_missing","shortDescription":{"text":"Missing secure HTTP server configuration"},"fullDescription":{"text":"Missing secure HTTP server configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nFailing to configure your HTTP server to use HTTPS can expose data to interception and manipulation. HTTPS, which incorporates TLS (Transport Layer Security), encrypts data in transit and therefore provides a more secure communication channel than HTTP.\n\n## Remediations\n\n- **Do** use the `https` module for creating secure servers in your applications. This ensures that data transmitted between the server and clients is encrypted.\n  ```javascript\n  var https = require('https');\n  var express = require('express');\n  var app = express();\n\n  var httpsServer = https.createServer(app);\n  httpsServer.listen(8080);\n  ```\n\n## References\n\n- [Express Security Best Practices: use TLS](https://expressjs.com/en/advanced/best-practice-security.html#use-tls)","markdown":"## Description\n\nFailing to configure your HTTP server to use HTTPS can expose data to interception and manipulation. HTTPS, which incorporates TLS (Transport Layer Security), encrypts data in transit and therefore provides a more secure communication channel than HTTP.\n\n## Remediations\n\n- **Do** use the `https` module for creating secure servers in your applications. This ensures that data transmitted between the server and clients is encrypted.\n  ```javascript\n  var https = require('https');\n  var express = require('express');\n  var app = express();\n\n  var httpsServer = https.createServer(app);\n  httpsServer.listen(8080);\n  ```\n\n## References\n\n- [Express Security Best Practices: use TLS](https://expressjs.com/en/advanced/best-practice-security.html#use-tls)"}},{"id":"ruby_rails_weak_custom_key","name":"ruby_rails_weak_custom_key","shortDescription":{"text":"Usage of weak model specific encryption key"},"fullDescription":{"text":"Usage of weak model specific encryption key"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWeak model-specific encryption keys can compromise data security. To ensure effective encryption, model-specific encryption keys should be 12 bytes or greater.\n\n## Remediations\n\n- **Do not** use model-specific encryption keys shorter than 12 bytes. Short keys are easier to crack, putting your data at risk.\n  ```ruby\n  class User \u003c ApplicationRecord\n    encrypts :email, key: \"weak-key\" # unsafe\n  end\n  ```\n- **Do** ensure your model-specific encryption keys are 12 bytes or longer to maintain strong encryption and protect sensitive data.\n  ```ruby\n  class User \u003c ApplicationRecord\n    encrypts :email, key: \"stronger-key-example\"\n  end\n  ```\n\n## References\n\n- [Rails encryption setup and recommended key practice](https://guides.rubyonrails.org/active_record_encryption.html#setup)\n- [Rails encryption - model-specific keys](https://guides.rubyonrails.org/active_record_encryption.html#model-specific-keys)","markdown":"## Description\n\nWeak model-specific encryption keys can compromise data security. To ensure effective encryption, model-specific encryption keys should be 12 bytes or greater.\n\n## Remediations\n\n- **Do not** use model-specific encryption keys shorter than 12 bytes. Short keys are easier to crack, putting your data at risk.\n  ```ruby\n  class User \u003c ApplicationRecord\n    encrypts :email, key: \"weak-key\" # unsafe\n  end\n  ```\n- **Do** ensure your model-specific encryption keys are 12 bytes or longer to maintain strong encryption and protect sensitive data.\n  ```ruby\n  class User \u003c ApplicationRecord\n    encrypts :email, key: \"stronger-key-example\"\n  end\n  ```\n\n## References\n\n- [Rails encryption setup and recommended key practice](https://guides.rubyonrails.org/active_record_encryption.html#setup)\n- [Rails encryption - model-specific keys](https://guides.rubyonrails.org/active_record_encryption.html#model-specific-keys)"}},{"id":"python_lang_path_traversal","name":"python_lang_path_traversal","shortDescription":{"text":"Unsanitized dynamic input in file path"},"fullDescription":{"text":"Unsanitized dynamic input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use external input to construct file paths. This can lead to unauthorized file access.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** use absolute path checks to confirm that the constructed path is within the expected directory\n    ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, dynamic_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n   ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","markdown":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use external input to construct file paths. This can lead to unauthorized file access.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** use absolute path checks to confirm that the constructed path is within the expected directory\n    ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, dynamic_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n   ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n"}},{"id":"javascript_lang_http_insecure","name":"javascript_lang_http_insecure","shortDescription":{"text":"Usage of insecure HTTP connection"},"fullDescription":{"text":"Usage of insecure HTTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is at risk when it connects to APIs using insecure HTTP connections. This vulnerability occurs because HTTP does not encrypt data, making it susceptible to interception and alteration. Ensure that your application uses HTTPS, which encrypts data in transit, for all connections.\n\n## Remediations\n\n- **Do not** use HTTP for outgoing connections or API calls. This practice leaves your data vulnerable to eavesdropping and tampering.\n  ```javascript\n  const response = axios.get('http://insecure-api.com') // unsafe\n  ```\n- **Do** ensure all external connections, especially API calls, use HTTPS to protect data in transit.\n  ```javascript\n  const response = axios.get('https://secure-api.com')\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nYour application is at risk when it connects to APIs using insecure HTTP connections. This vulnerability occurs because HTTP does not encrypt data, making it susceptible to interception and alteration. Ensure that your application uses HTTPS, which encrypts data in transit, for all connections.\n\n## Remediations\n\n- **Do not** use HTTP for outgoing connections or API calls. This practice leaves your data vulnerable to eavesdropping and tampering.\n  ```javascript\n  const response = axios.get('http://insecure-api.com') // unsafe\n  ```\n- **Do** ensure all external connections, especially API calls, use HTTPS to protect data in transit.\n  ```javascript\n  const response = axios.get('https://secure-api.com')\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"ruby_rails_permissive_parameters","name":"ruby_rails_permissive_parameters","shortDescription":{"text":"Permissive request parameters"},"fullDescription":{"text":"Permissive request parameters"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAllowing overly permissive request parameters can allow attackers to update any model attributes they choose.\n\n## Remediations\n\n- **Do not** use blanket permissions for request parameters. This approach can inadvertently expose your application to unauthorized modifications.\n  ```ruby\n  params.permit! # unsafe\n  ```\n- **Do** explicitly permit only the parameters that users are allowed to update. This practice helps safeguard your application by limiting what can be modified.\n  ```ruby\n  params.permit(:name, :email)\n  ```","markdown":"## Description\n\nAllowing overly permissive request parameters can allow attackers to update any model attributes they choose.\n\n## Remediations\n\n- **Do not** use blanket permissions for request parameters. This approach can inadvertently expose your application to unauthorized modifications.\n  ```ruby\n  params.permit! # unsafe\n  ```\n- **Do** explicitly permit only the parameters that users are allowed to update. This practice helps safeguard your application by limiting what can be modified.\n  ```ruby\n  params.permit(:name, :email)\n  ```"}},{"id":"go_gosec_blocklist_rc4","name":"go_gosec_blocklist_rc4","shortDescription":{"text":"Import of weak encryption algorithm (RCA)"},"fullDescription":{"text":"Import of weak encryption algorithm (RCA)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe RC4 encryption algorithm is outdated and vulnerable. It has been found to have significant security flaws, including predictable key generation and weak randomization, which have been exploited in various attacks. These vulnerabilities make RC4 unsuitable for secure data encryption.\n\n## Remediations\n\n- **Do not** use RC4 for encrypting data. Its vulnerabilities to cryptanalysis and practical attacks compromise data security.\n- **Do** switch to AES-256 for encryption. AES-256 is a secure and widely accepted standard that provides strong protection against attacks. Using AES-256 ensures compliance with current security standards and provides a robust defense against known cryptographic attacks.\n\n## References\n\n- [NIST Guidelines on Cryptography](https://csrc.nist.gov/publications/detail/sp/800-38a/final)","markdown":"## Description\n\nThe RC4 encryption algorithm is outdated and vulnerable. It has been found to have significant security flaws, including predictable key generation and weak randomization, which have been exploited in various attacks. These vulnerabilities make RC4 unsuitable for secure data encryption.\n\n## Remediations\n\n- **Do not** use RC4 for encrypting data. Its vulnerabilities to cryptanalysis and practical attacks compromise data security.\n- **Do** switch to AES-256 for encryption. AES-256 is a secure and widely accepted standard that provides strong protection against attacks. Using AES-256 ensures compliance with current security standards and provides a robust defense against known cryptographic attacks.\n\n## References\n\n- [NIST Guidelines on Cryptography](https://csrc.nist.gov/publications/detail/sp/800-38a/final)"}},{"id":"go_lang_permissive_regex_validation","name":"go_lang_permissive_regex_validation","shortDescription":{"text":"Permissive regular expression used in matching"},"fullDescription":{"text":"Permissive regular expression used in matching"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen matching with regular expressions -- especially for validation purposes -- it is crucial to specify the start and end of the text boundaries. This ensures the entire text is validated, not just parts of it, and prevents attackers from bypassing validation with partially matching input. Use \\A and \\z (or \\Z) over ^ and $ to specify text boundaries, because these accurately mark the beginning and end of the text, even in multiline mode.\n\n## Remediations\n\n- **Do not** use regular expressions for validation without specifying start and end boundaries. This can lead to partial matches being considered valid, when they may contain unsafe input.\n  ```go\n  regexp.MustCompile(\"foo\") // unsafe\n  ```\n- **Do not** use line-based boundaries (^ and $) for validation as they may not secure the entire text.\n  ```go\n  regexp.MustCompile(\"^foo$\") // unsafe\n  ```\n- **Do** use whole-text boundaries (\\A and \\z or \\Z) in your regular expressions to ensure comprehensive validation.\n  ```go\n  regexp.MustCompile(\"\\Afoo\\z\")\n  ```","markdown":"## Description\n\nWhen matching with regular expressions -- especially for validation purposes -- it is crucial to specify the start and end of the text boundaries. This ensures the entire text is validated, not just parts of it, and prevents attackers from bypassing validation with partially matching input. Use \\A and \\z (or \\Z) over ^ and $ to specify text boundaries, because these accurately mark the beginning and end of the text, even in multiline mode.\n\n## Remediations\n\n- **Do not** use regular expressions for validation without specifying start and end boundaries. This can lead to partial matches being considered valid, when they may contain unsafe input.\n  ```go\n  regexp.MustCompile(\"foo\") // unsafe\n  ```\n- **Do not** use line-based boundaries (^ and $) for validation as they may not secure the entire text.\n  ```go\n  regexp.MustCompile(\"^foo$\") // unsafe\n  ```\n- **Do** use whole-text boundaries (\\A and \\z or \\Z) in your regular expressions to ensure comprehensive validation.\n  ```go\n  regexp.MustCompile(\"\\Afoo\\z\")\n  ```"}},{"id":"go_third_parties_google_dataflow","name":"go_third_parties_google_dataflow","shortDescription":{"text":"Leakage of sensitive data to Google Dataflow"},"fullDescription":{"text":"Leakage of sensitive data to Google Dataflow"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to a third-party service is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Google Dataflow.\n\n## References\n- [Google Dataflow Docs](https://cloud.google.com/dataflow/docs/overview)\n","markdown":"## Description\n\nLeaking sensitive data to a third-party service is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Google Dataflow.\n\n## References\n- [Google Dataflow Docs](https://cloud.google.com/dataflow/docs/overview)\n"}},{"id":"python_django_mark_safe","name":"python_django_mark_safe","shortDescription":{"text":"Usage of mark_safe"},"fullDescription":{"text":"Usage of mark_safe"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe Django utils method `mark_safe` is used to mark a string as \"safe\" for output as HTML, but it does not escape special characters like ampersands or quotes, and therefore could expose your application to XSS attacks if an external string is passed to it.   \n\n## Remediations\n\n- **Do not** use `mark_safe` wherever possible\n- **Do** use `format_html` instead to build up HTML fragments. This is more appropriate because it applies escaping to its arguments by default. \n  ```python\n  from django.utils.html import format_html\n\n  format_html(\"{} \u003cb\u003e{}\u003c/b\u003e {}\", mark_safe(some_html), some text)\n  ```\n","markdown":"## Description\n\nThe Django utils method `mark_safe` is used to mark a string as \"safe\" for output as HTML, but it does not escape special characters like ampersands or quotes, and therefore could expose your application to XSS attacks if an external string is passed to it.   \n\n## Remediations\n\n- **Do not** use `mark_safe` wherever possible\n- **Do** use `format_html` instead to build up HTML fragments. This is more appropriate because it applies escaping to its arguments by default. \n  ```python\n  from django.utils.html import format_html\n\n  format_html(\"{} \u003cb\u003e{}\u003c/b\u003e {}\", mark_safe(some_html), some text)\n  ```\n"}},{"id":"python_third_parties_elasticsearch","name":"python_third_parties_elasticsearch","shortDescription":{"text":"Leakage of sensitive data to ElasticSearch"},"fullDescription":{"text":"Leakage of sensitive data to ElasticSearch"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html)\n"}},{"id":"javascript_express_external_file_upload","name":"javascript_express_external_file_upload","shortDescription":{"text":"Unsanitized user input in HTTP send file request"},"fullDescription":{"text":"Unsanitized user input in HTTP send file request"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input in the sendFile API call exposes your application to path manipulation attacks. This vulnerability allows attackers to access files and resources they shouldn't be able to, by manipulating file paths in requests.\n\n## Remediations\n\n- **Do** set the `root` option to an absolute path to a directory when using `sendFile`. This confines the accessible files to a specific directory, preventing attackers from accessing files outside of this directory.\n  ```javascript\n  app.post(\"/upload\", (req, res) =\u003e {\n    var options = {\n      root: path.join(__dirname, \"upload\")\n    };\n    res.sendFile(req.params.filename, options);\n  });\n  ```\n\n## References\n\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)","markdown":"## Description\n\nUsing unsanitized user input in the sendFile API call exposes your application to path manipulation attacks. This vulnerability allows attackers to access files and resources they shouldn't be able to, by manipulating file paths in requests.\n\n## Remediations\n\n- **Do** set the `root` option to an absolute path to a directory when using `sendFile`. This confines the accessible files to a specific directory, preventing attackers from accessing files outside of this directory.\n  ```javascript\n  app.post(\"/upload\", (req, res) =\u003e {\n    var options = {\n      root: path.join(__dirname, \"upload\")\n    };\n    res.sendFile(req.params.filename, options);\n  });\n  ```\n\n## References\n\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)"}},{"id":"python_third_parties_open_telemetry","name":"python_third_parties_open_telemetry","shortDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"fullDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n","markdown":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n"}},{"id":"ruby_rails_unsafe_cookie_serialization_strategy","name":"ruby_rails_unsafe_cookie_serialization_strategy","shortDescription":{"text":"Possible dangerous serialization configuration"},"fullDescription":{"text":"Possible dangerous serialization configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing an unsafe serialization strategy can introduce vulnerabilities, particularly when handling untrusted data like cookies. By default, Rails uses JSON to serialize cookie values. JSON is the safest serialization strategy when dealing with untrusted data, to avoid malicious code injection. Changing this default setting can expose your application to attacks.\n\n## Remediations\n\n- **Do not** change the default cookie serializer.\n  ```ruby\n  Rails.application.config.action_dispatch.cookies_serializer = :marshal # unsafe\n  ```\n- **Do** consider the hybrid serializer option, but use this as a temporary measure only (such as during the transition from Marshal to JSON serialization). This should not be a permanent solution.\n  ```ruby\n  Rails.application.config.action_dispatch.cookies_serializer = :hybrid\n  ```\n\n## References\n\n- [OWASP Rails Goat on Marshal and Remote Code Execution](https://github.com/OWASP/railsgoat/wiki/Extras:-Remote-Code-Execution)","markdown":"## Description\n\nUsing an unsafe serialization strategy can introduce vulnerabilities, particularly when handling untrusted data like cookies. By default, Rails uses JSON to serialize cookie values. JSON is the safest serialization strategy when dealing with untrusted data, to avoid malicious code injection. Changing this default setting can expose your application to attacks.\n\n## Remediations\n\n- **Do not** change the default cookie serializer.\n  ```ruby\n  Rails.application.config.action_dispatch.cookies_serializer = :marshal # unsafe\n  ```\n- **Do** consider the hybrid serializer option, but use this as a temporary measure only (such as during the transition from Marshal to JSON serialization). This should not be a permanent solution.\n  ```ruby\n  Rails.application.config.action_dispatch.cookies_serializer = :hybrid\n  ```\n\n## References\n\n- [OWASP Rails Goat on Marshal and Remote Code Execution](https://github.com/OWASP/railsgoat/wiki/Extras:-Remote-Code-Execution)"}},{"id":"php_lang_weak_hash_sha1","name":"php_lang_weak_hash_sha1","shortDescription":{"text":"Usage of weak hashing library (SHA-1)"},"fullDescription":{"text":"Usage of weak hashing library (SHA-1)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = sha1($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","markdown":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = sha1($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```"}},{"id":"ruby_lang_deserialization_of_user_input","name":"ruby_lang_deserialization_of_user_input","shortDescription":{"text":"Unsanitized user input in deserialization method"},"fullDescription":{"text":"Unsanitized user input in deserialization method"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nDeserializing data from untrusted sources, like parameters or cookies, without proper validation is a security risk. Attackers can embed malicious code or payloads in serialized data. When your application deserializes this data, it can compromise your system's security.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This prevents attackers from exploiting the deserialization process.\n- **Do** use data formats that are purely data-oriented and not tied to a specific programming language, such as JSON or XML, for serialization and deserialization. This approach minimizes the risk of executing malicious code during deserialization.\n  ```ruby\n  user_data = JSON.parse(params[:user])\n  JSON.load(user)\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)","markdown":"## Description\n\nDeserializing data from untrusted sources, like parameters or cookies, without proper validation is a security risk. Attackers can embed malicious code or payloads in serialized data. When your application deserializes this data, it can compromise your system's security.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This prevents attackers from exploiting the deserialization process.\n- **Do** use data formats that are purely data-oriented and not tied to a specific programming language, such as JSON or XML, for serialization and deserialization. This approach minimizes the risk of executing malicious code during deserialization.\n  ```ruby\n  user_data = JSON.parse(params[:user])\n  JSON.load(user)\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)"}},{"id":"php_lang_xml_external_entity_vulnerability","name":"php_lang_xml_external_entity_vulnerability","shortDescription":{"text":"Unsanitized user input in XML External Entity"},"fullDescription":{"text":"Unsanitized user input in XML External Entity"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in XML External Entity (XXE) processing can lead to security vulnerabilities. When your application parses XML input containing untrusted data, it may interpret URIs that point to unauthorized external resources. This can result in an XXE injection, compromising the security of your application.\n\n## Remediations\n\n- **Do not** enable the parsing of external entities within your XML processing. Disabling the parsing of external entities prevents your application from attempting to access or include external resources based on untrusted input. For LibXML, for example, do not use the LIBXML_NOENT flag\n  ```php\n  $userInput = $_GET[\"untrusted\"];\n  DOMDocument::loadXML($userInput, LIBXML_NOENT); // unsafe\n  ```\n\n## References\n\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nUnsanitized user input in XML External Entity (XXE) processing can lead to security vulnerabilities. When your application parses XML input containing untrusted data, it may interpret URIs that point to unauthorized external resources. This can result in an XXE injection, compromising the security of your application.\n\n## Remediations\n\n- **Do not** enable the parsing of external entities within your XML processing. Disabling the parsing of external entities prevents your application from attempting to access or include external resources based on untrusted input. For LibXML, for example, do not use the LIBXML_NOENT flag\n  ```php\n  $userInput = $_GET[\"untrusted\"];\n  DOMDocument::loadXML($userInput, LIBXML_NOENT); // unsafe\n  ```\n\n## References\n\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)"}},{"id":"go_lang_ssl_verification","name":"go_lang_ssl_verification","shortDescription":{"text":"Missing SSL certificate verification"},"fullDescription":{"text":"Missing SSL certificate verification"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application's security is compromised if it fails to verify SSL certificates. This vulnerability occurs when your application communicates over HTTPS without validating the authenticity of the SSL certificate presented by the server. It exposes sensitive data to interception by attackers.\n\n## Remediations\n\n- **Do not** disable SSL certificate validation in your HTTP client. Disabling it makes your application vulnerable to Man-in-the-Middle (MitM) attacks.\n- **Do** ensure that your HTTP client is configured to verify both the SSL certificate's validity and the hostname. This step is crucial for establishing a secure connection.","markdown":"## Description\n\nYour application's security is compromised if it fails to verify SSL certificates. This vulnerability occurs when your application communicates over HTTPS without validating the authenticity of the SSL certificate presented by the server. It exposes sensitive data to interception by attackers.\n\n## Remediations\n\n- **Do not** disable SSL certificate validation in your HTTP client. Disabling it makes your application vulnerable to Man-in-the-Middle (MitM) attacks.\n- **Do** ensure that your HTTP client is configured to verify both the SSL certificate's validity and the hostname. This step is crucial for establishing a secure connection."}},{"id":"php_symfony_sql_injection","name":"php_symfony_sql_injection","shortDescription":{"text":"Unsanitized external input in SQL query"},"fullDescription":{"text":"Unsanitized external input in SQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```php\n  $sql = \"SELECT * FROM foo WHERE foo.bar \u003e \" . $_GET['untrusted']. \" ORDER BY foo.bar ASC\";\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```php\n  $sql = \"SELECT * FROM foo WHERE bar = '\" . $conn-\u003equote($_GET['bar']) . \"'\";\n  ```\n- **Do** use safe lists to validate external input, if dynamic input is required.\n  ```php\n  private function validatedTableName($table_name)\n  {\n    if in_array($table_name, $ALLOWED_TABLE_NAMES) {\n      return $table_name\n    }\n    // handle invalid table name\n  }\n  ```\n- **Do** use prepared statements with bound parameters to safely include external data in SQL queries. This method ensures that external input is treated as data and not as part of the SQL command.\n  ```php\n  $sql = \"SELECT * FROM users WHERE username = :user\";\n  $stmt = $connection-\u003eprepare($sql);\n  $stmt-\u003ebindValue(\"user\", $_GET['username']);\n  ```\n- **Do** employ an Object-Relational Mapping (ORM) tool or a database abstraction layer that automatically handles input sanitization and prepared statements.\n  ```php\n  $dql = \"SELECT * FROM Foo WHERE bar = :bar\";\n  $query = $em-\u003ecreateQuery($dql);\n  $query-\u003esetParameter(\"bar\", $_GET['bar']);\n  ```\n\n## References\n\n- [Doctrine DBAL Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)\n- [Doctrine SQL Query Builder Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```php\n  $sql = \"SELECT * FROM foo WHERE foo.bar \u003e \" . $_GET['untrusted']. \" ORDER BY foo.bar ASC\";\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```php\n  $sql = \"SELECT * FROM foo WHERE bar = '\" . $conn-\u003equote($_GET['bar']) . \"'\";\n  ```\n- **Do** use safe lists to validate external input, if dynamic input is required.\n  ```php\n  private function validatedTableName($table_name)\n  {\n    if in_array($table_name, $ALLOWED_TABLE_NAMES) {\n      return $table_name\n    }\n    // handle invalid table name\n  }\n  ```\n- **Do** use prepared statements with bound parameters to safely include external data in SQL queries. This method ensures that external input is treated as data and not as part of the SQL command.\n  ```php\n  $sql = \"SELECT * FROM users WHERE username = :user\";\n  $stmt = $connection-\u003eprepare($sql);\n  $stmt-\u003ebindValue(\"user\", $_GET['username']);\n  ```\n- **Do** employ an Object-Relational Mapping (ORM) tool or a database abstraction layer that automatically handles input sanitization and prepared statements.\n  ```php\n  $dql = \"SELECT * FROM Foo WHERE bar = :bar\";\n  $query = $em-\u003ecreateQuery($dql);\n  $query-\u003esetParameter(\"bar\", $_GET['bar']);\n  ```\n\n## References\n\n- [Doctrine DBAL Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)\n- [Doctrine SQL Query Builder Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)"}},{"id":"go_third_parties_algolia","name":"go_third_parties_algolia","shortDescription":{"text":"Leakage of sensitive data to Algolia"},"fullDescription":{"text":"Leakage of sensitive data to Algolia"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n"}},{"id":"python_lang_weak_password_hash_dss","name":"python_lang_weak_password_hash_dss","shortDescription":{"text":"Usage of weak hashing library on a password (DSS)"},"fullDescription":{"text":"Usage of weak hashing library on a password (DSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like DSS increases the risk of data breaches. DSS has known security flaws and vulnerabilities, and its use is no longer recommended.\n\n## Remediations\n\n- **Do not** use DSS for hashing passwords as it is considered a weak algorithm. This can compromise data security.\n  ```python\n  hashlib.new('dss', user.password).digest() # unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance the security of stored passwords.\n  ```python\n  hashlib.sha256(user.password).digest()\n  ```","markdown":"## Description\n\nUsing a weak hashing library like DSS increases the risk of data breaches. DSS has known security flaws and vulnerabilities, and its use is no longer recommended.\n\n## Remediations\n\n- **Do not** use DSS for hashing passwords as it is considered a weak algorithm. This can compromise data security.\n  ```python\n  hashlib.new('dss', user.password).digest() # unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance the security of stored passwords.\n  ```python\n  hashlib.sha256(user.password).digest()\n  ```"}},{"id":"javascript_lang_format_string_using_user_input","name":"javascript_lang_format_string_using_user_input","shortDescription":{"text":"Unsanitized user input in format string"},"fullDescription":{"text":"Unsanitized user input in format string"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding user input directly in a format string can lead to security vulnerabilities. This issue arises when an attacker manipulates the format specifiers in the user input, resulting in misleading or fabricated messages.\n\n## Remediations\n\n- **Do not** incorporate user input directly into format strings. This approach can be exploited by attackers to manipulate output or execute malicious code.\n  ```javascript\n  console.log(`The value was ${req.params.value}`); // unsafe\n  ```\n- **Do** use a literal format string and pass user input as additional arguments. This method safely incorporates user input without exposing the application to format string vulnerabilities.\n  ```javascript\n  console.log(\"The value was %s\", req.params.value);\n  ```","markdown":"## Description\n\nIncluding user input directly in a format string can lead to security vulnerabilities. This issue arises when an attacker manipulates the format specifiers in the user input, resulting in misleading or fabricated messages.\n\n## Remediations\n\n- **Do not** incorporate user input directly into format strings. This approach can be exploited by attackers to manipulate output or execute malicious code.\n  ```javascript\n  console.log(`The value was ${req.params.value}`); // unsafe\n  ```\n- **Do** use a literal format string and pass user input as additional arguments. This method safely incorporates user input without exposing the application to format string vulnerabilities.\n  ```javascript\n  console.log(\"The value was %s\", req.params.value);\n  ```"}},{"id":"python_lang_weak_password_hash_adler32","name":"python_lang_weak_password_hash_adler32","shortDescription":{"text":"Usage of weak hashing library on a password (Adler-32)"},"fullDescription":{"text":"Usage of weak hashing library on a password (Adler-32)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAdler-32 is a weak hashing algorithm that offers minimal security. It is not suitable for protecting passwords against intentional modifications.\n\n## Remediations\n\n- **Do not** use Adler-32 for hashing passwords. Its simplicity and speed do not compensate for its lack of protection against data tampering.\n  ```python\n  myhash = zlib.adler32(user.password) # unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance the security of stored passwords.\n  ```python\n  myhash = hashlib.sha256(user.password).digest()\n  ```","markdown":"## Description\n\nAdler-32 is a weak hashing algorithm that offers minimal security. It is not suitable for protecting passwords against intentional modifications.\n\n## Remediations\n\n- **Do not** use Adler-32 for hashing passwords. Its simplicity and speed do not compensate for its lack of protection against data tampering.\n  ```python\n  myhash = zlib.adler32(user.password) # unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance the security of stored passwords.\n  ```python\n  myhash = hashlib.sha256(user.password).digest()\n  ```"}},{"id":"ruby_third_parties_bugsnag","name":"ruby_third_parties_bugsnag","shortDescription":{"text":"Leakage of sensitive data to Bugsnag"},"fullDescription":{"text":"Leakage of sensitive data to Bugsnag"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/ruby/rails/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/ruby/rails/)\n"}},{"id":"javascript_express_static_asset_with_session","name":"javascript_express_static_asset_with_session","shortDescription":{"text":"Usage of session on static asset (CSRF)"},"fullDescription":{"text":"Usage of session on static asset (CSRF)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nEnabling sessions for static assets can inadvertently expose your application to Cross-Site Request Forgery (CSRF) attacks. This vulnerability arises because static assets, like images and stylesheets, are often cached by intermediary services such as Content Delivery Networks (CDNs). If these assets are served with session information, attackers can exploit this to hijack a user's session.\n\n## Remediations\n\n- **Do** ensure that static resources are served prior to session initialization in your application's middleware order. This practice prevents session cookies from being unnecessarily attached to static assets, reducing the risk of CSRF attacks.\n  ```javascript\n  app.use(express.static(__dirname + \"/public\"));\n  app.use(session());\n  ```","markdown":"## Description\n\nEnabling sessions for static assets can inadvertently expose your application to Cross-Site Request Forgery (CSRF) attacks. This vulnerability arises because static assets, like images and stylesheets, are often cached by intermediary services such as Content Delivery Networks (CDNs). If these assets are served with session information, attackers can exploit this to hijack a user's session.\n\n## Remediations\n\n- **Do** ensure that static resources are served prior to session initialization in your application's middleware order. This practice prevents session cookies from being unnecessarily attached to static assets, reducing the risk of CSRF attacks.\n  ```javascript\n  app.use(express.static(__dirname + \"/public\"));\n  app.use(session());\n  ```"}},{"id":"ruby_third_parties_segment","name":"ruby_third_parties_segment","shortDescription":{"text":"Leakage of sensitive data to Segment"},"fullDescription":{"text":"Leakage of sensitive data to Segment"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party analytics tools like Segment is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party analytics libraries like Segment.\n\n## References\n- [Segment docs](https://segment.com/docs/connections/sources/catalog/libraries/server/ruby/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party analytics tools like Segment is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party analytics libraries like Segment.\n\n## References\n- [Segment docs](https://segment.com/docs/connections/sources/catalog/libraries/server/ruby/)\n"}},{"id":"php_lang_cookies","name":"php_lang_cookies","shortDescription":{"text":"Leakage of sensitive data in cookie"},"fullDescription":{"text":"Leakage of sensitive data in cookie"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```php\n  setcookie(\"user_email\", $user-\u003eemail); // unsafe\n  ```","markdown":"## Description\n\nLeakage of sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```php\n  setcookie(\"user_email\", $user-\u003eemail); // unsafe\n  ```"}},{"id":"go_lang_missing_tls_minversion","name":"go_lang_missing_tls_minversion","shortDescription":{"text":"Missing TLS MinVersion"},"fullDescription":{"text":"Missing TLS MinVersion"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nOlder versions of TLS (Transport Layer Security) have been deprecated because of known security issues. To enhance security, it is crucial to specify the highest possible minimum version of TLS that your server will accept.\n\n## Remediations\n\n- **Do** set `MinVersion` in the `tls.Config` struct to `tls.VersionTLS13`. This ensures your server only accepts connections using the most secure, up-to-date version of TLS.\n  ```go\n  {\n    MinVersion: tls.VersionTLS13\n  }\n  ```\n- **Do** configure `MinVersion` to the highest possible supported version of TLS for legacy applications that cannot use TLS 1.3. This step is essential for maintaining security while ensuring compatibility.\n\n## References\n\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)","markdown":"## Description\n\nOlder versions of TLS (Transport Layer Security) have been deprecated because of known security issues. To enhance security, it is crucial to specify the highest possible minimum version of TLS that your server will accept.\n\n## Remediations\n\n- **Do** set `MinVersion` in the `tls.Config` struct to `tls.VersionTLS13`. This ensures your server only accepts connections using the most secure, up-to-date version of TLS.\n  ```go\n  {\n    MinVersion: tls.VersionTLS13\n  }\n  ```\n- **Do** configure `MinVersion` to the highest possible supported version of TLS for legacy applications that cannot use TLS 1.3. This step is essential for maintaining security while ensuring compatibility.\n\n## References\n\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)"}},{"id":"go_gosec_blocklist_md5","name":"go_gosec_blocklist_md5","shortDescription":{"text":"Import of weak hashing library (MD5)"},"fullDescription":{"text":"Import of weak hashing library (MD5)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. It is considered a weak hash algorithm and can compromise data security.\n- **Do** use stronger hashing algorithms such as SHA-3 or BLAKE2 for general hashing purposes, such as file integrity checks or generating unique identifiers.\n- **Do** use recommended algorithms such as bcrypt or Argon2id for password hashing, as these are designed to be slower and therefore more effective against brute-force attacks.\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)","markdown":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. It is considered a weak hash algorithm and can compromise data security.\n- **Do** use stronger hashing algorithms such as SHA-3 or BLAKE2 for general hashing purposes, such as file integrity checks or generating unique identifiers.\n- **Do** use recommended algorithms such as bcrypt or Argon2id for password hashing, as these are designed to be slower and therefore more effective against brute-force attacks.\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)"}},{"id":"javascript_third_parties_rollbar","name":"javascript_third_parties_rollbar","shortDescription":{"text":"Leakage of sensitive data to RollBar"},"fullDescription":{"text":"Leakage of sensitive data to RollBar"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    Rollbar.critical(\"Connection error from remote Payments API\", user.uuid);\n  ```\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/javascript)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n    Rollbar.critical(\"Connection error from remote Payments API\", user.uuid);\n  ```\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/javascript)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n"}},{"id":"python_lang_weak_password_hash_argon2","name":"python_lang_weak_password_hash_argon2","shortDescription":{"text":"Usage of weak hashing library on a password (Argon2)"},"fullDescription":{"text":"Usage of weak hashing library on a password (Argon2)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nChoosing a weak hashing algorithm for passwords compromises security. Argon2 has three variants: Argon2i, Argon2d, and Argon2id. Argon2id is the strongest and most recommended for password hashing because of its balanced resistance against both side-channel and GPU attack vectors.\n\n## Remediations\n\n- **Do not** override the Argon2 type when implementing the argon2-cffi hashing library.\n  ```python\n    ph = PasswordHasher(Type.I) # unsafe\n    hash = ph.hash(user.password) \n  ```\n- **Do** rely on the default Argon2 type (Argon2id) as it is the most secure. This ensures the highest level of security for password storage.\n  ```python\n    ph = PasswordHasher() # defaults to Argon2id\n    hash = ph.hash(user.password) \n  ```\n\n## References\n\n- [argon2-cffi documentation](https://argon2-cffi.readthedocs.io/en/stable/argon2.html)\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)","markdown":"## Description\n\nChoosing a weak hashing algorithm for passwords compromises security. Argon2 has three variants: Argon2i, Argon2d, and Argon2id. Argon2id is the strongest and most recommended for password hashing because of its balanced resistance against both side-channel and GPU attack vectors.\n\n## Remediations\n\n- **Do not** override the Argon2 type when implementing the argon2-cffi hashing library.\n  ```python\n    ph = PasswordHasher(Type.I) # unsafe\n    hash = ph.hash(user.password) \n  ```\n- **Do** rely on the default Argon2 type (Argon2id) as it is the most secure. This ensures the highest level of security for password storage.\n  ```python\n    ph = PasswordHasher() # defaults to Argon2id\n    hash = ph.hash(user.password) \n  ```\n\n## References\n\n- [argon2-cffi documentation](https://argon2-cffi.readthedocs.io/en/stable/argon2.html)\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)"}},{"id":"go_gosec_crypto_weak_crypto","name":"go_gosec_crypto_weak_crypto","shortDescription":{"text":"Usage of weak hashing library"},"fullDescription":{"text":"Usage of weak hashing library"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour code uses a weak hashing library, which means it relies on cryptographic algorithms that are no longer secure. This vulnerability can lead to compromised data confidentiality and integrity, as it makes the data susceptible to unauthorized decryption and tampering.\n\n## Remediations\n\n- **Do** replace weak or outdated algorithms with strong, modern alternatives. For encryption, use AES (Advanced Encryption Standard), and for hashing, opt for SHA-256 or higher.\n- **Do** always use the latest versions of cryptographic libraries. These versions are more likely to use secure algorithms and settings by default.\n- **Do not** use cryptographic algorithms that have been deprecated due to known vulnerabilities. Avoid MD5, SHA-1, or DES for any cryptographic operations.\n- **Do not** attempt to create custom cryptographic solutions. Instead use well-reviewed and tested standard cryptographic libraries to ensure security.\n\n## References\n\n- [NIST Cryptographic Standards and Guidelines](https://csrc.nist.gov/publications/sp)\n- [Cryptography Coding Standard](https://cryptocoding.net/index.php/Coding_rules)","markdown":"## Description\n\nYour code uses a weak hashing library, which means it relies on cryptographic algorithms that are no longer secure. This vulnerability can lead to compromised data confidentiality and integrity, as it makes the data susceptible to unauthorized decryption and tampering.\n\n## Remediations\n\n- **Do** replace weak or outdated algorithms with strong, modern alternatives. For encryption, use AES (Advanced Encryption Standard), and for hashing, opt for SHA-256 or higher.\n- **Do** always use the latest versions of cryptographic libraries. These versions are more likely to use secure algorithms and settings by default.\n- **Do not** use cryptographic algorithms that have been deprecated due to known vulnerabilities. Avoid MD5, SHA-1, or DES for any cryptographic operations.\n- **Do not** attempt to create custom cryptographic solutions. Instead use well-reviewed and tested standard cryptographic libraries to ensure security.\n\n## References\n\n- [NIST Cryptographic Standards and Guidelines](https://csrc.nist.gov/publications/sp)\n- [Cryptography Coding Standard](https://cryptocoding.net/index.php/Coding_rules)"}},{"id":"php_third_parties_logger","name":"php_third_parties_logger","shortDescription":{"text":"Leakage of sensitive information in logger message"},"fullDescription":{"text":"Leakage of sensitive information in logger message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to loggers is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages.\n  ```php\n  $log-\u003einfo('User is: ' . $user.email) // unsafe\n  ```\n- **Do** use unique identifiers from the database (instead of personal identifiable information) if you really need to identify users.\n  ```php\n  log-\u003einfo('User is: ' . $user.uuid)\n  ```\n\n## Resources\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","markdown":"## Description\n\nLeaking sensitive data to loggers is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages.\n  ```php\n  $log-\u003einfo('User is: ' . $user.email) // unsafe\n  ```\n- **Do** use unique identifiers from the database (instead of personal identifiable information) if you really need to identify users.\n  ```php\n  log-\u003einfo('User is: ' . $user.uuid)\n  ```\n\n## Resources\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n"}},{"id":"php_lang_raw_output_using_user_input","name":"php_lang_raw_output_using_user_input","shortDescription":{"text":"Unsanitized user input in 'echo' function (XSS)"},"fullDescription":{"text":"Unsanitized user input in 'echo' function (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in responses can lead to cross-site scripting (XSS) attacks. This vulnerability exposes your application to malicious scripts injected by attackers, compromising user data and browser security.\n\n## Remediations\n\n- **Do not** include user input directly in the response. This practice can make your application vulnerable to XSS attacks.\n  ```php\n  echo \"\u003ch1\u003e\" . $_GET[\"title\"] . \"\u003c/h1\u003e\" // unsafe\n  ```\n- **Do** sanitize user input before including it in a response. This step helps prevent malicious code from being executed.\n  ```php\n  echo \"\u003ch1\u003e\" . filter_var($_GET[\"title\"], FILTER_SANITIZE_STRING). \"\u003c/h1\u003e\"\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nIncluding unsanitized user input in responses can lead to cross-site scripting (XSS) attacks. This vulnerability exposes your application to malicious scripts injected by attackers, compromising user data and browser security.\n\n## Remediations\n\n- **Do not** include user input directly in the response. This practice can make your application vulnerable to XSS attacks.\n  ```php\n  echo \"\u003ch1\u003e\" . $_GET[\"title\"] . \"\u003c/h1\u003e\" // unsafe\n  ```\n- **Do** sanitize user input before including it in a response. This step helps prevent malicious code from being executed.\n  ```php\n  echo \"\u003ch1\u003e\" . filter_var($_GET[\"title\"], FILTER_SANITIZE_STRING). \"\u003c/h1\u003e\"\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"php_lang_open_redirect","name":"php_lang_open_redirect","shortDescription":{"text":"Unsanitized user input in redirect"},"fullDescription":{"text":"Unsanitized user input in redirect"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n  ```php\n  $paths = [\n    \"1\" =\u003e \"/planes\",\n    \"2\" =\u003e \"/trains\",\n    \"3\" =\u003e \"/automobiles\",\n  ];\n\n  $transport = $_GET[\"transport\"];\n  header(\"Location: {$paths[$transport]}\", true, 301);\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n  ```php\n  $paths = [\n    \"1\" =\u003e \"/planes\",\n    \"2\" =\u003e \"/trains\",\n    \"3\" =\u003e \"/automobiles\",\n  ];\n\n  $transport = $_GET[\"transport\"];\n  header(\"Location: {$paths[$transport]}\", true, 301);\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)"}},{"id":"php_third_parties_open_telemetry","name":"php_third_parties_open_telemetry","shortDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"fullDescription":{"text":"Leakage of sensitive data to OpenTelemetry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n","markdown":"## Description\n\nLeaking sensitive data to third parties like OpenTelemetry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third parties like OpenTelemetry.\n\n## References\n- [OpenTelemetry Docs](https://opentelemetry.io/docs/)\n"}},{"id":"php_lang_ftp_using_user_input","name":"php_lang_ftp_using_user_input","shortDescription":{"text":"Unsanitized user input in FTP request"},"fullDescription":{"text":"Unsanitized user input in FTP request"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncorporating unsanitized user input directly into FTP requests poses a significant security risk. This practice can lead to code injection attacks, where attackers exploit the application to execute malicious code, or path traversal attacks, allowing unauthorized access to files and directories outside the intended area.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct filenames or file paths in FTP operations. Always sanitize and validate input before use.\n  ```php\n  $connection = ftp_ssl_connect(\"ftp.example.com\", 21);\n  ftp_delete($connection, $_GET[\"name\"]); // unsafe\n  ```\n\n- **Do not** use unsanitized user input as arguments in FTP connection methods or any FTP operations. Validate and sanitize all input first.\n  ```php\n  $connection = ftp_ssl_connect($_GET[\"host\"], 21); // unsafe\n  ```\n\n## References\n\n- [OWASP code injection](https://owasp.org/www-community/attacks/Code_Injection)\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","markdown":"## Description\n\nIncorporating unsanitized user input directly into FTP requests poses a significant security risk. This practice can lead to code injection attacks, where attackers exploit the application to execute malicious code, or path traversal attacks, allowing unauthorized access to files and directories outside the intended area.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct filenames or file paths in FTP operations. Always sanitize and validate input before use.\n  ```php\n  $connection = ftp_ssl_connect(\"ftp.example.com\", 21);\n  ftp_delete($connection, $_GET[\"name\"]); // unsafe\n  ```\n\n- **Do not** use unsanitized user input as arguments in FTP connection methods or any FTP operations. Validate and sanitize all input first.\n  ```php\n  $connection = ftp_ssl_connect($_GET[\"host\"], 21); // unsafe\n  ```\n\n## References\n\n- [OWASP code injection](https://owasp.org/www-community/attacks/Code_Injection)\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)"}},{"id":"php_lang_session_key_using_user_input","name":"php_lang_session_key_using_user_input","shortDescription":{"text":"Unsanitized user input in session key"},"fullDescription":{"text":"Unsanitized user input in session key"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in session key poses a security risk. When user-defined data is directly used in session keys, attackers could be able to manipulate session data or perform unauthorized actions by exploiting the predictability or vulnerability of the session mechanism.\n\n## Remediations\n\n- **Do not** use user-defined data as session keys. This prevents attackers from being able to guess or forge session keys to hijack user sessions.\n  ```php\n  $userInput = $_GET[\"untrusted\"];\n  call($_SESSION[$userInput]); // unsafe\n  ```\n- **Do** sanitize user input before incorporating it into session keys. Ensure that any data derived from user input is properly validated and sanitized to prevent injection attacks.\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)","markdown":"## Description\n\nUnsanitized user input in session key poses a security risk. When user-defined data is directly used in session keys, attackers could be able to manipulate session data or perform unauthorized actions by exploiting the predictability or vulnerability of the session mechanism.\n\n## Remediations\n\n- **Do not** use user-defined data as session keys. This prevents attackers from being able to guess or forge session keys to hijack user sessions.\n  ```php\n  $userInput = $_GET[\"untrusted\"];\n  call($_SESSION[$userInput]); // unsafe\n  ```\n- **Do** sanitize user input before incorporating it into session keys. Ensure that any data derived from user input is properly validated and sanitized to prevent injection attacks.\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)"}},{"id":"php_symfony_insecure_allow_origin","name":"php_symfony_insecure_allow_origin","shortDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"fullDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** define the Access-Control-Allow-Origin header with user input. This practice can compromise the security of your application by allowing data access to unintended users.\n  ```php\n  $response-\u003eheaders-\u003eset('Access-Control-Allow-Origin', $userInput); // unsafe\n  ```\n- **Do** validate user input if it must be used to set the `Access-Control-Allow-Origin` header. Ensure that only trusted origins are allowed by implementing a safe-list of approved origins.\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)","markdown":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** define the Access-Control-Allow-Origin header with user input. This practice can compromise the security of your application by allowing data access to unintended users.\n  ```php\n  $response-\u003eheaders-\u003eset('Access-Control-Allow-Origin', $userInput); // unsafe\n  ```\n- **Do** validate user input if it must be used to set the `Access-Control-Allow-Origin` header. Ensure that only trusted origins are allowed by implementing a safe-list of approved origins.\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)"}},{"id":"python_lang_exception","name":"python_lang_exception","shortDescription":{"text":"Leakage of sensitive data in exception message"},"fullDescription":{"text":"Leakage of sensitive data in exception message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","markdown":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```"}},{"id":"javascript_express_ui_redress","name":"javascript_express_ui_redress","shortDescription":{"text":"Unsanitized user input in UI"},"fullDescription":{"text":"Unsanitized user input in UI"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncorporating unsanitized user input to configure X-Frame-Options or Content-Security-Policy HTTP headers exposes your application to UI redress attacks, commonly known as clickjacking. This vulnerability arises when attackers manipulate the appearance of a webpage to deceive users into performing unintended actions.\n\n## Remediations\n\n- **Do** set the most secure values for these headers to enhance protection against clickjacking.\n  ```javascript\n  res.set('X-Frame-Options', 'DENY');\n  res.set('Content-Security-Policy', \"frame-ancestors 'none'\");\n  ```\n- **Do not** directly use user input to set these headers. Instead, implement a safelist approach to ensure only approved values are used.\n  ```javascript\n  if (req.query.options === 'same') {\n    res.set('X-Frame-Options', 'SAME');\n  }\n\n  // Safelist\n  if (['deny', 'sameorigin'].includes(req.query.options.toLowerCase())) {\n    res.set('X-Frame-Options', req.query.options);\n  }\n  ```\n\n## References\n\n- [OWASP Clickjacking attack explained](https://owasp.org/www-community/attacks/Clickjacking)\n- [OWASP Clickjacking defense cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html)","markdown":"## Description\n\nIncorporating unsanitized user input to configure X-Frame-Options or Content-Security-Policy HTTP headers exposes your application to UI redress attacks, commonly known as clickjacking. This vulnerability arises when attackers manipulate the appearance of a webpage to deceive users into performing unintended actions.\n\n## Remediations\n\n- **Do** set the most secure values for these headers to enhance protection against clickjacking.\n  ```javascript\n  res.set('X-Frame-Options', 'DENY');\n  res.set('Content-Security-Policy', \"frame-ancestors 'none'\");\n  ```\n- **Do not** directly use user input to set these headers. Instead, implement a safelist approach to ensure only approved values are used.\n  ```javascript\n  if (req.query.options === 'same') {\n    res.set('X-Frame-Options', 'SAME');\n  }\n\n  // Safelist\n  if (['deny', 'sameorigin'].includes(req.query.options.toLowerCase())) {\n    res.set('X-Frame-Options', req.query.options);\n  }\n  ```\n\n## References\n\n- [OWASP Clickjacking attack explained](https://owasp.org/www-community/attacks/Clickjacking)\n- [OWASP Clickjacking defense cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html)"}},{"id":"javascript_lang_weak_password_encryption_rc4","name":"javascript_lang_weak_password_encryption_rc4","shortDescription":{"text":"Usage of weak encryption algorithm on a password (RC4)"},"fullDescription":{"text":"Usage of weak encryption algorithm on a password (RC4)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing RC4 for encrypting passwords is insecure. RC4 is a weak encryption algorithm that can be easily compromised, leading to potential security risks. Furthermore, using any form of encryption for passwords is not advisable because encryption is designed to be reversible. This means that given enough resources, an attacker could decrypt the passwords and access them in plain text. For securing passwords, hashing is the recommended approach because it is a one-way process that does not allow for the original password to be retrieved.\n\n## Remediations\n\n- **Do not** use RC4 or any encryption algorithm for password storage. Encryption algorithms are not secure enough for password protection and can be reversed to expose plain text passwords.\n- **Do** use a secure hashing algorithm specifically designed for password storage, such as Argon2id. Hashing is a one-way process, making it significantly more secure for storing passwords.\n```javascript\nconst argon2 = require(\"argon2\");\nconst hash = await argon2.hash(req.params.password, { type: argon2.argon2id })\n```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)","markdown":"## Description\n\nUsing RC4 for encrypting passwords is insecure. RC4 is a weak encryption algorithm that can be easily compromised, leading to potential security risks. Furthermore, using any form of encryption for passwords is not advisable because encryption is designed to be reversible. This means that given enough resources, an attacker could decrypt the passwords and access them in plain text. For securing passwords, hashing is the recommended approach because it is a one-way process that does not allow for the original password to be retrieved.\n\n## Remediations\n\n- **Do not** use RC4 or any encryption algorithm for password storage. Encryption algorithms are not secure enough for password protection and can be reversed to expose plain text passwords.\n- **Do** use a secure hashing algorithm specifically designed for password storage, such as Argon2id. Hashing is a one-way process, making it significantly more secure for storing passwords.\n```javascript\nconst argon2 = require(\"argon2\");\nconst hash = await argon2.hash(req.params.password, { type: argon2.argon2id })\n```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)"}},{"id":"python_third_parties_scout_apm","name":"python_third_parties_scout_apm","shortDescription":{"text":"Leakage of sensitive data to Scout APM"},"fullDescription":{"text":"Leakage of sensitive data to Scout APM"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Scout APM is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Scout APM.\n\n## References\n- [Scout APM docs](https://scoutapm.com/docs/python)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Scout APM is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Scout APM.\n\n## References\n- [Scout APM docs](https://scoutapm.com/docs/python)\n"}},{"id":"python_django_crlf_injection","name":"python_django_crlf_injection","shortDescription":{"text":"Possible CLRF injection detected"},"fullDescription":{"text":"Possible CLRF injection detected"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nCRLF (Carriage Return Line Feed) injection vulnerability occurs when an attacker is able to insert a sequence of line termination characters into a log message or a file. This can lead to forged log entries, compromising the integrity of log files, or worse, a denial-of-service (DoS) if an attacker abuses the vulnerability by using up all available disk space. \n\n## Remediations\n\n- **Do** strip any carriage return and line feed characters from user input data before logging it or writing to a file. This prevents attackers from injecting malicious CRLF sequences.\n  ```python\n  response.write(user_input.replaceAll(\"[\\r\\n]+\", \"\"));\n  ```\n\n## References\n\n- [OWASP CRLF Injection](https://owasp.org/www-community/vulnerabilities/CRLF_Injection)","markdown":"## Description\n\nCRLF (Carriage Return Line Feed) injection vulnerability occurs when an attacker is able to insert a sequence of line termination characters into a log message or a file. This can lead to forged log entries, compromising the integrity of log files, or worse, a denial-of-service (DoS) if an attacker abuses the vulnerability by using up all available disk space. \n\n## Remediations\n\n- **Do** strip any carriage return and line feed characters from user input data before logging it or writing to a file. This prevents attackers from injecting malicious CRLF sequences.\n  ```python\n  response.write(user_input.replaceAll(\"[\\r\\n]+\", \"\"));\n  ```\n\n## References\n\n- [OWASP CRLF Injection](https://owasp.org/www-community/vulnerabilities/CRLF_Injection)"}},{"id":"go_gosec_memory_math_big_rat","name":"go_gosec_memory_math_big_rat","shortDescription":{"text":"Possible integer overflow when converting strings"},"fullDescription":{"text":"Possible integer overflow when converting strings"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen you convert strings to integers in Go using `strconv.Atoi`, you might encounter an integer overflow if you assign the result to a smaller integer type like `int16` or `int32`. This is because the size of `int` type in Go is not fixed and depends on the system architecture (32 bits on a 32-bit system and 64 bits on a 64-bit system). An overflow occurs if the `strconv.Atoi` return value is too large for the intended smaller integer type.\n\n## Remediations\n\n- **Do** verify the value from `strconv.Atoi` fits within the range of your target integer type before conversion.\n  ```go\n  if intValue, err := strconv.Atoi(stringValue); err == nil {\n    if intValue \u003e= math.MinInt16 \u0026\u0026 intValue \u003c= math.MaxInt16 {\n      int16Value := int16(intValue)\n    }\n  }\n  ```\n- **Do** use type-specific parsing functions like `strconv.ParseInt` with the appropriate bit size to ensure you get the type you need.\n  ```go\n  if int64Value, err := strconv.ParseInt(stringValue, 10, 16); err == nil {\n    int16Value := int16(int64Value)\n  }\n  ```\n- **Do not** cast the result of `strconv.Atoi` to a smaller integer type without ensuring the value is within the acceptable range for that type.\n- **Do not** ignore errors from `strconv.Atoi`. Always handle them to detect conversion problems, including possible overflows.\n\n## References\n\n- [Go strconv package](https://pkg.go.dev/strconv)\n- [Go math package for min/max constants](https://pkg.go.dev/math#pkg-constants)","markdown":"## Description\n\nWhen you convert strings to integers in Go using `strconv.Atoi`, you might encounter an integer overflow if you assign the result to a smaller integer type like `int16` or `int32`. This is because the size of `int` type in Go is not fixed and depends on the system architecture (32 bits on a 32-bit system and 64 bits on a 64-bit system). An overflow occurs if the `strconv.Atoi` return value is too large for the intended smaller integer type.\n\n## Remediations\n\n- **Do** verify the value from `strconv.Atoi` fits within the range of your target integer type before conversion.\n  ```go\n  if intValue, err := strconv.Atoi(stringValue); err == nil {\n    if intValue \u003e= math.MinInt16 \u0026\u0026 intValue \u003c= math.MaxInt16 {\n      int16Value := int16(intValue)\n    }\n  }\n  ```\n- **Do** use type-specific parsing functions like `strconv.ParseInt` with the appropriate bit size to ensure you get the type you need.\n  ```go\n  if int64Value, err := strconv.ParseInt(stringValue, 10, 16); err == nil {\n    int16Value := int16(int64Value)\n  }\n  ```\n- **Do not** cast the result of `strconv.Atoi` to a smaller integer type without ensuring the value is within the acceptable range for that type.\n- **Do not** ignore errors from `strconv.Atoi`. Always handle them to detect conversion problems, including possible overflows.\n\n## References\n\n- [Go strconv package](https://pkg.go.dev/strconv)\n- [Go math package for min/max constants](https://pkg.go.dev/math#pkg-constants)"}},{"id":"python_lang_nosql_injection","name":"python_lang_nosql_injection","shortDescription":{"text":"Unsanitized input in NoSQL query"},"fullDescription":{"text":"Unsanitized input in NoSQL query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized data in NoSQL queries exposes your application to NoSQL injection attacks. This vulnerability arises when user input, request data, or any externally influenced data is directly passed into a NoSQL query function without proper sanitization.\n\n## Remediations\n\n- **Do not** include raw, unsanitized user input in NoSQL queries. This practice can lead to NoSQL injection vulnerabilities.\n  ```python\n    query = '{ \"username\": \"' + unsafe_input + '\" }'\n    collection.findOne(query) # unsafe\n  ```\n- **Do** use parameterized queries instead of concatenating strings. This ensures that you take advantage of any built-in input sanitization that your NoSQL client may offer.\n  ```python\n    collection.findOne({ \"username\": unsafe_input });\n  ```\n- **Do** sanitize and validate all input data before using it in NoSQL queries. Ensuring data is properly sanitized and validated can prevent NoSQL injection attacks. For example, you could parse external data as a string or convert the data into an appropriate BSON type. \n  ```python\n    username = request.GET.get(\"username\")\n    collection.findOne({ \"username\": str(unsafe_input) });\n    # or \n    collection.findOne({ \"uuid\": bson.ObjectId(unsafe_input) })\n  ```\n\n## References\n\n- [OWASP NoSQL injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n","markdown":"## Description\n\nUsing unsanitized data in NoSQL queries exposes your application to NoSQL injection attacks. This vulnerability arises when user input, request data, or any externally influenced data is directly passed into a NoSQL query function without proper sanitization.\n\n## Remediations\n\n- **Do not** include raw, unsanitized user input in NoSQL queries. This practice can lead to NoSQL injection vulnerabilities.\n  ```python\n    query = '{ \"username\": \"' + unsafe_input + '\" }'\n    collection.findOne(query) # unsafe\n  ```\n- **Do** use parameterized queries instead of concatenating strings. This ensures that you take advantage of any built-in input sanitization that your NoSQL client may offer.\n  ```python\n    collection.findOne({ \"username\": unsafe_input });\n  ```\n- **Do** sanitize and validate all input data before using it in NoSQL queries. Ensuring data is properly sanitized and validated can prevent NoSQL injection attacks. For example, you could parse external data as a string or convert the data into an appropriate BSON type. \n  ```python\n    username = request.GET.get(\"username\")\n    collection.findOne({ \"username\": str(unsafe_input) });\n    # or \n    collection.findOne({ \"uuid\": bson.ObjectId(unsafe_input) })\n  ```\n\n## References\n\n- [OWASP NoSQL injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n"}},{"id":"javascript_hapi_open_redirect","name":"javascript_hapi_open_redirect","shortDescription":{"text":"Unsanitized user input in redirect"},"fullDescription":{"text":"Unsanitized user input in redirect"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input for redirects can make your application vulnerable to phishing attacks. This occurs when user input directly influences the destination of a redirect without any validation, potentially leading to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirects. This practice can inadvertently lead to phishing attacks.\n- **Do** validate user input by employing a safelist or predefined mapping for URL construction. This ensures that redirects only lead to safe and intended destinations.\n  ```javascript\n  var map = {\n    \"1\": \"/planes\",\n    \"2\": \"/trains\",\n    \"3\": \"/automobiles\",\n  }\n\n  res.redirect(map[req.body.transport])\n  ```\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized user input for redirects can make your application vulnerable to phishing attacks. This occurs when user input directly influences the destination of a redirect without any validation, potentially leading to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirects. This practice can inadvertently lead to phishing attacks.\n- **Do** validate user input by employing a safelist or predefined mapping for URL construction. This ensures that redirects only lead to safe and intended destinations.\n  ```javascript\n  var map = {\n    \"1\": \"/planes\",\n    \"2\": \"/trains\",\n    \"3\": \"/automobiles\",\n  }\n\n  res.redirect(map[req.body.transport])\n  ```\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)"}},{"id":"ruby_lang_weak_hash_sha","name":"ruby_lang_weak_hash_sha","shortDescription":{"text":"Usage of weak hashing library (SHA)"},"fullDescription":{"text":"Usage of weak hashing library (SHA)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library, such as SHA or SHA-1, compromises data security. These algorithms are no longer considered secure due to vulnerabilities that can lead to data breaches.\n\n## Remediations\n\n- **Do not** use SHA or SHA-1 for hashing. These algorithms are outdated and vulnerable to attacks.\n  ```ruby\n  Digest::SHA.hexdigest('weak hash')\n  Digest::SHA1.hexdigest('weak hash')\n  ```\n- **Do** use stronger hashing algorithms like bcrypt for enhanced security.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)","markdown":"## Description\n\nUsing a weak hashing library, such as SHA or SHA-1, compromises data security. These algorithms are no longer considered secure due to vulnerabilities that can lead to data breaches.\n\n## Remediations\n\n- **Do not** use SHA or SHA-1 for hashing. These algorithms are outdated and vulnerable to attacks.\n  ```ruby\n  Digest::SHA.hexdigest('weak hash')\n  Digest::SHA1.hexdigest('weak hash')\n  ```\n- **Do** use stronger hashing algorithms like bcrypt for enhanced security.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)"}},{"id":"javascript_lang_manual_html_sanitization","name":"javascript_lang_manual_html_sanitization","shortDescription":{"text":"Usage of manual HTML sanitization (XSS)"},"fullDescription":{"text":"Usage of manual HTML sanitization (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nManually sanitizing HTML is prone to mistakes and can lead to Cross-Site Scripting (XSS) vulnerabilities. This occurs when user input is not properly sanitized, allowing attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** manually escape HTML to sanitize user input. This method is unreliable and can easily miss certain exploits.\n  ```javascript\n  const sanitizedUserInput = user.Input\n    .replaceAll('\u003c', '\u0026lt;')\n    .replaceAll('\u003e', '\u0026gt;'); // unsafe\n  const html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n  ```\n- **Do** use a trusted HTML sanitization library to handle user input safely. Libraries designed for sanitization are more reliable as they cover a wide range of XSS attack vectors.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","markdown":"## Description\n\nManually sanitizing HTML is prone to mistakes and can lead to Cross-Site Scripting (XSS) vulnerabilities. This occurs when user input is not properly sanitized, allowing attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** manually escape HTML to sanitize user input. This method is unreliable and can easily miss certain exploits.\n  ```javascript\n  const sanitizedUserInput = user.Input\n    .replaceAll('\u003c', '\u0026lt;')\n    .replaceAll('\u003e', '\u0026gt;'); // unsafe\n  const html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n  ```\n- **Do** use a trusted HTML sanitization library to handle user input safely. Libraries designed for sanitization are more reliable as they cover a wide range of XSS attack vectors.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)"}},{"id":"go_lang_insecure_cookie","name":"go_lang_insecure_cookie","shortDescription":{"text":"Missing Secure option in cookie configuration"},"fullDescription":{"text":"Missing Secure option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nMissing the Secure option in cookie configuration can compromise cookie security. The Secure attribute, when set to true, ensures cookies are sent to the server only over HTTPS, protecting them from interception by unauthorized parties.\n\n## Remediations\n\n- **Do** set the `Secure` attribute for cookies to `true`. This ensures cookies are transmitted securely over HTTPS, preventing unauthorized access.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      Secure:   true,\n      // Additional flags like HttpOnly, SameSite, etc., should be set as needed.\n  })\n  ```\n- **Do** also set `HttpOnly`, `SameSite`, and `Domain` attributes for cookies as needed by your application. These attributes provide additional layers of security for your cookies.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)","markdown":"## Description\n\nMissing the Secure option in cookie configuration can compromise cookie security. The Secure attribute, when set to true, ensures cookies are sent to the server only over HTTPS, protecting them from interception by unauthorized parties.\n\n## Remediations\n\n- **Do** set the `Secure` attribute for cookies to `true`. This ensures cookies are transmitted securely over HTTPS, preventing unauthorized access.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      Secure:   true,\n      // Additional flags like HttpOnly, SameSite, etc., should be set as needed.\n  })\n  ```\n- **Do** also set `HttpOnly`, `SameSite`, and `Domain` attributes for cookies as needed by your application. These attributes provide additional layers of security for your cookies.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)"}},{"id":"go_third_parties_datadog","name":"go_third_parties_datadog","shortDescription":{"text":"Leakage of sensitive data to Datadog"},"fullDescription":{"text":"Leakage of sensitive data to Datadog"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=go#scrub-sensitive-data-from-your-spans)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=go#scrub-sensitive-data-from-your-spans)\n"}},{"id":"ruby_lang_weak_password_encryption_rsa","name":"ruby_lang_weak_password_encryption_rsa","shortDescription":{"text":"Usage of weak encryption algorithm on a password (RSA)"},"fullDescription":{"text":"Usage of weak encryption algorithm on a password (RSA)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak encryption algorithm like 1024-bit RSA for passwords increases the risk of data breaches. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use 1024-bit RSA encryption for passwords as it is considered weak and vulnerable to attacks.\n- **Do** use stronger encryption methods such as bcrypt or Argon2id for securing passwords. These libraries provide a higher level of security and are recommended for password storage.\n```ruby\nBCrypt::Password.create(\"password_123\")\n```\n```ruby\nhasher = Argon2::Password.new()\nhasher.create(\"password_123\")\n```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)","markdown":"## Description\n\nUsing a weak encryption algorithm like 1024-bit RSA for passwords increases the risk of data breaches. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use 1024-bit RSA encryption for passwords as it is considered weak and vulnerable to attacks.\n- **Do** use stronger encryption methods such as bcrypt or Argon2id for securing passwords. These libraries provide a higher level of security and are recommended for password storage.\n```ruby\nBCrypt::Password.create(\"password_123\")\n```\n```ruby\nhasher = Argon2::Password.new()\nhasher.create(\"password_123\")\n```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)"}},{"id":"python_third_parties_airbrake","name":"python_third_parties_airbrake","shortDescription":{"text":"Leakage of sensitive data to Airbrake"},"fullDescription":{"text":"Leakage of sensitive data to Airbrake"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/docs/platforms/python/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/docs/platforms/python/)\n"}},{"id":"go_lang_weak_hash_md5","name":"go_lang_weak_hash_md5","shortDescription":{"text":"Usage of weak hashing library (MD5)"},"fullDescription":{"text":"Usage of weak hashing library (MD5)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. It is considered a weak hash algorithm and can compromise data security.\n  ```go\n  md5.Sum([]byte(\"password\")) // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```go\n  sha256.Sum256([]byte(\"string\"))\n  ```","markdown":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. It is considered a weak hash algorithm and can compromise data security.\n  ```go\n  md5.Sum([]byte(\"password\")) // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```go\n  sha256.Sum256([]byte(\"string\"))\n  ```"}},{"id":"ruby_third_parties_rollbar","name":"ruby_third_parties_rollbar","shortDescription":{"text":"Leakage of sensitive data to Rollbar"},"fullDescription":{"text":"Leakage of sensitive data to Rollbar"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/ruby)\n- [Scrubbing items](https://docs.rollbar.com/docs/ruby#section-scrubbing-items)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/ruby)\n- [Scrubbing items](https://docs.rollbar.com/docs/ruby#section-scrubbing-items)\n"}},{"id":"python_lang_weak_password_encryption_md5","name":"python_lang_weak_password_encryption_md5","shortDescription":{"text":"Usage of weak hashing library on a password (MD5)"},"fullDescription":{"text":"Usage of weak hashing library on a password (MD5)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like MD5 for passwords increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing passwords as it is considered weak and vulnerable to attacks.\n  ```python\n  hashlib.md5(user.password).digest() # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```python\n  hashlib.sha256(user.password).digest()\n  ```","markdown":"## Description\n\nUsing a weak hashing library like MD5 for passwords increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing passwords as it is considered weak and vulnerable to attacks.\n  ```python\n  hashlib.md5(user.password).digest() # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```python\n  hashlib.sha256(user.password).digest()\n  ```"}},{"id":"php_lang_cookie_missing_http_only","name":"php_lang_cookie_missing_http_only","shortDescription":{"text":"Missing HTTP Only option in cookie configuration"},"fullDescription":{"text":"Missing HTTP Only option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nNot setting the \"httponly\" attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling \"httponly\" is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the `httponly` attribute to `true` in your cookie configurations. This action prevents client-side scripts from sending or accessing the cookie, enhancing your application's security against XSS attacks.\n  ```php\n  setcookie(\"name\", \"value\", httponly: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","markdown":"## Description\n\nNot setting the \"httponly\" attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling \"httponly\" is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the `httponly` attribute to `true` in your cookie configurations. This action prevents client-side scripts from sending or accessing the cookie, enhancing your application's security against XSS attacks.\n  ```php\n  setcookie(\"name\", \"value\", httponly: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)"}},{"id":"ruby_lang_weak_password_hash_sha","name":"ruby_lang_weak_password_hash_sha","shortDescription":{"text":"Usage of weak hashing library on a password (SHA)"},"fullDescription":{"text":"Usage of weak hashing library on a password (SHA)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing weak hashing algorithms like SHA or SHA-1 for password storage compromises security. These algorithms are vulnerable to attacks, making it easier for attackers to crack passwords and access sensitive information.\n\n## Remediations\n\n- **Do not** use SHA or SHA-1 for hashing passwords. These algorithms are no longer considered secure due to their vulnerability to various attacks.\n  ```ruby\n  Digest::SHA1.hexdigest('password_123') # unsafe\n  ```\n- **Do** use stronger hashing libraries such as bcrypt or Argon2id for password encryption. These libraries provide enhanced security features that make it significantly harder for attackers to breach password data.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)","markdown":"## Description\n\nUsing weak hashing algorithms like SHA or SHA-1 for password storage compromises security. These algorithms are vulnerable to attacks, making it easier for attackers to crack passwords and access sensitive information.\n\n## Remediations\n\n- **Do not** use SHA or SHA-1 for hashing passwords. These algorithms are no longer considered secure due to their vulnerability to various attacks.\n  ```ruby\n  Digest::SHA1.hexdigest('password_123') # unsafe\n  ```\n- **Do** use stronger hashing libraries such as bcrypt or Argon2id for password encryption. These libraries provide enhanced security features that make it significantly harder for attackers to breach password data.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)"}},{"id":"javascript_lang_eval_user_input","name":"javascript_lang_eval_user_input","shortDescription":{"text":"Unsanitized user input in 'eval' type function"},"fullDescription":{"text":"Unsanitized user input in 'eval' type function"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAllowing user input to directly influence the behavior of `eval` and similar functions like `setTimeout` poses a significant security risk, potentially leading to remote code execution attacks. This vulnerability stems from the dynamic execution of code, which can be maliciously crafted by an attacker.\n\n## Remediations\n\n- **Do not** use `eval` or similar code execution functions directly with user input. This approach can make your application vulnerable to attacks.\n  ```javascript\n  eval(userInput); // unsafe\n  ```\n- **Do** use static, hardcoded values when working with dynamic code execution methods. This method ensures that only predefined operations are performed, reducing the risk of executing malicious code.\n  ```javascript\n    let myFunc = \"(a, b) =\u003e a + b\";\n    if (req.params[\"single_item\"]) {\n      myFunc = \"(a) =\u003e a\";\n    }\n  ```\n- **Do** consider using compiled functions instead of dynamically compiling code with user input. This practice allows for safer execution of dynamic operations by predefining the code to be executed.\n- **Do** enable JavaScript's strict mode in your code. This mode helps to catch common coding bloopers, prevents unsafe actions, and limits certain features that can make your code more secure.\n  ```javascript\n  \"use strict\";\n  ```\n\n## References\n\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)","markdown":"## Description\n\nAllowing user input to directly influence the behavior of `eval` and similar functions like `setTimeout` poses a significant security risk, potentially leading to remote code execution attacks. This vulnerability stems from the dynamic execution of code, which can be maliciously crafted by an attacker.\n\n## Remediations\n\n- **Do not** use `eval` or similar code execution functions directly with user input. This approach can make your application vulnerable to attacks.\n  ```javascript\n  eval(userInput); // unsafe\n  ```\n- **Do** use static, hardcoded values when working with dynamic code execution methods. This method ensures that only predefined operations are performed, reducing the risk of executing malicious code.\n  ```javascript\n    let myFunc = \"(a, b) =\u003e a + b\";\n    if (req.params[\"single_item\"]) {\n      myFunc = \"(a) =\u003e a\";\n    }\n  ```\n- **Do** consider using compiled functions instead of dynamically compiling code with user input. This practice allows for safer execution of dynamic operations by predefining the code to be executed.\n- **Do** enable JavaScript's strict mode in your code. This mode helps to catch common coding bloopers, prevents unsafe actions, and limits certain features that can make your code more secure.\n  ```javascript\n  \"use strict\";\n  ```\n\n## References\n\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"}},{"id":"javascript_third_parties_passport_hardcoded_secret","name":"javascript_third_parties_passport_hardcoded_secret","shortDescription":{"text":"Usage of hard-coded passport secret"},"fullDescription":{"text":"Usage of hard-coded passport secret"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring secrets directly in your code, such as a passport authentication secret, is insecure. This practice makes your application vulnerable to attacks if the codebase is exposed.\n\n## Remediations\n\n- **Do not** hard-code secrets in your application code. Hard-coding makes sensitive information easily accessible to anyone who can view the code.\n  ```javascript\n  const strategy = new GoogleStrategy({ clientSecret: 'your_hardcoded_secret' }); // unsafe\n  passport.use(strategy);\n  ```\n- **Do** use environment variables to manage secrets securely. This method keeps sensitive information out of your codebase and makes it more difficult for unauthorized users to access.\n  ```javascript\n  const strategy = new GoogleStrategy({ clientSecret: process.env.GOOGLE_SECRET });\n  passport.use(strategy);\n  ```\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)","markdown":"## Description\n\nStoring secrets directly in your code, such as a passport authentication secret, is insecure. This practice makes your application vulnerable to attacks if the codebase is exposed.\n\n## Remediations\n\n- **Do not** hard-code secrets in your application code. Hard-coding makes sensitive information easily accessible to anyone who can view the code.\n  ```javascript\n  const strategy = new GoogleStrategy({ clientSecret: 'your_hardcoded_secret' }); // unsafe\n  passport.use(strategy);\n  ```\n- **Do** use environment variables to manage secrets securely. This method keeps sensitive information out of your codebase and makes it more difficult for unauthorized users to access.\n  ```javascript\n  const strategy = new GoogleStrategy({ clientSecret: process.env.GOOGLE_SECRET });\n  passport.use(strategy);\n  ```\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)"}},{"id":"python_django_open_redirect","name":"python_django_open_redirect","shortDescription":{"text":"Unsanitized user input in redirect"},"fullDescription":{"text":"Unsanitized user input in redirect"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n```python\npaths = dict(\n  1=\"/planes\",\n  2=\"/trains\",\n  3=\"/automobiles\"\n)\n\ntransport = request.GET[\"transport\"]\nredirect(paths[transport]);\n```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n```python\npaths = dict(\n  1=\"/planes\",\n  2=\"/trains\",\n  3=\"/automobiles\"\n)\n\ntransport = request.GET[\"transport\"]\nredirect(paths[transport]);\n```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)"}},{"id":"ruby_third_parties_algolia","name":"ruby_third_parties_algolia","shortDescription":{"text":"Leakage of sensitive data to Algolia"},"fullDescription":{"text":"Leakage of sensitive data to Algolia"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools like Algolia is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Algolia.\n\n## References\n- [Algolia docs](https://www.algolia.com/doc/)\n"}},{"id":"javascript_lang_dangerous_insert_html","name":"javascript_lang_dangerous_insert_html","shortDescription":{"text":"Unsanitized user input in dynamic HTML insertion (XSS)"},"fullDescription":{"text":"Unsanitized user input in dynamic HTML insertion (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","markdown":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)"}},{"id":"ruby_lang_eval_linter","name":"ruby_lang_eval_linter","shortDescription":{"text":"Usage of dangerous 'eval' function"},"fullDescription":{"text":"Usage of dangerous 'eval' function"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe use of the `eval` function, which dynamically executes code represented as strings, poses a high security risk in any programming environment. This is primarily because it can be exploited to run arbitrary and potentially harmful code, making the application vulnerable to code injection attacks.\n\n## Remediations\n\n- **Do not** use the `eval` function. Its ability to execute code that can be manipulated by an attacker introduces various injection vulnerabilities.\n  ```ruby\n  eval(\"def hello_world; puts 'Hello world!'; end\")\n  ```\n- **Do** explore safer alternatives to `eval`. Use language features or libraries specifically designed for the task you're trying to accomplish with `eval`.\n- **Do** validate and sanitize all inputs if you must use dynamic code execution. This reduces the risk of executing malicious code.\n- **Do** use restricted execution environments for running code dynamically if absolutely necessary. This minimizes the potential impact of malicious code execution by isolating it from the main application environment.\n\n## References\n\n- [OWASP: Eval Injection](https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection)\n- [MDN Web Docs: Never use eval!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)","markdown":"## Description\n\nThe use of the `eval` function, which dynamically executes code represented as strings, poses a high security risk in any programming environment. This is primarily because it can be exploited to run arbitrary and potentially harmful code, making the application vulnerable to code injection attacks.\n\n## Remediations\n\n- **Do not** use the `eval` function. Its ability to execute code that can be manipulated by an attacker introduces various injection vulnerabilities.\n  ```ruby\n  eval(\"def hello_world; puts 'Hello world!'; end\")\n  ```\n- **Do** explore safer alternatives to `eval`. Use language features or libraries specifically designed for the task you're trying to accomplish with `eval`.\n- **Do** validate and sanitize all inputs if you must use dynamic code execution. This reduces the risk of executing malicious code.\n- **Do** use restricted execution environments for running code dynamically if absolutely necessary. This minimizes the potential impact of malicious code execution by isolating it from the main application environment.\n\n## References\n\n- [OWASP: Eval Injection](https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection)\n- [MDN Web Docs: Never use eval!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)"}},{"id":"ruby_rails_unsafe_mass_assignment","name":"ruby_rails_unsafe_mass_assignment","shortDescription":{"text":"Possible dangerous permitted parameter key"},"fullDescription":{"text":"Possible dangerous permitted parameter key"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nPermitting high-risk parameter keys in Rails applications exposes them to mass assignment vulnerabilities.\n\nIn Rails, mass assignment is when we use a hash to assign attributes all at once rather than individually. This feature is often used for creating or updating records.\n\nWhen used with an untrusted hash (for example, the `params` hash in a controller), mass assignment is open to attack because any attribute on the record that corresponds to a key in the hash will be automatically assigned the value in the hash. An attacker could exploit this vulnerability to change their role and permissions or to assign themselves as an admin.\n\nBy default, Rails' strong parameters protect against mass assignment vulnerability. However, the inclusion of sensitive or high-risk keys in the permitted list can still leave the application vulnerable.\n\n## Remediations\n\n- **Do not** include high-risk parameters such as :admin or :role in the list of permitted keys for mass assignment, to prevent attackers from exploiting these attributes to escalate their privileges.\n  ```ruby\n  user_params = params.require(:user).permit(:admin, :role) # unsafe\n  ```\n- **Do not** use mass assignment with an untrusted hash, such as `params`.\n  ```ruby\n  User.new(params) # unsafe\n  ```\n\n## References\n\n- [OWASP Mass Assignment Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n- [Ruby on Rails security guide on mass assignment](https://guides.rubyonrails.org/v3.2.9/security.html#mass-assignment)","markdown":"## Description\n\nPermitting high-risk parameter keys in Rails applications exposes them to mass assignment vulnerabilities.\n\nIn Rails, mass assignment is when we use a hash to assign attributes all at once rather than individually. This feature is often used for creating or updating records.\n\nWhen used with an untrusted hash (for example, the `params` hash in a controller), mass assignment is open to attack because any attribute on the record that corresponds to a key in the hash will be automatically assigned the value in the hash. An attacker could exploit this vulnerability to change their role and permissions or to assign themselves as an admin.\n\nBy default, Rails' strong parameters protect against mass assignment vulnerability. However, the inclusion of sensitive or high-risk keys in the permitted list can still leave the application vulnerable.\n\n## Remediations\n\n- **Do not** include high-risk parameters such as :admin or :role in the list of permitted keys for mass assignment, to prevent attackers from exploiting these attributes to escalate their privileges.\n  ```ruby\n  user_params = params.require(:user).permit(:admin, :role) # unsafe\n  ```\n- **Do not** use mass assignment with an untrusted hash, such as `params`.\n  ```ruby\n  User.new(params) # unsafe\n  ```\n\n## References\n\n- [OWASP Mass Assignment Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n- [Ruby on Rails security guide on mass assignment](https://guides.rubyonrails.org/v3.2.9/security.html#mass-assignment)"}},{"id":"javascript_lang_jwt_weak_encryption","name":"javascript_lang_jwt_weak_encryption","shortDescription":{"text":"Usage of weak encryption algorithm in JWT"},"fullDescription":{"text":"Usage of weak encryption algorithm in JWT"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nImplementing weak encryption algorithms in JWT (JSON Web Tokens) compromises the security of the tokens. This vulnerability occurs when an encryption algorithm that does not offer sufficient security strength is used, making the tokens susceptible to attacks.\n\n## Remediations\n\n- **Do** use robust encryption algorithms recommended for JWT. HS256 (HMAC with SHA-256) is a secure choice for signing JWTs.\n  ```javascript\n  jwt.sign({ \"foo\": \"bar\"}, process.env.JWT_SECRET, {\n    algorithm: \"HS256\"\n  })\n  ```\n\n## References\n\n- [OWASP weak encryption](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption)","markdown":"## Description\n\nImplementing weak encryption algorithms in JWT (JSON Web Tokens) compromises the security of the tokens. This vulnerability occurs when an encryption algorithm that does not offer sufficient security strength is used, making the tokens susceptible to attacks.\n\n## Remediations\n\n- **Do** use robust encryption algorithms recommended for JWT. HS256 (HMAC with SHA-256) is a secure choice for signing JWTs.\n  ```javascript\n  jwt.sign({ \"foo\": \"bar\"}, process.env.JWT_SECRET, {\n    algorithm: \"HS256\"\n  })\n  ```\n\n## References\n\n- [OWASP weak encryption](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption)"}},{"id":"go_gosec_memory_integer_overflow","name":"go_gosec_memory_integer_overflow","shortDescription":{"text":"Possible integer overflow"},"fullDescription":{"text":"Possible integer overflow"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIn Go, the size of an `int` type is not fixed and depends on the system architecture (32 bits on a 32-bit system and 64 bits on a 64-bit system). This can lead to integer overflow when a value is converted from `strconv.Atoi` to a smaller integer type like `int32` or `int16`, and the value exceeds what the smaller type can hold. Integer overflow can result in unpredictable behavior and severe bugs.\n\n## Remediations\n\n- **Do** check values before conversion to a smaller type. Ensure the value does not exceed the maximum value the target type can hold.\n- **Do** always handle errors from conversion functions like `strconv.Atoi` to promptly address and manage conversion issues.\n- **Do** use fixed-size types like `int32` or `int64` when possible to avoid overflow issues that arise from architecture-dependent sizes.\n  ```go\n    if intValue, err := strconv.Atoi(stringValue); err == nil {\n      if intValue \u003e= math.MinInt16 \u0026\u0026 intValue \u003c= math.MaxInt16 {\n        int16Value := int16(intValue)\n      }\n    }\n  ```\n\n## References\n\n- [Go math package for integer limits](https://pkg.go.dev/math#pkg-constants)","markdown":"## Description\n\nIn Go, the size of an `int` type is not fixed and depends on the system architecture (32 bits on a 32-bit system and 64 bits on a 64-bit system). This can lead to integer overflow when a value is converted from `strconv.Atoi` to a smaller integer type like `int32` or `int16`, and the value exceeds what the smaller type can hold. Integer overflow can result in unpredictable behavior and severe bugs.\n\n## Remediations\n\n- **Do** check values before conversion to a smaller type. Ensure the value does not exceed the maximum value the target type can hold.\n- **Do** always handle errors from conversion functions like `strconv.Atoi` to promptly address and manage conversion issues.\n- **Do** use fixed-size types like `int32` or `int64` when possible to avoid overflow issues that arise from architecture-dependent sizes.\n  ```go\n    if intValue, err := strconv.Atoi(stringValue); err == nil {\n      if intValue \u003e= math.MinInt16 \u0026\u0026 intValue \u003c= math.MaxInt16 {\n        int16Value := int16(intValue)\n      }\n    }\n  ```\n\n## References\n\n- [Go math package for integer limits](https://pkg.go.dev/math#pkg-constants)"}},{"id":"ruby_rails_session_key_using_user_input","name":"ruby_rails_session_key_using_user_input","shortDescription":{"text":"Unsanitized user input in session key"},"fullDescription":{"text":"Unsanitized user input in session key"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in session key poses a security risk. When user-defined data is directly used in session keys, attackers could be able to manipulate session data or perform unauthorized actions by exploiting the predictability or vulnerability of the session mechanism.\n\n## Remediations\n\n- **Do not** use user-defined data directly in session keys. This can lead to security vulnerabilities.\n  ```ruby\n  session[\"test-#{params[:unsafe]}\"] = 42\n  ```\n- **Do** sanitize user input before incorporating it into session keys. Ensure that any data derived from user input is properly validated and sanitized to prevent injection attacks.\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)","markdown":"## Description\n\nUnsanitized user input in session key poses a security risk. When user-defined data is directly used in session keys, attackers could be able to manipulate session data or perform unauthorized actions by exploiting the predictability or vulnerability of the session mechanism.\n\n## Remediations\n\n- **Do not** use user-defined data directly in session keys. This can lead to security vulnerabilities.\n  ```ruby\n  session[\"test-#{params[:unsafe]}\"] = 42\n  ```\n- **Do** sanitize user input before incorporating it into session keys. Ensure that any data derived from user input is properly validated and sanitized to prevent injection attacks.\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)"}},{"id":"python_lang_deserialization_of_user_input","name":"python_lang_deserialization_of_user_input","shortDescription":{"text":"Unsanitized user input in deserialization method"},"fullDescription":{"text":"Unsanitized user input in deserialization method"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nDeserializing data from untrusted sources, like user inputs or request parameters, without proper verification is a security risk. Attackers can embed malicious code or payloads within serialized data. When your application deserializes this data without checks, it becomes vulnerable to attacks.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This can lead to security vulnerabilities.\n- **Do** validate and sanitize all data before deserializing it. Ensure that the data is coming from a trusted source and is in the expected format.\n- **Do** use data formats that are purely data-oriented and not tied to a specific programming language, such as JSON or XML, for serialization and deserialization. This approach minimizes the risk of executing malicious code during deserialization.\n- **Do** use recommended safer alternatives wherever possible. For example, instead of PyYAML's `load` function, use the `safe_load` function which limits results to simple Python objects like integers or lists.\n  ```python\n    yaml.safe_load(some_input) # safer alternative to PyYAML load \n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)","markdown":"## Description\n\nDeserializing data from untrusted sources, like user inputs or request parameters, without proper verification is a security risk. Attackers can embed malicious code or payloads within serialized data. When your application deserializes this data without checks, it becomes vulnerable to attacks.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This can lead to security vulnerabilities.\n- **Do** validate and sanitize all data before deserializing it. Ensure that the data is coming from a trusted source and is in the expected format.\n- **Do** use data formats that are purely data-oriented and not tied to a specific programming language, such as JSON or XML, for serialization and deserialization. This approach minimizes the risk of executing malicious code during deserialization.\n- **Do** use recommended safer alternatives wherever possible. For example, instead of PyYAML's `load` function, use the `safe_load` function which limits results to simple Python objects like integers or lists.\n  ```python\n    yaml.safe_load(some_input) # safer alternative to PyYAML load \n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)"}},{"id":"javascript_third_parties_dynamodb_query_injection","name":"javascript_third_parties_dynamodb_query_injection","shortDescription":{"text":"Unsanitized user input in DynamoDB query"},"fullDescription":{"text":"Unsanitized user input in DynamoDB query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw queries makes your application vulnerable to injection attacks.\n\n## Remediations\n\n- **Do** narrow down your query from the code instead of using unsanitzed user input to define it.\n  ```javascript\n  exports.handler = async function(event, context) {\n      var params = {\n          Key: {\n          \"artist\": {\"S\": event.input },\n          \"song\": {\"S\": \"Carrot Eton\"}\n          },\n          TableName: \"artists\"\n      };\n      var result = await dynamodb.getItem(params).promise()\n      console.log(JSON.stringify(result))\n  }\n  ```\n\n## References\n\n- [OWASP nosql injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n","markdown":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw queries makes your application vulnerable to injection attacks.\n\n## Remediations\n\n- **Do** narrow down your query from the code instead of using unsanitzed user input to define it.\n  ```javascript\n  exports.handler = async function(event, context) {\n      var params = {\n          Key: {\n          \"artist\": {\"S\": event.input },\n          \"song\": {\"S\": \"Carrot Eton\"}\n          },\n          TableName: \"artists\"\n      };\n      var result = await dynamodb.getItem(params).promise()\n      console.log(JSON.stringify(result))\n  }\n  ```\n\n## References\n\n- [OWASP nosql injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n"}},{"id":"ruby_lang_logger","name":"ruby_lang_logger","shortDescription":{"text":"Leakage of sensitive information in logger message"},"fullDescription":{"text":"Leakage of sensitive information in logger message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSensitive information leakage in logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintended exposure of personal or confidential information.\n  ```ruby\n  logger.info('User is: #{user.email}') # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users or other entities in log messages. This approach maintains privacy while still allowing for effective logging.\n  ```ruby\n  logger.info('User is: #{user.uuid}')\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","markdown":"## Description\n\nSensitive information leakage in logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintended exposure of personal or confidential information.\n  ```ruby\n  logger.info('User is: #{user.email}') # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users or other entities in log messages. This approach maintains privacy while still allowing for effective logging.\n  ```ruby\n  logger.info('User is: #{user.uuid}')\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)"}},{"id":"go_gosec_memory_memory_aliasing","name":"go_gosec_memory_memory_aliasing","shortDescription":{"text":"Usage of single iteration variable in range loop"},"fullDescription":{"text":"Usage of single iteration variable in range loop"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIn Go, using the `for ... range` loop with a single iteration variable can lead to errors. This happens because the loop uses the same memory address for the iteration variable throughout its execution. When you store or use the address of this variable across different iterations, it can overwrite values unexpectedly. This issue is especially problematic in concurrent operations or when deferring functions inside the loop.\n\n## Remediations\n\n- **Do** create a new variable inside the loop to ensure each iteration uses a unique memory address.\n  ```go\n  for _, n := range []someStruct{{1}, {2}, {3}, {4}} {\n    localVar := n\n    // use localVar instead of n\n  }\n  ```\n- **Do** use indexed addressing to directly reference the elements in an array or slice, avoiding the shared address problem.\n  ```go\n  for i := range mySlice {\n    // use \u0026mySlice[i] for a stable address\n  }\n  ```\n- **Do not** store the address of the iteration variable. This practice leads to all references pointing to the same location in memory, causing errors.\n- **Do not** use the iteration variable's address in goroutines. This can result in race conditions or logical errors if the variable's value changing before the goroutine accesses it.\n\n## References\n\n- [Go For Statements](https://go.dev/ref/spec#For_statements)","markdown":"## Description\n\nIn Go, using the `for ... range` loop with a single iteration variable can lead to errors. This happens because the loop uses the same memory address for the iteration variable throughout its execution. When you store or use the address of this variable across different iterations, it can overwrite values unexpectedly. This issue is especially problematic in concurrent operations or when deferring functions inside the loop.\n\n## Remediations\n\n- **Do** create a new variable inside the loop to ensure each iteration uses a unique memory address.\n  ```go\n  for _, n := range []someStruct{{1}, {2}, {3}, {4}} {\n    localVar := n\n    // use localVar instead of n\n  }\n  ```\n- **Do** use indexed addressing to directly reference the elements in an array or slice, avoiding the shared address problem.\n  ```go\n  for i := range mySlice {\n    // use \u0026mySlice[i] for a stable address\n  }\n  ```\n- **Do not** store the address of the iteration variable. This practice leads to all references pointing to the same location in memory, causing errors.\n- **Do not** use the iteration variable's address in goroutines. This can result in race conditions or logical errors if the variable's value changing before the goroutine accesses it.\n\n## References\n\n- [Go For Statements](https://go.dev/ref/spec#For_statements)"}},{"id":"go_lang_log_output_neutralization","name":"go_lang_log_output_neutralization","shortDescription":{"text":"Missing output neutralization for logs"},"fullDescription":{"text":"Missing output neutralization for logs"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLogging unsanitized external input directly can introduce log injection vulnerabilities. This occurs when external data is logged without being cleaned, potentially allowing attackers to insert malicious content into your logs.\n\n## Remediations\n\n- **Do not** log unsanitized external input directly. This practice can make your application vulnerable to log injection attacks.\n- **Do** use printf methods with `%q` format for logging external input. This method ensures that the input is safely encoded, preventing log injection.\n  ```go\n  dangerousInput := os.Args[0]\n  logger.Printf(\"Args: %q\", dangerousInput)\n  ```\n- **Do** manually escape external strings before logging them. This approach allows you to sanitize input by escaping potentially dangerous characters.\n  ```go\n  dangerousInput := os.Args[0]\n  sanitizedInput := strconv.Quote(dangerousInput)\n  logger.Print(sanitizedInput)\n  ```","markdown":"## Description\n\nLogging unsanitized external input directly can introduce log injection vulnerabilities. This occurs when external data is logged without being cleaned, potentially allowing attackers to insert malicious content into your logs.\n\n## Remediations\n\n- **Do not** log unsanitized external input directly. This practice can make your application vulnerable to log injection attacks.\n- **Do** use printf methods with `%q` format for logging external input. This method ensures that the input is safely encoded, preventing log injection.\n  ```go\n  dangerousInput := os.Args[0]\n  logger.Printf(\"Args: %q\", dangerousInput)\n  ```\n- **Do** manually escape external strings before logging them. This approach allows you to sanitize input by escaping potentially dangerous characters.\n  ```go\n  dangerousInput := os.Args[0]\n  sanitizedInput := strconv.Quote(dangerousInput)\n  logger.Print(sanitizedInput)\n  ```"}},{"id":"python_third_parties_aws_query_injection","name":"python_third_parties_aws_query_injection","shortDescription":{"text":"Unsanitized user input in AWS query"},"fullDescription":{"text":"Unsanitized user input in AWS query"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw queries makes your application vulnerable to injection attacks.\n\n## Remediations\n\n- **Do** always sanitize user input especially if it is to be used in database queries. Where possible, such sanitization should include the removal of special characters (like ' or \") that could be used to alter the semantics of a database query.\n- **Do** validate user input wherever possible, to ensure it is the expected format and length\n- **Do** use parameterized queries rather than concatenating user input directly into a query string. This separates query logic from user input, which is good practice. With DynamoDB, for example, you can make use of `ExpressionAttributeNames` and `ExpressionAttributeValues` parameters for this separation: \n  ```python\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('users')\n    \n    table.update_item(\n      Key={\n          'username': 'johndoe',\n          'last_name': 'Doe'\n      },\n      UpdateExpression='SET age = :val1',\n      ExpressionAttributeValues={\n          ':val1': 42\n      }\n    )\n  ```\n\n## References\n- [AWS DynamoDB docs](https://docs.aws.amazon.com/dynamodb/)\n- [AWS SimpleDB docs](https://docs.aws.amazon.com/AmazonSimpleDB/latest/DeveloperGuide/Welcome.html)\n","markdown":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw queries makes your application vulnerable to injection attacks.\n\n## Remediations\n\n- **Do** always sanitize user input especially if it is to be used in database queries. Where possible, such sanitization should include the removal of special characters (like ' or \") that could be used to alter the semantics of a database query.\n- **Do** validate user input wherever possible, to ensure it is the expected format and length\n- **Do** use parameterized queries rather than concatenating user input directly into a query string. This separates query logic from user input, which is good practice. With DynamoDB, for example, you can make use of `ExpressionAttributeNames` and `ExpressionAttributeValues` parameters for this separation: \n  ```python\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('users')\n    \n    table.update_item(\n      Key={\n          'username': 'johndoe',\n          'last_name': 'Doe'\n      },\n      UpdateExpression='SET age = :val1',\n      ExpressionAttributeValues={\n          ':val1': 42\n      }\n    )\n  ```\n\n## References\n- [AWS DynamoDB docs](https://docs.aws.amazon.com/dynamodb/)\n- [AWS SimpleDB docs](https://docs.aws.amazon.com/AmazonSimpleDB/latest/DeveloperGuide/Welcome.html)\n"}},{"id":"go_third_parties_airbrake","name":"go_third_parties_airbrake","shortDescription":{"text":"Leakage of sensitive data to Airbrake"},"fullDescription":{"text":"Leakage of sensitive data to Airbrake"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/)\n"}},{"id":"go_lang_weak_password_encryption_md5","name":"go_lang_weak_password_encryption_md5","shortDescription":{"text":"Usage of weak hashing library on a password (MD5)"},"fullDescription":{"text":"Usage of weak hashing library on a password (MD5)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like MD5 for password storage compromises security. MD5 is outdated and vulnerable, making it easier for attackers to crack passwords and gain unauthorized access.\n\n## Remediations\n\n- **Do not** use MD5 for hashing passwords. This algorithm is no longer considered secure due to its vulnerability to collision and preimage attacks.\n  ```go\n  md5.Sum([]byte('password')) // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 for password hashing. These provide enhanced security and resistance against attacks.\n  ```go\n  sha256.Sum256([]byte('string'))\n  ```","markdown":"## Description\n\nUsing a weak hashing library like MD5 for password storage compromises security. MD5 is outdated and vulnerable, making it easier for attackers to crack passwords and gain unauthorized access.\n\n## Remediations\n\n- **Do not** use MD5 for hashing passwords. This algorithm is no longer considered secure due to its vulnerability to collision and preimage attacks.\n  ```go\n  md5.Sum([]byte('password')) // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 for password hashing. These provide enhanced security and resistance against attacks.\n  ```go\n  sha256.Sum256([]byte('string'))\n  ```"}},{"id":"javascript_react_google_analytics","name":"javascript_react_google_analytics","shortDescription":{"text":"Leakage of sensitive data to Google Analytics (React)"},"fullDescription":{"text":"Leakage of sensitive data to Google Analytics (React)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSending sensitive data to Google Analytics can result in data leaks. This vulnerability arises when sensitive or confidential information is inadvertently transmitted to Google Analytics, posing a risk of unauthorized access and potential data breaches.\n\n## Remediations\n\n- **Do not** include sensitive information in data payloads sent to Google Analytics. Always review the data being transmitted to ensure it does not contain personal or confidential details.\n- **Do** use data processing techniques to anonymize or remove sensitive data before sending it to Google Analytics. This can include techniques like hashing or tokenization to ensure that any data transmitted cannot be used to identify an individual.","markdown":"## Description\n\nSending sensitive data to Google Analytics can result in data leaks. This vulnerability arises when sensitive or confidential information is inadvertently transmitted to Google Analytics, posing a risk of unauthorized access and potential data breaches.\n\n## Remediations\n\n- **Do not** include sensitive information in data payloads sent to Google Analytics. Always review the data being transmitted to ensure it does not contain personal or confidential details.\n- **Do** use data processing techniques to anonymize or remove sensitive data before sending it to Google Analytics. This can include techniques like hashing or tokenization to ensure that any data transmitted cannot be used to identify an individual."}},{"id":"ruby_lang_exec_using_user_input","name":"ruby_lang_exec_using_user_input","shortDescription":{"text":"Unsanitized user input in OS command"},"fullDescription":{"text":"Unsanitized user input in OS command"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nExecuting OS commands with user input can lead to command injection attacks. This vulnerability occurs when an application dynamically generates a command to the operating system using data supplied by the user without proper sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to form OS commands. This can allow attackers to execute arbitrary commands.\n  ```ruby\n  system(params[:command]) # unsafe\n  ```\n- **Do** validate or sanitize user input before using it in OS commands. Prefer using static command strings where possible.\n- **Do** use indirect methods for incorporating user input into commands, such as selecting from predefined options.\n  ```ruby\n  command =\n    case params[:action]\n    when \"option1\"\n      \"command1\"\n    when \"option2\"\n      \"command2\"\n    end\n\n  system(command)\n  ```\n\n## References\n\n- [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","markdown":"## Description\n\nExecuting OS commands with user input can lead to command injection attacks. This vulnerability occurs when an application dynamically generates a command to the operating system using data supplied by the user without proper sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to form OS commands. This can allow attackers to execute arbitrary commands.\n  ```ruby\n  system(params[:command]) # unsafe\n  ```\n- **Do** validate or sanitize user input before using it in OS commands. Prefer using static command strings where possible.\n- **Do** use indirect methods for incorporating user input into commands, such as selecting from predefined options.\n  ```ruby\n  command =\n    case params[:action]\n    when \"option1\"\n      \"command1\"\n    when \"option2\"\n      \"command2\"\n    end\n\n  system(command)\n  ```\n\n## References\n\n- [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)"}},{"id":"php_lang_http_url_using_sensitive_data","name":"php_lang_http_url_using_sensitive_data","shortDescription":{"text":"Leakage of sensitive data in HTTP request"},"fullDescription":{"text":"Leakage of sensitive data in HTTP request"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSending sensitive data through URLs in HTTP requests exposes it to unnecessary risks. This method of data transmission can lead to the data being captured by intermediaries or being logged by servers, posing a significant privacy and security risk.\n\n## Remediations\n\n- **Do not** include sensitive data in the URL path. This makes the information visible in server logs and to anyone who might intercept the URL.\n  ```php\n  $curl = curl_init(\"https://example.com/users/{$user-\u003eemail}\"); // unsafe\n  ```\n- **Do not** append sensitive data as query parameters in URLs. Similar to paths, query parameters are also vulnerable to interception and logging.\n  ```php\n  $query = http_build_query(['email' =\u003e $user-\u003eemail]); // unsafe\n  $curl = curl_init(\"https://example.com/users?$query\");\n  ```\n- **Do** use the HTTP POST method to send sensitive data within the body of the request. This method is more secure as the data is not exposed in the URL.\n  ```php\n  $query = http_build_query(['email' =\u003e $user-\u003eemail]);\n  $curl = curl_init(\"https://example.com/users/list\");\n  curl_setopt($curl, CURLOPT_POSTFIELDS, $query);\n  ```\n- **Do** not send sensitive data if it's not necessary. If you must send identifying information, use less sensitive data that doesn't compromise user privacy or security.\n```php\n$query = http_build_query(['uuid' =\u003e $user-\u003euuid]);\n$curl = curl_init(\"https://example.com/users?$query\");\n```\n\n## References\n\n- [OWASP information exposure through URL query strings](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)","markdown":"## Description\n\nSending sensitive data through URLs in HTTP requests exposes it to unnecessary risks. This method of data transmission can lead to the data being captured by intermediaries or being logged by servers, posing a significant privacy and security risk.\n\n## Remediations\n\n- **Do not** include sensitive data in the URL path. This makes the information visible in server logs and to anyone who might intercept the URL.\n  ```php\n  $curl = curl_init(\"https://example.com/users/{$user-\u003eemail}\"); // unsafe\n  ```\n- **Do not** append sensitive data as query parameters in URLs. Similar to paths, query parameters are also vulnerable to interception and logging.\n  ```php\n  $query = http_build_query(['email' =\u003e $user-\u003eemail]); // unsafe\n  $curl = curl_init(\"https://example.com/users?$query\");\n  ```\n- **Do** use the HTTP POST method to send sensitive data within the body of the request. This method is more secure as the data is not exposed in the URL.\n  ```php\n  $query = http_build_query(['email' =\u003e $user-\u003eemail]);\n  $curl = curl_init(\"https://example.com/users/list\");\n  curl_setopt($curl, CURLOPT_POSTFIELDS, $query);\n  ```\n- **Do** not send sensitive data if it's not necessary. If you must send identifying information, use less sensitive data that doesn't compromise user privacy or security.\n```php\n$query = http_build_query(['uuid' =\u003e $user-\u003euuid]);\n$curl = curl_init(\"https://example.com/users?$query\");\n```\n\n## References\n\n- [OWASP information exposure through URL query strings](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)"}},{"id":"javascript_express_insecure_cookie","name":"javascript_express_insecure_cookie","shortDescription":{"text":"Missing Secure option in cookie configuration"},"fullDescription":{"text":"Missing Secure option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over an unencrypted connection, making it vulnerable to interception by unauthorized parties. Enabling the Secure option ensures that cookies are only sent over HTTPS, enhancing the security of data in transit.\n\n## Remediations\n\n- **Do** set the `secure` attribute of cookies to `true`. This action mandates that cookies are sent only over HTTPS, safeguarding them from potential eavesdropping.\n  ```javascript\n  cookie({ secure: true });\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)","markdown":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over an unencrypted connection, making it vulnerable to interception by unauthorized parties. Enabling the Secure option ensures that cookies are only sent over HTTPS, enhancing the security of data in transit.\n\n## Remediations\n\n- **Do** set the `secure` attribute of cookies to `true`. This action mandates that cookies are sent only over HTTPS, safeguarding them from potential eavesdropping.\n  ```javascript\n  cookie({ secure: true });\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)"}},{"id":"python_third_parties_datadog","name":"python_third_parties_datadog","shortDescription":{"text":"Leakage of sensitive data to Datadog"},"fullDescription":{"text":"Leakage of sensitive data to Datadog"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=python#scrub-sensitive-data-from-your-spans)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Datadog is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Datadog.\n\n## References\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=python#scrub-sensitive-data-from-your-spans)\n"}},{"id":"go_gosec_crypto_weak_key_strength","name":"go_gosec_crypto_weak_key_strength","shortDescription":{"text":"Usage of inadequate encryption strength"},"fullDescription":{"text":"Usage of inadequate encryption strength"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application uses RSA encryption with a key length shorter than the recommended 2048 bits. Keys under 2048 bits are vulnerable because of the increasing power of modern computers, which could break the encryption by factoring the key.\n\n## Remediations\n\n- **Do** generate RSA keys with a minimum of 2048 bits. This meets NIST recommendations and protects against the risk of keys being compromised by advancements in computing power. Keys shorter than 2048 bits do not provide adequate protection against brute-force attacks.\n  ```go\n    privateKey, err := rsa.GenerateKey(rand.Reader, 2048)\n  ```\n- **Do** adhere to industry standards and guidelines for cryptographic practices to ensure the security of your data.\n\n## References\n\n- [NIST Special Publication 800-57 Part 1](https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-5/final)","markdown":"## Description\n\nYour application uses RSA encryption with a key length shorter than the recommended 2048 bits. Keys under 2048 bits are vulnerable because of the increasing power of modern computers, which could break the encryption by factoring the key.\n\n## Remediations\n\n- **Do** generate RSA keys with a minimum of 2048 bits. This meets NIST recommendations and protects against the risk of keys being compromised by advancements in computing power. Keys shorter than 2048 bits do not provide adequate protection against brute-force attacks.\n  ```go\n    privateKey, err := rsa.GenerateKey(rand.Reader, 2048)\n  ```\n- **Do** adhere to industry standards and guidelines for cryptographic practices to ensure the security of your data.\n\n## References\n\n- [NIST Special Publication 800-57 Part 1](https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-5/final)"}},{"id":"ruby_third_parties_honeybadger","name":"ruby_third_parties_honeybadger","shortDescription":{"text":"Leakage of sensitive data to Honeybadger"},"fullDescription":{"text":"Leakage of sensitive data to Honeybadger"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/ruby/integration-guides/rails-exception-tracking/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/ruby/integration-guides/rails-exception-tracking/)\n"}},{"id":"php_lang_insecure_ftp","name":"php_lang_insecure_ftp","shortDescription":{"text":"Usage of insecure FTP connection"},"fullDescription":{"text":"Usage of insecure FTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing insecure FTP connections can compromise the security of sensitive data. This vulnerability arises when applications that handle sensitive information communicate with FTP servers without secure protocols. Always verify that FTP connections in your application utilize SFTP for enhanced security.\n\n## Remediations\n\n- **Do** use the `ftp_ssl_connect` function to establish secure FTP connections. This function ensures that your connection to the FTP server is encrypted, protecting the data transmitted from potential interception or eavesdropping.\n  ```php\n  $ftp = ftp_ssl_connect(\"ftp.example.com\");\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nUsing insecure FTP connections can compromise the security of sensitive data. This vulnerability arises when applications that handle sensitive information communicate with FTP servers without secure protocols. Always verify that FTP connections in your application utilize SFTP for enhanced security.\n\n## Remediations\n\n- **Do** use the `ftp_ssl_connect` function to establish secure FTP connections. This function ensures that your connection to the FTP server is encrypted, protecting the data transmitted from potential interception or eavesdropping.\n  ```php\n  $ftp = ftp_ssl_connect(\"ftp.example.com\");\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"ruby_third_parties_google_dataflow","name":"ruby_third_parties_google_dataflow","shortDescription":{"text":"Leakage of sensitive data to Google Dataflow"},"fullDescription":{"text":"Leakage of sensitive data to Google Dataflow"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to a third-party service is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Google Dataflow.\n\n## References\n- [Google Dataflow Docs](https://cloud.google.com/dataflow/docs/overview)\n","markdown":"## Description\n\nLeaking sensitive data to a third-party service is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like Google Dataflow.\n\n## References\n- [Google Dataflow Docs](https://cloud.google.com/dataflow/docs/overview)\n"}},{"id":"javascript_third_parties_elasticsearch","name":"javascript_third_parties_elasticsearch","shortDescription":{"text":"Leakage of sensitive data to ElasticSearch"},"fullDescription":{"text":"Leakage of sensitive data to ElasticSearch"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ElasticSearch\n\n## References\n- [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html)\n"}},{"id":"javascript_react_dangerously_set_inner_html","name":"javascript_react_dangerously_set_inner_html","shortDescription":{"text":"Unsanitized user input in React inner HTML method (XSS)"},"fullDescription":{"text":"Unsanitized user input in React inner HTML method (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing React's dangerouslySetInnerHTML with unsanitized data can introduce Cross-Site Scripting (XSS) vulnerabilities. This occurs when external input is embedded directly into the HTML without proper sanitization, allowing attackers to inject malicious scripts.\n\n## Remediations\n\n- **Do** sanitize data before using it with dangerouslySetInnerHTML. This step is crucial to prevent XSS attacks by ensuring that the input does not contain harmful scripts.\n```javascript\n\u003cdiv dangerouslySetInnerHTML={{__html: sanitize(data)}} /\u003e\n```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nUsing React's dangerouslySetInnerHTML with unsanitized data can introduce Cross-Site Scripting (XSS) vulnerabilities. This occurs when external input is embedded directly into the HTML without proper sanitization, allowing attackers to inject malicious scripts.\n\n## Remediations\n\n- **Do** sanitize data before using it with dangerouslySetInnerHTML. This step is crucial to prevent XSS attacks by ensuring that the input does not contain harmful scripts.\n```javascript\n\u003cdiv dangerouslySetInnerHTML={{__html: sanitize(data)}} /\u003e\n```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"javascript_third_parties_airbrake","name":"javascript_third_parties_airbrake","shortDescription":{"text":"Leakage of sensitive data to Airbrake"},"fullDescription":{"text":"Leakage of sensitive data to Airbrake"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n  airbrake.notify({\n    error: err,\n    params: { user: user.uuid },\n  });\n  ```\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Airbrake is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when logging errors or events to Airbrake\n- **Do** use unique identifiers from the database if you really need to identify users.\n  ```javascript\n  airbrake.notify({\n    error: err,\n    params: { user: user.uuid },\n  });\n  ```\n\n## References\n- [Airbrake Docs](https://docs.airbrake.io/)\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n"}},{"id":"php_symfony_cookie_missing_http_only","name":"php_symfony_cookie_missing_http_only","shortDescription":{"text":"Missing HTTP Only option in cookie configuration"},"fullDescription":{"text":"Missing HTTP Only option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nNot setting the \"httpOnly\" attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling \"httpOnly\" is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the `httpOnly` attribute to `true` in your cookie configurations. This action prevents client-side scripts from sending or accessing the cookie, enhancing your application's security against XSS attacks.\n  ```php\n  Cookie::create($name, $value, httpOnly: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","markdown":"## Description\n\nNot setting the \"httpOnly\" attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling \"httpOnly\" is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the `httpOnly` attribute to `true` in your cookie configurations. This action prevents client-side scripts from sending or accessing the cookie, enhancing your application's security against XSS attacks.\n  ```php\n  Cookie::create($name, $value, httpOnly: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)"}},{"id":"go_lang_open_redirect","name":"go_lang_open_redirect","shortDescription":{"text":"Unsanitized user input in redirect"},"fullDescription":{"text":"Unsanitized user input in redirect"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input to perform redirects can expose your application to phishing attacks. This vulnerability arises when user input directly influences the destination of a redirect without proper validation, making it easier for attackers to deceive users by directing them to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirects. This can lead to security vulnerabilities where attackers might redirect users to malicious websites.\n- **Do** validate all user input used in redirects. Employ a whitelist approach or a mapping of allowed destinations to ensure only safe and intended URLs are used for redirection.\n  ```go\n  var URLMapping = map[string]string{\n    \"google\": \"https://www.google.com\",\n    \"openai\": \"https://www.openai.com\",\n    \"github\": \"https://www.github.com\",\n    \"root\":   \"https://www.example.com\",\n  }\n\n  func safeRedirectHandler(w http.ResponseWriter, r *http.Request) {\n    // Get the redirectTo parameter from the query string\n    redirectTo := r.URL.Query().Get(\"redirectTo\")\n\n    // Get the safe URL from the map, default to the URL for \"root\" if not found\n    redirectURL, ok := URLMapping[redirectTo]\n    if !ok {\n      redirectURL = URLMapping[\"root\"] // Default to a predefined safe URL\n    }\n\n    ...\n  }\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized user input to perform redirects can expose your application to phishing attacks. This vulnerability arises when user input directly influences the destination of a redirect without proper validation, making it easier for attackers to deceive users by directing them to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirects. This can lead to security vulnerabilities where attackers might redirect users to malicious websites.\n- **Do** validate all user input used in redirects. Employ a whitelist approach or a mapping of allowed destinations to ensure only safe and intended URLs are used for redirection.\n  ```go\n  var URLMapping = map[string]string{\n    \"google\": \"https://www.google.com\",\n    \"openai\": \"https://www.openai.com\",\n    \"github\": \"https://www.github.com\",\n    \"root\":   \"https://www.example.com\",\n  }\n\n  func safeRedirectHandler(w http.ResponseWriter, r *http.Request) {\n    // Get the redirectTo parameter from the query string\n    redirectTo := r.URL.Query().Get(\"redirectTo\")\n\n    // Get the safe URL from the map, default to the URL for \"root\" if not found\n    redirectURL, ok := URLMapping[redirectTo]\n    if !ok {\n      redirectURL = URLMapping[\"root\"] // Default to a predefined safe URL\n    }\n\n    ...\n  }\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)"}},{"id":"ruby_lang_weak_password_encryption_blowfish","name":"ruby_lang_weak_password_encryption_blowfish","shortDescription":{"text":"Usage of weak encryption algorithm on a password (Blowfish)"},"fullDescription":{"text":"Usage of weak encryption algorithm on a password (Blowfish)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak encryption algorithm like Blowfish for passwords increases the risk of data breaches. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use encryption algorithms for storing passwords. Encryption is not secure enough for password management because it can be reversed to reveal the original password.\n- **Do** use strong hashing algorithms specifically designed for password storage, such as bcrypt or Argon2id. These algorithms are more secure because they are designed to be slow and computationally expensive to reverse, making password cracking much harder.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)","markdown":"## Description\n\nUsing a weak encryption algorithm like Blowfish for passwords increases the risk of data breaches. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use encryption algorithms for storing passwords. Encryption is not secure enough for password management because it can be reversed to reveal the original password.\n- **Do** use strong hashing algorithms specifically designed for password storage, such as bcrypt or Argon2id. These algorithms are more secure because they are designed to be slow and computationally expensive to reverse, making password cracking much harder.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)"}},{"id":"ruby_third_parties_sentry","name":"ruby_third_parties_sentry","shortDescription":{"text":"Leakage of sensitive data to Sentry"},"fullDescription":{"text":"Leakage of sensitive data to Sentry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/)\n"}},{"id":"python_lang_insecure_smtp","name":"python_lang_insecure_smtp","shortDescription":{"text":"Usage of insecure SMTP connection"},"fullDescription":{"text":"Usage of insecure SMTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAn insecure SMTP connection can expose transmitted data to unauthorized access. This rule identifies if SMTP settings are configured to enforce secure connections.\n\n## Remediations\n\n- **Do** use the `SMTP_SSL` class to establish secure SMTP connections. This prevents unauthorized access to the data being transmitted.\n  ```python\n  smtp = smtplib.SMTP_SSL(\"smtp.example.com\")\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nAn insecure SMTP connection can expose transmitted data to unauthorized access. This rule identifies if SMTP settings are configured to enforce secure connections.\n\n## Remediations\n\n- **Do** use the `SMTP_SSL` class to establish secure SMTP connections. This prevents unauthorized access to the data being transmitted.\n  ```python\n  smtp = smtplib.SMTP_SSL(\"smtp.example.com\")\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"python_lang_weak_encryption_des","name":"python_lang_weak_encryption_des","shortDescription":{"text":"Usage of weak encryption algorithm (DES)"},"fullDescription":{"text":"Usage of weak encryption algorithm (DES)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```python\n  from Crypto.Cipher import AES\n\n  cipher = AES.new(aes_key, AES.MODE_OCB)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)","markdown":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```python\n  from Crypto.Cipher import AES\n\n  cipher = AES.new(aes_key, AES.MODE_OCB)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)"}},{"id":"php_lang_phpinfo","name":"php_lang_phpinfo","shortDescription":{"text":"Leakage of sensitive information with 'phpinfo' function"},"fullDescription":{"text":"Leakage of sensitive information with 'phpinfo' function"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe use of the 'phpinfo()' function can lead to the leakage of sensitive information. This function outputs a large amount of information about the current state of PHP, including environment variables, server information, and PHP configuration settings, which could be exploited by unauthorized individuals.\n\n## Remediations\n\n- **Do not** use the 'phpinfo()' function in production environments or publicly accessible areas of your application. This function can inadvertently expose critical information that could aid an attacker.\n  ```php\n  phpinfo(); // unsafe in production\n  ```\n- **Do** regularly review your codebase to ensure that calls to 'phpinfo()' are removed before deploying to production. Consider using environment-specific configuration to automatically exclude such calls in production environments.","markdown":"## Description\n\nThe use of the 'phpinfo()' function can lead to the leakage of sensitive information. This function outputs a large amount of information about the current state of PHP, including environment variables, server information, and PHP configuration settings, which could be exploited by unauthorized individuals.\n\n## Remediations\n\n- **Do not** use the 'phpinfo()' function in production environments or publicly accessible areas of your application. This function can inadvertently expose critical information that could aid an attacker.\n  ```php\n  phpinfo(); // unsafe in production\n  ```\n- **Do** regularly review your codebase to ensure that calls to 'phpinfo()' are removed before deploying to production. Consider using environment-specific configuration to automatically exclude such calls in production environments."}},{"id":"javascript_lang_weak_password_encryption_des","name":"javascript_lang_weak_password_encryption_des","shortDescription":{"text":"Usage of weak encryption algorithm on a password (DES)"},"fullDescription":{"text":"Usage of weak encryption algorithm on a password (DES)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe Data Encryption Standard (DES) is recognized as a weak encryption algorithm and should not be used for securing passwords. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use DES or any encryption method for password storage. Encryption's reversible nature poses a security risk by potentially allowing the retrieval of the original password.\n- **Do** use a strong hashing algorithm like Argon2id for password storage. Hashing is one-way, making it impossible to reverse and retrieve the original password.\n  ```javascript\n  const argon2 = require(\"argon2\");\n\n  const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)","markdown":"## Description\n\nThe Data Encryption Standard (DES) is recognized as a weak encryption algorithm and should not be used for securing passwords. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.\n\n## Remediations\n\n- **Do not** use DES or any encryption method for password storage. Encryption's reversible nature poses a security risk by potentially allowing the retrieval of the original password.\n- **Do** use a strong hashing algorithm like Argon2id for password storage. Hashing is one-way, making it impossible to reverse and retrieve the original password.\n  ```javascript\n  const argon2 = require(\"argon2\");\n\n  const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)"}},{"id":"python_lang_weak_password_encryption_sha1","name":"python_lang_weak_password_encryption_sha1","shortDescription":{"text":"Usage of weak hashing library on a password (SHA-1)"},"fullDescription":{"text":"Usage of weak hashing library on a password (SHA-1)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like SHA-1 for passwords increases the risk of data breaches. SHA-1 is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing passwords. This algorithm is no longer considered secure and can make your system vulnerable to attacks.\n  ```python\n  hashlib.sha1(user.password).digest() # unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance the security of stored passwords.\n  ```python\n  hashlib.sha256(user.password).digest()\n  ```","markdown":"## Description\n\nUsing a weak hashing library like SHA-1 for passwords increases the risk of data breaches. SHA-1 is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing passwords. This algorithm is no longer considered secure and can make your system vulnerable to attacks.\n  ```python\n  hashlib.sha1(user.password).digest() # unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance the security of stored passwords.\n  ```python\n  hashlib.sha256(user.password).digest()\n  ```"}},{"id":"ruby_lang_weak_hash_md","name":"ruby_lang_weak_hash_md","shortDescription":{"text":"Usage of weak hashing library (MD5)"},"fullDescription":{"text":"Usage of weak hashing library (MD5)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 or other weak hash algorithms for hashing. These are not secure and can be easily compromised.\n  ```ruby\n  Digest::MD5.hexdigest('weak hash') # unsafe\n  ```\n- **Do** use stronger hashing algorithms like bcrypt for securing data. Bcrypt is designed to be slow and computationally intensive, making it resistant to brute force attacks.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)","markdown":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 or other weak hash algorithms for hashing. These are not secure and can be easily compromised.\n  ```ruby\n  Digest::MD5.hexdigest('weak hash') # unsafe\n  ```\n- **Do** use stronger hashing algorithms like bcrypt for securing data. Bcrypt is designed to be slow and computationally intensive, making it resistant to brute force attacks.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)"}},{"id":"python_django_path_traversal","name":"python_django_path_traversal","shortDescription":{"text":"Unsanitized dynamic input in file path"},"fullDescription":{"text":"Unsanitized dynamic input in file path"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use external input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize external input used in file paths. Use `os.path.normpath` to normalize paths and remove any redundant separators in order to prevent path traversal attacks.\n  ```python\n  os.path.normpath(os.path.join(base_directory, user_input))\n  ```\n- **Do** use absolute path checks to confirm that the constructed path is within the expected directory\n    ```python\n    base = os.path.abspath(base_directory)\n    user_path = os.path.abspath(os.path.join(base_directory, user_input))\n    if user_path.startswith(base)\n      # Handle or reject the input\n   ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","markdown":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use external input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize external input used in file paths. Use `os.path.normpath` to normalize paths and remove any redundant separators in order to prevent path traversal attacks.\n  ```python\n  os.path.normpath(os.path.join(base_directory, user_input))\n  ```\n- **Do** use absolute path checks to confirm that the constructed path is within the expected directory\n    ```python\n    base = os.path.abspath(base_directory)\n    user_path = os.path.abspath(os.path.join(base_directory, user_input))\n    if user_path.startswith(base)\n      # Handle or reject the input\n   ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n"}},{"id":"go_third_parties_clickhouse","name":"go_third_parties_clickhouse","shortDescription":{"text":"Leakage of sensitive data to ClickHouse"},"fullDescription":{"text":"Leakage of sensitive data to ClickHouse"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to a third-party service like ClickHouse is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ClickHouse.\n\n## References\n- [ClickHouse docs](https://clickhouse.com/docs/en/intro/)\n","markdown":"## Description\n\nLeaking sensitive data to a third-party service like ClickHouse is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like ClickHouse.\n\n## References\n- [ClickHouse docs](https://clickhouse.com/docs/en/intro/)\n"}},{"id":"javascript_express_exposed_dir_listing","name":"javascript_express_exposed_dir_listing","shortDescription":{"text":"Missing access restriction on directory listing"},"fullDescription":{"text":"Missing access restriction on directory listing"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)","markdown":"## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)"}},{"id":"javascript_third_parties_datadog_browser","name":"javascript_third_parties_datadog_browser","shortDescription":{"text":"Leakage of sensitive data to Datadog RUM"},"fullDescription":{"text":"Leakage of sensitive data to Datadog RUM"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSensitive and private data contained in your pages may be sent to Datadog to identify elements that a user interacted with.\n\n## Remediations\n\n- **Do** control which information is sent to Datadog by either manually setting an action name or implementing a global scrubbing rule in the Datadog Browser SDK for RUM.\n\n## Resources\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/real_user_monitoring/browser/modifying_data_and_context/?tab=npm)\n","markdown":"## Description\n\nSensitive and private data contained in your pages may be sent to Datadog to identify elements that a user interacted with.\n\n## Remediations\n\n- **Do** control which information is sent to Datadog by either manually setting an action name or implementing a global scrubbing rule in the Datadog Browser SDK for RUM.\n\n## Resources\n- [Datadog docs](https://docs.datadoghq.com)\n- [Scrubbing data](https://docs.datadoghq.com/real_user_monitoring/browser/modifying_data_and_context/?tab=npm)\n"}},{"id":"php_lang_insecure_cookie","name":"php_lang_insecure_cookie","shortDescription":{"text":"Missing Secure option in cookie configuration"},"fullDescription":{"text":"Missing Secure option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure attribute is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` attribute to `true` for cookies to ensure they are only sent over HTTPS.\n  ```php\n  setcookie(\"name\", \"value\", secure: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","markdown":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure attribute is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` attribute to `true` for cookies to ensure they are only sent over HTTPS.\n  ```php\n  setcookie(\"name\", \"value\", secure: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)"}},{"id":"javascript_lang_jwt","name":"javascript_lang_jwt","shortDescription":{"text":"Leakage of sensitive data in JWT"},"fullDescription":{"text":"Leakage of sensitive data in JWT"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring sensitive data in JWTs exposes it to potential security risks. JWTs are designed for transmitting data securely among parties but are not inherently secure storage for sensitive information.\n\n## Remediations\n\n- **Do not** include sensitive data, such as email addresses, in JWTs. This can lead to unauthorized access to personal information.\n  ```javascript\n  const jwt = require('jsonwebtoken');\n  const token = jwt.sign({ user: { email: 'john@gmail.com' }}); // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers like a user's UUID in JWTs to reference user information securely.\n  ```javascript\n  const jwt = require('jsonwebtoken');\n  const token = jwt.sign({ user: user.uuid });\n  ```\n\n## References\n\n- [OWASP sensitive data exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)","markdown":"## Description\n\nStoring sensitive data in JWTs exposes it to potential security risks. JWTs are designed for transmitting data securely among parties but are not inherently secure storage for sensitive information.\n\n## Remediations\n\n- **Do not** include sensitive data, such as email addresses, in JWTs. This can lead to unauthorized access to personal information.\n  ```javascript\n  const jwt = require('jsonwebtoken');\n  const token = jwt.sign({ user: { email: 'john@gmail.com' }}); // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers like a user's UUID in JWTs to reference user information securely.\n  ```javascript\n  const jwt = require('jsonwebtoken');\n  const token = jwt.sign({ user: user.uuid });\n  ```\n\n## References\n\n- [OWASP sensitive data exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)"}},{"id":"python_django_weak_secret_key","name":"python_django_weak_secret_key","shortDescription":{"text":"Usage of weak secret key"},"fullDescription":{"text":"Usage of weak secret key"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWeak secret keys can compromise data security. To ensure effective encryption, secret keys should be 12 bytes or greater.\n\n## Remediations\n\n- **Do not** use secret keys shorter than 12 bytes. Short keys are easier to crack, putting your data at risk.\n  ```python\n  SECRET_KEY = \"weak\" # unsafe\n  ```\n- **Do** ensure your secret keys are 12 bytes or longer to maintain strong encryption and protect sensitive data.\n  ```python\n  SECRET_KEY = \"correct-horse-battery-staple\"\n  ```\n\n## References\n\n- [Django secret key setting and recommended best practice](https://docs.djangoproject.com/en/5.0/ref/settings/#std:setting-SECRET_KEY)\n- [django-cryptography documentation](https://django-cryptography.readthedocs.io/en/latest/)","markdown":"## Description\n\nWeak secret keys can compromise data security. To ensure effective encryption, secret keys should be 12 bytes or greater.\n\n## Remediations\n\n- **Do not** use secret keys shorter than 12 bytes. Short keys are easier to crack, putting your data at risk.\n  ```python\n  SECRET_KEY = \"weak\" # unsafe\n  ```\n- **Do** ensure your secret keys are 12 bytes or longer to maintain strong encryption and protect sensitive data.\n  ```python\n  SECRET_KEY = \"correct-horse-battery-staple\"\n  ```\n\n## References\n\n- [Django secret key setting and recommended best practice](https://docs.djangoproject.com/en/5.0/ref/settings/#std:setting-SECRET_KEY)\n- [django-cryptography documentation](https://django-cryptography.readthedocs.io/en/latest/)"}},{"id":"python_django_csrf_protection_disabled","name":"python_django_csrf_protection_disabled","shortDescription":{"text":"Missing Cross-Site Request Forgery (CSRF) token(s)"},"fullDescription":{"text":"Missing Cross-Site Request Forgery (CSRF) token(s)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIn a Django application, using `@csrf_exempt` to disable CSRF (Cross-Site Request Forgery) protection can introduce increased security risks. CSRF is a forgery attack that tricks authenticated users into executing unintended actions on the website, potentially compromising security or data integrity of your application.\n\n## Remediations\n\n- **Do not** mark Djanog routes as CSRF exempt\n  ```python\n  @csrf_exempt # unsafe\n  def my_risky_route():\n  ```\n\n## References\n\n- [Django CSRF protection](https://docs.djangoproject.com/en/5.0/ref/csrf/)","markdown":"## Description\n\nIn a Django application, using `@csrf_exempt` to disable CSRF (Cross-Site Request Forgery) protection can introduce increased security risks. CSRF is a forgery attack that tricks authenticated users into executing unintended actions on the website, potentially compromising security or data integrity of your application.\n\n## Remediations\n\n- **Do not** mark Djanog routes as CSRF exempt\n  ```python\n  @csrf_exempt # unsafe\n  def my_risky_route():\n  ```\n\n## References\n\n- [Django CSRF protection](https://docs.djangoproject.com/en/5.0/ref/csrf/)"}},{"id":"javascript_third_parties_new_relic","name":"javascript_third_parties_new_relic","shortDescription":{"text":"Leakage of sensitive data to New Relic"},"fullDescription":{"text":"Leakage of sensitive data to New Relic"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n"}},{"id":"python_django_cookie_missing_secure","name":"python_django_cookie_missing_secure","shortDescription":{"text":"Missing Secure option in cookie configuration"},"fullDescription":{"text":"Missing Secure option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `secure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```python\n  response.set_cookie(secure=True)\n  ```","markdown":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `secure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```python\n  response.set_cookie(secure=True)\n  ```"}},{"id":"go_third_parties_bugsnag","name":"go_third_parties_bugsnag","shortDescription":{"text":"Leakage of sensitive data to Bugsnag"},"fullDescription":{"text":"Leakage of sensitive data to Bugsnag"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/go/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Bugsnag is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Bugsnag.\n\n## References\n- [Bugsnag Docs](https://docs.bugsnag.com/platforms/go/)\n"}},{"id":"python_third_parties_rollbar","name":"python_third_parties_rollbar","shortDescription":{"text":"Leakage of sensitive data to RollBar"},"fullDescription":{"text":"Leakage of sensitive data to RollBar"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/python)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Rollbar is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Rollbar.\n\n## References\n- [Rollbar docs](https://docs.rollbar.com/docs/python)\n"}},{"id":"ruby_rails_detailed_exceptions","name":"ruby_rails_detailed_exceptions","shortDescription":{"text":"Leakage of sensitive information in exception message"},"fullDescription":{"text":"Leakage of sensitive information in exception message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** configure your application to display detailed error messages for all errors.\n  ```ruby\n  config.consider_all_requests_local = false # unsafe\n  ```\n- **Do not** implement `show_detailed_exceptions?` in controllers to return detailed errors.\n  ```ruby\n  class MyController \u003c ApplicationController\n    def show_detailed_exceptions? # unsafe\n      ...\n    end\n  end\n  ```","markdown":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** configure your application to display detailed error messages for all errors.\n  ```ruby\n  config.consider_all_requests_local = false # unsafe\n  ```\n- **Do not** implement `show_detailed_exceptions?` in controllers to return detailed errors.\n  ```ruby\n  class MyController \u003c ApplicationController\n    def show_detailed_exceptions? # unsafe\n      ...\n    end\n  end\n  ```"}},{"id":"php_lang_reflection_using_user_input","name":"php_lang_reflection_using_user_input","shortDescription":{"text":"Unsanitized user input in code generation"},"fullDescription":{"text":"Unsanitized user input in code generation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in code generation can lead to code injection vulnerabilities. This occurs when an application dynamically generates or manipulates code using data provided by the user without proper sanitization.\n\n## Remediations\n\n- **Do not** use user-supplied input directly in code generation or reflection mechanisms. This practice can introduce severe security vulnerabilities.\n  ```php\n  $class = new ReflectionClass($_GET[\"class\"]) // unsafe\n  ```\n- **Do** validate and sanitize all user input used in code generation to ensure it does not contain malicious code. Use a whitelist approach, allowing only known safe values.\n- **Do** employ security mechanisms such as input validation libraries or frameworks that specifically address code injection risks.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","markdown":"## Description\n\nUnsanitized user input in code generation can lead to code injection vulnerabilities. This occurs when an application dynamically generates or manipulates code using data provided by the user without proper sanitization.\n\n## Remediations\n\n- **Do not** use user-supplied input directly in code generation or reflection mechanisms. This practice can introduce severe security vulnerabilities.\n  ```php\n  $class = new ReflectionClass($_GET[\"class\"]) // unsafe\n  ```\n- **Do** validate and sanitize all user input used in code generation to ensure it does not contain malicious code. Use a whitelist approach, allowing only known safe values.\n- **Do** employ security mechanisms such as input validation libraries or frameworks that specifically address code injection risks.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)"}},{"id":"php_third_parties_new_relic","name":"php_third_parties_new_relic","shortDescription":{"text":"Leakage of sensitive data to New Relic"},"fullDescription":{"text":"Leakage of sensitive data to New Relic"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like New Relic is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like New Relic\n\n## References\n- [New Relic Docs](https://docs.newrelic.com/)\n- [Log obfuscation](https://docs.newrelic.com/docs/logs/ui-data/obfuscation-ui/)\n"}},{"id":"python_django_file_permissions","name":"python_django_file_permissions","shortDescription":{"text":"Permissive file assignment"},"fullDescription":{"text":"Permissive file assignment"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nPermissive file assignment exposes sensitive information by granting unnecessary read, write, or execute permissions to users without ownership privileges.\n\n## Remediations\n\n- **Do** keep file permissions as restrictive as possible to minimize the risk of unauthorized access. Use the principle of least privilege to only grant permissions that are absolutely necessary for the operation of the application.\n    ```python\n    FileSystemStorage(location=\"my_file.txt\", file_permissions_mode=0o500) # only you have full read and write access\n    ```\n- **Do** prefer assigning file permissions to 'groups' rather than 'other' when you need to extend privileges to users who are not the owners. This approach helps in limiting access to a more controlled set of users.\n- **Do** set an appropriate default value for file permissions mode in setting.py\n  ```python\n    # settings.py\n    FILE_UPLOAD_PERMISSIONS = 0o600\n  ```","markdown":"## Description\n\nPermissive file assignment exposes sensitive information by granting unnecessary read, write, or execute permissions to users without ownership privileges.\n\n## Remediations\n\n- **Do** keep file permissions as restrictive as possible to minimize the risk of unauthorized access. Use the principle of least privilege to only grant permissions that are absolutely necessary for the operation of the application.\n    ```python\n    FileSystemStorage(location=\"my_file.txt\", file_permissions_mode=0o500) # only you have full read and write access\n    ```\n- **Do** prefer assigning file permissions to 'groups' rather than 'other' when you need to extend privileges to users who are not the owners. This approach helps in limiting access to a more controlled set of users.\n- **Do** set an appropriate default value for file permissions mode in setting.py\n  ```python\n    # settings.py\n    FILE_UPLOAD_PERMISSIONS = 0o600\n  ```"}},{"id":"javascript_third_parties_sentry","name":"javascript_third_parties_sentry","shortDescription":{"text":"Leakage of sensitive data to Sentry"},"fullDescription":{"text":"Leakage of sensitive data to Sentry"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Sentry is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Sentry.\n\n## References\n- [Sentry Docs](https://docs.sentry.io/)\n"}},{"id":"go_lang_xml_external_entity_vulnerability","name":"go_lang_xml_external_entity_vulnerability","shortDescription":{"text":"Unsanitized user input in XML External Entity"},"fullDescription":{"text":"Unsanitized user input in XML External Entity"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in XML External Entity (XXE) processing can lead to security vulnerabilities. This issue arises when XML input containing a reference to an external entity is processed without proper sanitization, potentially allowing attackers to access or interact with external systems.\n\n## Remediations\n\n- **Do not** parse XML input containing external entities from untrusted sources. Doing so allows potential attackers to exploit XXE vulnerabilities and gain access to unauthorized data or systems.\n\n## References\n\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nUnsanitized user input in XML External Entity (XXE) processing can lead to security vulnerabilities. This issue arises when XML input containing a reference to an external entity is processed without proper sanitization, potentially allowing attackers to access or interact with external systems.\n\n## Remediations\n\n- **Do not** parse XML input containing external entities from untrusted sources. Doing so allows potential attackers to exploit XXE vulnerabilities and gain access to unauthorized data or systems.\n\n## References\n\n- [OWASP XML External Entity (XXE) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)"}},{"id":"javascript_lang_file_generation","name":"javascript_lang_file_generation","shortDescription":{"text":"Leakage of sensitive data in dynamic file generation"},"fullDescription":{"text":"Leakage of sensitive data in dynamic file generation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSensitive data leakage in dynamic file generation occurs when sensitive information is written to static files such as logs, backups, or data exports. This vulnerability exposes sensitive data to unauthorized access.\n\n## Remediations\n\n- **Do not** write sensitive data directly to logs, backups, or data exports. This practice can lead to unauthorized access to sensitive information.\n  ```javascript\n  fs.writeFile(\"data.csv\", JSON.stringify(users), \"utf-8\", (err) =\u003e {\n    if (err) console.log(err)\n  })\n  ```\n- **Do** obfuscate or filter sensitive data before writing it to static files. This reduces the risk of sensitive data exposure.","markdown":"## Description\n\nSensitive data leakage in dynamic file generation occurs when sensitive information is written to static files such as logs, backups, or data exports. This vulnerability exposes sensitive data to unauthorized access.\n\n## Remediations\n\n- **Do not** write sensitive data directly to logs, backups, or data exports. This practice can lead to unauthorized access to sensitive information.\n  ```javascript\n  fs.writeFile(\"data.csv\", JSON.stringify(users), \"utf-8\", (err) =\u003e {\n    if (err) console.log(err)\n  })\n  ```\n- **Do** obfuscate or filter sensitive data before writing it to static files. This reduces the risk of sensitive data exposure."}},{"id":"php_symfony_open_redirect","name":"php_symfony_open_redirect","shortDescription":{"text":"Unsanitized user input in redirect"},"fullDescription":{"text":"Unsanitized user input in redirect"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n```php\n$paths = [\n  \"1\" =\u003e \"/planes\",\n  \"2\" =\u003e \"/trains\",\n  \"3\" =\u003e \"/automobiles\",\n];\n\n$transport = $_GET[\"transport\"];\n$this-\u003eredirect($paths[$transport]);\n```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","markdown":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n```php\n$paths = [\n  \"1\" =\u003e \"/planes\",\n  \"2\" =\u003e \"/trains\",\n  \"3\" =\u003e \"/automobiles\",\n];\n\n$transport = $_GET[\"transport\"];\n$this-\u003eredirect($paths[$transport]);\n```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)"}},{"id":"javascript_lang_logger","name":"javascript_lang_logger","shortDescription":{"text":"Leakage of sensitive information in logger message"},"fullDescription":{"text":"Leakage of sensitive information in logger message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSensitive information leakage through logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintended exposure of private information.\n  ```javascript\n  logger.info(`User is: ${user.email}`) // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users in log messages. This approach maintains user privacy while still allowing for effective logging.\n  ```javascript\n  logger.info(`User is: ${user.uuid}`)\n  ```\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","markdown":"## Description\n\nSensitive information leakage through logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintended exposure of private information.\n  ```javascript\n  logger.info(`User is: ${user.email}`) // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users in log messages. This approach maintains user privacy while still allowing for effective logging.\n  ```javascript\n  logger.info(`User is: ${user.uuid}`)\n  ```\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)"}},{"id":"ruby_lang_manual_html_sanitization","name":"ruby_lang_manual_html_sanitization","shortDescription":{"text":"Usage of manual HTML sanitization (XSS)"},"fullDescription":{"text":"Usage of manual HTML sanitization (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nManual HTML sanitization can introduce Cross-Site Scripting (XSS) vulnerabilities. This security risk arises when developers attempt to manually escape HTML entities, which is a process prone to errors and oversights, potentially leaving the application vulnerable to XSS attacks.\n\n## Remediations\n\n- **Do not** manually escape HTML to sanitize user input. This method is unreliable and can easily miss certain exploits.\n  ```ruby\n  sanitized_user_input = user.Input\n    .gsub('\u003c', '\u0026lt;') # unsafe\n    .gsub('\u003e', '\u0026gt;') # unsafe\n  html = \"\u003cstrong\u003e#{sanitized_user_input}\u003c/strong\u003e\"\n  ```\n- **Do** use a HTML sanitization library to handle user input safely. Libraries are designed to comprehensively sanitize input, protecting against XSS attacks.\n  ```ruby\n  html = sanitize(\"\u003cstrong\u003e#{user.Input}\u003c/strong\u003e\")\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","markdown":"## Description\n\nManual HTML sanitization can introduce Cross-Site Scripting (XSS) vulnerabilities. This security risk arises when developers attempt to manually escape HTML entities, which is a process prone to errors and oversights, potentially leaving the application vulnerable to XSS attacks.\n\n## Remediations\n\n- **Do not** manually escape HTML to sanitize user input. This method is unreliable and can easily miss certain exploits.\n  ```ruby\n  sanitized_user_input = user.Input\n    .gsub('\u003c', '\u0026lt;') # unsafe\n    .gsub('\u003e', '\u0026gt;') # unsafe\n  html = \"\u003cstrong\u003e#{sanitized_user_input}\u003c/strong\u003e\"\n  ```\n- **Do** use a HTML sanitization library to handle user input safely. Libraries are designed to comprehensively sanitize input, protecting against XSS attacks.\n  ```ruby\n  html = sanitize(\"\u003cstrong\u003e#{user.Input}\u003c/strong\u003e\")\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)"}},{"id":"python_third_parties_bigquery","name":"python_third_parties_bigquery","shortDescription":{"text":"Leakage of sensitive data to BigQuery"},"fullDescription":{"text":"Leakage of sensitive data to BigQuery"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party data tools like BigQuery is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like BigQuery.\n\n## References\n- [Python Client for Google BigQuery](https://github.com/googleapis/python-bigquery)\n- [BigQuery docs](https://cloud.google.com/python/docs/reference/bigquery/latest)\n","markdown":"## Description\n\nLeaking sensitive data to third-party data tools like BigQuery is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party services like BigQuery.\n\n## References\n- [Python Client for Google BigQuery](https://github.com/googleapis/python-bigquery)\n- [BigQuery docs](https://cloud.google.com/python/docs/reference/bigquery/latest)\n"}},{"id":"python_lang_insecure_http","name":"python_lang_insecure_http","shortDescription":{"text":"Usage of insecure HTTP connection"},"fullDescription":{"text":"Usage of insecure HTTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is at risk when it connects to APIs using insecure HTTP connections. This vulnerability occurs because HTTP lacks encryption, making data susceptible to interception and alteration. Always verify that your application exclusively uses HTTPS connections for enhanced security.\n\n## Remediations\n\n- **Do not** initiate connections using unsecured HTTP. This exposes your data to potential interception and manipulation.\n  ```python\n  urllib.request.urlopen(\"http://insecure-api.com\") # unsafe\n  ```\n- **Do** ensure all connections are made through HTTPS to encrypt data and protect against eavesdropping and tampering.\n  ```python\n  urllib.request.urlopen(\"https://secure-api.com\")\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nYour application is at risk when it connects to APIs using insecure HTTP connections. This vulnerability occurs because HTTP lacks encryption, making data susceptible to interception and alteration. Always verify that your application exclusively uses HTTPS connections for enhanced security.\n\n## Remediations\n\n- **Do not** initiate connections using unsecured HTTP. This exposes your data to potential interception and manipulation.\n  ```python\n  urllib.request.urlopen(\"http://insecure-api.com\") # unsafe\n  ```\n- **Do** ensure all connections are made through HTTPS to encrypt data and protect against eavesdropping and tampering.\n  ```python\n  urllib.request.urlopen(\"https://secure-api.com\")\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"go_gosec_blocklist_cgi","name":"go_gosec_blocklist_cgi","shortDescription":{"text":"Usage of vulnerable CGI package"},"fullDescription":{"text":"Usage of vulnerable CGI package"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe `net/http/cgi` package in Go versions before 1.6.3 is vulnerable to the Httpoxy attack. This vulnerability, identified as CVE-2016-5386, occurs because of how CGI and FastCGI protocols manage certain environment variables. Attackers can exploit this to intercept and redirect outgoing HTTP requests from the web application.\n\n## Remediations\n\n- **Do** update your Go version to 1.6.3 or later to mitigate this vulnerability.\n- **Do** opt for alternative packages, like the standard `net/http` library, for handling HTTP requests that do not use the CGI protocol.\n- **Do not** use the `net/http/cgi` package if your Go version is older than 1.6.3, as it is vulnerable to the Httpoxy attack.\n  ```go\n  import \"net/http/cgi\"\n  ```\n- **Do** ensure that environment variables like `HTTP_PROXY` are not unintentionally exposed, as this can be leveraged for Httpoxy attacks.\n\n## References\n\n- [Httpoxy.org](https://httpoxy.org/)","markdown":"## Description\n\nThe `net/http/cgi` package in Go versions before 1.6.3 is vulnerable to the Httpoxy attack. This vulnerability, identified as CVE-2016-5386, occurs because of how CGI and FastCGI protocols manage certain environment variables. Attackers can exploit this to intercept and redirect outgoing HTTP requests from the web application.\n\n## Remediations\n\n- **Do** update your Go version to 1.6.3 or later to mitigate this vulnerability.\n- **Do** opt for alternative packages, like the standard `net/http` library, for handling HTTP requests that do not use the CGI protocol.\n- **Do not** use the `net/http/cgi` package if your Go version is older than 1.6.3, as it is vulnerable to the Httpoxy attack.\n  ```go\n  import \"net/http/cgi\"\n  ```\n- **Do** ensure that environment variables like `HTTP_PROXY` are not unintentionally exposed, as this can be leveraged for Httpoxy attacks.\n\n## References\n\n- [Httpoxy.org](https://httpoxy.org/)"}},{"id":"ruby_rails_render_using_user_input","name":"ruby_rails_render_using_user_input","shortDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"fullDescription":{"text":"Unsanitized user input in raw HTML strings (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in HTML responses can lead to cross-site scripting (XSS) attacks. This vulnerability exposes your application to malicious scripts injected by attackers, compromising user data and browser security.\n\n## Remediations\n\n- **Do not** include unsanitized user input directly in HTML responses. This practice makes your application vulnerable to XSS attacks.\n  ```ruby\n  render html: \"\u003ch1\u003e#{params[:title]}\u003c/h1\u003e\"\n  ```\n\n- **Do** sanitize user input before including it in an HTML response to prevent XSS attacks.\n  ```ruby\n  render html: \"\u003ch1\u003e#{strip_tags(params[:title])}\u003c/h1\u003e\"\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nIncluding unsanitized user input in HTML responses can lead to cross-site scripting (XSS) attacks. This vulnerability exposes your application to malicious scripts injected by attackers, compromising user data and browser security.\n\n## Remediations\n\n- **Do not** include unsanitized user input directly in HTML responses. This practice makes your application vulnerable to XSS attacks.\n  ```ruby\n  render html: \"\u003ch1\u003e#{params[:title]}\u003c/h1\u003e\"\n  ```\n\n- **Do** sanitize user input before including it in an HTML response to prevent XSS attacks.\n  ```ruby\n  render html: \"\u003ch1\u003e#{strip_tags(params[:title])}\u003c/h1\u003e\"\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"python_lang_insecure_cookie","name":"python_lang_insecure_cookie","shortDescription":{"text":"Missing Secure option in cookie configuration"},"fullDescription":{"text":"Missing Secure option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `secure` option to `True` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```python\n  cookie['my_session_id']['secure'] = True\n  ```","markdown":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `secure` option to `True` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```python\n  cookie['my_session_id']['secure'] = True\n  ```"}},{"id":"python_lang_permissive_allow_origin","name":"python_lang_permissive_allow_origin","shortDescription":{"text":"Permissive Access-Control-Allow-Origin configuration"},"fullDescription":{"text":"Permissive Access-Control-Allow-Origin configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nA permissive Access-Control-Allow-Origin configuration can expose your application to security risks. When this header is set to \"*\", it means your application's responses can be accessed by any website, potentially leading to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** set the Access-Control-Allow-Origin header to \"*\". This overly permissive setting can make your application vulnerable to attacks.\n  ```python\n  self.send_header('Access-Control-Allow-Origin', '*') # unsafe\n  ```\n- **Do** restrict the Access-Control-Allow-Origin header to only allow specific, trusted origins that need access to your application. This minimizes the risk of sensitive data exposure.\n  ```python\n  self.send_header('Access-Control-Allow-Origin', 'myapp.example.com');\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)","markdown":"## Description\n\nA permissive Access-Control-Allow-Origin configuration can expose your application to security risks. When this header is set to \"*\", it means your application's responses can be accessed by any website, potentially leading to unauthorized access to sensitive information.\n\n## Remediations\n\n- **Do not** set the Access-Control-Allow-Origin header to \"*\". This overly permissive setting can make your application vulnerable to attacks.\n  ```python\n  self.send_header('Access-Control-Allow-Origin', '*') # unsafe\n  ```\n- **Do** restrict the Access-Control-Allow-Origin header to only allow specific, trusted origins that need access to your application. This minimizes the risk of sensitive data exposure.\n  ```python\n  self.send_header('Access-Control-Allow-Origin', 'myapp.example.com');\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)"}},{"id":"python_lang_cookies","name":"python_lang_cookies","shortDescription":{"text":"Leakage of sensitive data in cookie"},"fullDescription":{"text":"Leakage of sensitive data in cookie"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```python\n  HttpResponse.set_cookie(\"user\", \"john@doe.com\", ...) # unsafe\n  ```\n- **Do** use encrypted cookies to protect sensitive data stored in cookies.\n  ```python\n  HttpResponse.set_signed_cookie(\"user\", \"john@doe.com\", ...)\n  ```","markdown":"## Description\n\nStoring sensitive data in cookies can lead to a data breach. This vulnerability occurs when sensitive information is stored in browser cookies, putting it at risk of unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in unencrypted cookies. This practice can expose sensitive information to potential security threats.\n  ```python\n  HttpResponse.set_cookie(\"user\", \"john@doe.com\", ...) # unsafe\n  ```\n- **Do** use encrypted cookies to protect sensitive data stored in cookies.\n  ```python\n  HttpResponse.set_signed_cookie(\"user\", \"john@doe.com\", ...)\n  ```"}},{"id":"ruby_lang_weak_password_hash_dss","name":"ruby_lang_weak_password_hash_dss","shortDescription":{"text":"Usage of weak hashing library on a password (DSS)"},"fullDescription":{"text":"Usage of weak hashing library on a password (DSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library for password storage compromises data security. Weak hashing algorithms, such as DSS, do not provide sufficient protection against brute-force attacks, making it easier for attackers to decrypt passwords.\n\n## Remediations\n\n- **Do not** use DSS as a hashing algorithm for passwords. It is considered weak and vulnerable to attacks.\n- **Do** use strong hashing libraries like bcrypt or Argon2id for password storage. These libraries are designed to secure passwords effectively against brute-force attacks.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)","markdown":"## Description\n\nUsing a weak hashing library for password storage compromises data security. Weak hashing algorithms, such as DSS, do not provide sufficient protection against brute-force attacks, making it easier for attackers to decrypt passwords.\n\n## Remediations\n\n- **Do not** use DSS as a hashing algorithm for passwords. It is considered weak and vulnerable to attacks.\n- **Do** use strong hashing libraries like bcrypt or Argon2id for password storage. These libraries are designed to secure passwords effectively against brute-force attacks.\n  ```ruby\n  BCrypt::Password.create(\"password_123\")\n  ```\n  ```ruby\n  hasher = Argon2::Password.new()\n  hasher.create(\"password_123\")\n  ```\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n- [ruby-argon2](https://github.com/technion/ruby-argon2)"}},{"id":"python_lang_file_permissions","name":"python_lang_file_permissions","shortDescription":{"text":"Permissive file assignment"},"fullDescription":{"text":"Permissive file assignment"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nPermissive file assignment exposes sensitive information by granting unnecessary read, write, or execute permissions to users without ownership privileges.\n\n## Remediations\n\n- **Do** keep file permissions as restrictive as possible to minimize the risk of unauthorized access. Use the principle of least privilege to only grant permissions that are absolutely necessary for the operation of the application.\n  ```python\n  os.chmod(\"my_private_file.txt\", 0o600) # only you have full read and write access\n  ```\n- **Do** prefer assigning file permissions to 'groups' rather than 'other' when you need to extend privileges to users who are not the owners. This approach helps in limiting access to a more controlled set of users.\n- **Do not** set a permissive `umask` value, as this can lead to overly permissive default permissions for new files and directories\n```python\n  os.umask(0) # unsafe\n```","markdown":"## Description\n\nPermissive file assignment exposes sensitive information by granting unnecessary read, write, or execute permissions to users without ownership privileges.\n\n## Remediations\n\n- **Do** keep file permissions as restrictive as possible to minimize the risk of unauthorized access. Use the principle of least privilege to only grant permissions that are absolutely necessary for the operation of the application.\n  ```python\n  os.chmod(\"my_private_file.txt\", 0o600) # only you have full read and write access\n  ```\n- **Do** prefer assigning file permissions to 'groups' rather than 'other' when you need to extend privileges to users who are not the owners. This approach helps in limiting access to a more controlled set of users.\n- **Do not** set a permissive `umask` value, as this can lead to overly permissive default permissions for new files and directories\n```python\n  os.umask(0) # unsafe\n```"}},{"id":"go_third_parties_google_analytics","name":"go_third_parties_google_analytics","shortDescription":{"text":"Leakage of sensitive data to Google Analytics"},"fullDescription":{"text":"Leakage of sensitive data to Google Analytics"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party analytics tools like Google Analytics is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to analytics libraries like Google Analytics.\n\n ## References\n- [Google Analytics docs](https://developers.google.com/analytics/devguides/reporting/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party analytics tools like Google Analytics is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to analytics libraries like Google Analytics.\n\n ## References\n- [Google Analytics docs](https://developers.google.com/analytics/devguides/reporting/)\n"}},{"id":"javascript_lang_dynamic_regex","name":"javascript_lang_dynamic_regex","shortDescription":{"text":"Unsanitized dynamic input in regular expression"},"fullDescription":{"text":"Unsanitized dynamic input in regular expression"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","markdown":"## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)"}},{"id":"javascript_lang_jwt_hardcoded_secret","name":"javascript_lang_jwt_hardcoded_secret","shortDescription":{"text":"Leakage of hard-coded secret in JWT"},"fullDescription":{"text":"Leakage of hard-coded secret in JWT"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring hard-coded secrets in your code, especially for JSON Web Tokens (JWT), poses a significant security risk. This practice makes your application vulnerable to unauthorized access and attacks.\n\n## Remediations\n\n- **Do not** hard-code secrets in your code. Hard-coding makes sensitive information easily accessible to anyone who can view the code.\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n```javascript\n  var jwt = require(\"jsonwebtoken\");\n  var token = jwt.sign({ foo: \"bar\" }, process.env.JWT_SECRET);\n```\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)","markdown":"## Description\n\nStoring hard-coded secrets in your code, especially for JSON Web Tokens (JWT), poses a significant security risk. This practice makes your application vulnerable to unauthorized access and attacks.\n\n## Remediations\n\n- **Do not** hard-code secrets in your code. Hard-coding makes sensitive information easily accessible to anyone who can view the code.\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n```javascript\n  var jwt = require(\"jsonwebtoken\");\n  var token = jwt.sign({ foo: \"bar\" }, process.env.JWT_SECRET);\n```\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)"}},{"id":"ruby_lang_file_generation","name":"ruby_lang_file_generation","shortDescription":{"text":"Leakage of sensitive data in dynamic file generation"},"fullDescription":{"text":"Leakage of sensitive data in dynamic file generation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWriting sensitive data to static files, such as logs, backups, or data exports, can lead to unintended data exposure. Be wary of writing sensitive information to files, because this poses a risk of data leakage.\n\n## Remediations\n\n- **Do not** write sensitive data directly to static files without considering the security implications. This includes user emails, names, or any personally identifiable information (PII).\n  ```ruby\n  File.open(\"users.log\", \"w\") { |f| f.write \"#{Time.now} - User #{user.email} logged in\\n\" }\n  File.open(\"users.csv\", \"w\") do |f|\n    users.each do |user|\n      f.write \"#{user.email},#{user.first_name},#{user.last_name}\"\n    end\n  end\n  ```\n- **Do** ensure that if writing sensitive data to files is necessary, such files are securely stored and access is strictly controlled. Implement encryption for files containing sensitive data.\n- **Do** document the storage location of files containing sensitive data and ensure it aligns with your organization's internal data handling and privacy policies.","markdown":"## Description\n\nWriting sensitive data to static files, such as logs, backups, or data exports, can lead to unintended data exposure. Be wary of writing sensitive information to files, because this poses a risk of data leakage.\n\n## Remediations\n\n- **Do not** write sensitive data directly to static files without considering the security implications. This includes user emails, names, or any personally identifiable information (PII).\n  ```ruby\n  File.open(\"users.log\", \"w\") { |f| f.write \"#{Time.now} - User #{user.email} logged in\\n\" }\n  File.open(\"users.csv\", \"w\") do |f|\n    users.each do |user|\n      f.write \"#{user.email},#{user.first_name},#{user.last_name}\"\n    end\n  end\n  ```\n- **Do** ensure that if writing sensitive data to files is necessary, such files are securely stored and access is strictly controlled. Implement encryption for files containing sensitive data.\n- **Do** document the storage location of files containing sensitive data and ensure it aligns with your organization's internal data handling and privacy policies."}},{"id":"javascript_node_missing_tls_validation","name":"javascript_node_missing_tls_validation","shortDescription":{"text":"Missing TLS validation"},"fullDescription":{"text":"Missing TLS validation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nFailing to validate TLS certificates exposes your application to significant security risks, including Man-in-the-Middle attacks and data interception. This vulnerability occurs when the application does not properly verify the SSL/TLS certificate of the server it is connecting to, allowing attackers to potentially intercept or alter data in transit.\n\n## Remediations\n\n- **Do not** disable SSL/TLS certificate validation. Specifically, avoid setting the `NODE_TLS_REJECT_UNAUTHORIZED` variable to zero in environments where security is a concern. This action turns off TLS/SSL certificate validation, leaving your application vulnerable to attacks.\n    ```javascript\n    process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n    ```","markdown":"## Description\n\nFailing to validate TLS certificates exposes your application to significant security risks, including Man-in-the-Middle attacks and data interception. This vulnerability occurs when the application does not properly verify the SSL/TLS certificate of the server it is connecting to, allowing attackers to potentially intercept or alter data in transit.\n\n## Remediations\n\n- **Do not** disable SSL/TLS certificate validation. Specifically, avoid setting the `NODE_TLS_REJECT_UNAUTHORIZED` variable to zero in environments where security is a concern. This action turns off TLS/SSL certificate validation, leaving your application vulnerable to attacks.\n    ```javascript\n    process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n    ```"}},{"id":"go_third_parties_honeybadger","name":"go_third_parties_honeybadger","shortDescription":{"text":"Leakage of sensitive data to Honeybadger"},"fullDescription":{"text":"Leakage of sensitive data to Honeybadger"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/go/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.\n\n## References\n- [Honeybadger Docs](https://docs.honeybadger.io/lib/go/)\n"}},{"id":"go_gosec_filesystem_tempfile","name":"go_gosec_filesystem_tempfile","shortDescription":{"text":"Permissive temporary file creation"},"fullDescription":{"text":"Permissive temporary file creation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application creates temporary files in shared system directories like `/tmp` or `/var/tmp` without using secure functions such as `os.CreateTemp`. This method is risky as it could lead to symlink attacks. In such attacks, an attacker predicts the name of the temporary file and creates a symlink to a target file. Consequently, when your application writes to the supposed temporary file, it could unintentionally overwrite or create unauthorized files.\n\n## Remediations\n\n- **Do** use `os.CreateTemp` for creating temporary files. This function helps in securely generating temporary files within a directory that only your application can access, significantly reducing the risk of symlink attacks.\n  ```go\n  f, err := os.CreateTemp(restrictedDir, \"temp-*.txt\")\n  ```\n- **Do not** use shared temporary directories for operations that involve sensitive data or require secure file handling.\n- **Do** ensure temporary files are removed after their intended use to avoid accumulation and potential security risks.\n\n## References\n\n- [Go Documentation: os.CreateTemp](https://pkg.go.dev/os#CreateTemp)","markdown":"## Description\n\nYour application creates temporary files in shared system directories like `/tmp` or `/var/tmp` without using secure functions such as `os.CreateTemp`. This method is risky as it could lead to symlink attacks. In such attacks, an attacker predicts the name of the temporary file and creates a symlink to a target file. Consequently, when your application writes to the supposed temporary file, it could unintentionally overwrite or create unauthorized files.\n\n## Remediations\n\n- **Do** use `os.CreateTemp` for creating temporary files. This function helps in securely generating temporary files within a directory that only your application can access, significantly reducing the risk of symlink attacks.\n  ```go\n  f, err := os.CreateTemp(restrictedDir, \"temp-*.txt\")\n  ```\n- **Do not** use shared temporary directories for operations that involve sensitive data or require secure file handling.\n- **Do** ensure temporary files are removed after their intended use to avoid accumulation and potential security risks.\n\n## References\n\n- [Go Documentation: os.CreateTemp](https://pkg.go.dev/os#CreateTemp)"}},{"id":"javascript_lang_message_handler_origin","name":"javascript_lang_message_handler_origin","shortDescription":{"text":"Missing origin check in message handler"},"fullDescription":{"text":"Missing origin check in message handler"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nFailing to verify the origin of message events can expose your application to Cross-Site Scripting (XSS) attacks. This vulnerability arises when an application processes messages without confirming if they come from a trusted source.\n\n## Remediations\n\n- **Do not** add message event listeners without checking the origin of the messages. This approach leaves your application vulnerable to malicious inputs.\n  ```javascript\n  window.addEventListener('message', (event) =\u003e {\n    actOnMessage(event.data) // unsafe\n  })\n  ```\n- **Do** validate the origin of incoming messages before processing them. Ensure that the message comes from a trusted source by comparing the event's origin with a predefined list of allowed origins.\n  ```javascript\n  window.addEventListener('message', (event) =\u003e {\n    if (event.origin != 'https://myapp.example.com') {\n      throw new Error('invalid origin')\n    }\n\n    actOnMessage(event.data)\n  })\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nFailing to verify the origin of message events can expose your application to Cross-Site Scripting (XSS) attacks. This vulnerability arises when an application processes messages without confirming if they come from a trusted source.\n\n## Remediations\n\n- **Do not** add message event listeners without checking the origin of the messages. This approach leaves your application vulnerable to malicious inputs.\n  ```javascript\n  window.addEventListener('message', (event) =\u003e {\n    actOnMessage(event.data) // unsafe\n  })\n  ```\n- **Do** validate the origin of incoming messages before processing them. Ensure that the message comes from a trusted source by comparing the event's origin with a predefined list of allowed origins.\n  ```javascript\n  window.addEventListener('message', (event) =\u003e {\n    if (event.origin != 'https://myapp.example.com') {\n      throw new Error('invalid origin')\n    }\n\n    actOnMessage(event.data)\n  })\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"ruby_rails_session_with_httponly_disabled","name":"ruby_rails_session_with_httponly_disabled","shortDescription":{"text":"Missing HTTP Only option in cookie configuration"},"fullDescription":{"text":"Missing HTTP Only option in cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nDisabling httponly in your cookie configuration can expose your application to Cross-Site Scripting (XSS) attacks. This vulnerability occurs when session cookies can be accessed through JavaScript. Rails, by default, protects your application by enabling the HTTP only, which prevents such access. Setting httponly to `false` greatly increases your application's risk of XSS attacks.\n\n## Remediations\n\n- **Do not** set the httponly flag to false when configuring the Rails session_store.\n- **Do** keep this flag enabled to prevent JavaScript from accessing session cookies and reducing the risk of XSS attacks.\n  ```ruby\n  Rails.application.config.session_store :cookie_store, key: \"some_key\", httponly: true\n  ```\n\n## References\n\n- [OWASP HttpOnly](https://owasp.org/www-community/HttpOnly)","markdown":"## Description\n\nDisabling httponly in your cookie configuration can expose your application to Cross-Site Scripting (XSS) attacks. This vulnerability occurs when session cookies can be accessed through JavaScript. Rails, by default, protects your application by enabling the HTTP only, which prevents such access. Setting httponly to `false` greatly increases your application's risk of XSS attacks.\n\n## Remediations\n\n- **Do not** set the httponly flag to false when configuring the Rails session_store.\n- **Do** keep this flag enabled to prevent JavaScript from accessing session cookies and reducing the risk of XSS attacks.\n  ```ruby\n  Rails.application.config.session_store :cookie_store, key: \"some_key\", httponly: true\n  ```\n\n## References\n\n- [OWASP HttpOnly](https://owasp.org/www-community/HttpOnly)"}},{"id":"php_lang_http_insecure","name":"php_lang_http_insecure","shortDescription":{"text":"Usage of insecure HTTP connection"},"fullDescription":{"text":"Usage of insecure HTTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is at risk when it connects to APIs using insecure HTTP connections. This vulnerability occurs because HTTP lacks encryption, making data susceptible to interception and alteration. Always verify that your application exclusively uses HTTPS connections for enhanced security.\n\n## Remediations\n\n- **Do not** initiate connections using unsecured HTTP. This exposes your data to potential interception and manipulation.\n  ```php\n  $curl = curl_init('http://insecure-api.com'); // unsafe\n  ```\n- **Do** ensure all connections are made through HTTPS to encrypt data and protect against eavesdropping and tampering.\n  ```php\n  $curl = curl_init('https://secure-api.com');\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nYour application is at risk when it connects to APIs using insecure HTTP connections. This vulnerability occurs because HTTP lacks encryption, making data susceptible to interception and alteration. Always verify that your application exclusively uses HTTPS connections for enhanced security.\n\n## Remediations\n\n- **Do not** initiate connections using unsecured HTTP. This exposes your data to potential interception and manipulation.\n  ```php\n  $curl = curl_init('http://insecure-api.com'); // unsafe\n  ```\n- **Do** ensure all connections are made through HTTPS to encrypt data and protect against eavesdropping and tampering.\n  ```php\n  $curl = curl_init('https://secure-api.com');\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"javascript_express_server_side_request_forgery","name":"javascript_express_server_side_request_forgery","shortDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"fullDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncorporating unsanitized user input directly into URLs for data retrieval exposes your application to server-side request forgery (SSRF) attacks. This vulnerability arises when URLs include data provided by users without adequate validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct URLs for backend requests. This approach can lead to SSRF vulnerabilities.\n  ```javascript\n  axios.get(`https://${req.params.host}`); // unsafe\n  ```\n- **Do** validate or sanitize user input before using it in URLs. Prefer using a predefined list of allowed hosts and map user input to this list, ensuring only safe and expected URLs are constructed.\n  ```javascript\n  var host = \"default-api.com\"\n  if (req.params.host == \"something-else\") {\n    host = \"other-api.com\";\n  }\n\n  axios.get(`https://${host}`);\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nIncorporating unsanitized user input directly into URLs for data retrieval exposes your application to server-side request forgery (SSRF) attacks. This vulnerability arises when URLs include data provided by users without adequate validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct URLs for backend requests. This approach can lead to SSRF vulnerabilities.\n  ```javascript\n  axios.get(`https://${req.params.host}`); // unsafe\n  ```\n- **Do** validate or sanitize user input before using it in URLs. Prefer using a predefined list of allowed hosts and map user input to this list, ensuring only safe and expected URLs are constructed.\n  ```javascript\n  var host = \"default-api.com\"\n  if (req.params.host == \"something-else\") {\n    host = \"other-api.com\";\n  }\n\n  axios.get(`https://${host}`);\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)"}},{"id":"javascript_lang_handlebars_no_escape","name":"javascript_lang_handlebars_no_escape","shortDescription":{"text":"Missing escape of HTML entities in Handlebars template compilation"},"fullDescription":{"text":"Missing escape of HTML entities in Handlebars template compilation"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIn Handlebars (a templating engine that dynamically generates HTML markup), setting `noEscape` to true disables escaping HTML entities within the template output itself. This poses a security vulnerability, particularly leading to Cross-Site Scripting (XSS) attacks if the template content comes from an untrusted source.\n\n## Remediations\n\n- **Do** set `noEscape` to false while compiling Handlebars templates, to ensure that HTML entities are properly escaped, thus mitigating the risk of XSS vulnerabilities.\n  ```javascript\n  Handlebars.compile(template, { noEscape: false });\n  ```\n\n## References\n\n- [Handlebars compile docs](https://handlebarsjs.com/api-reference/compilation.html#handlebars-compile-template-options)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nIn Handlebars (a templating engine that dynamically generates HTML markup), setting `noEscape` to true disables escaping HTML entities within the template output itself. This poses a security vulnerability, particularly leading to Cross-Site Scripting (XSS) attacks if the template content comes from an untrusted source.\n\n## Remediations\n\n- **Do** set `noEscape` to false while compiling Handlebars templates, to ensure that HTML entities are properly escaped, thus mitigating the risk of XSS vulnerabilities.\n  ```javascript\n  Handlebars.compile(template, { noEscape: false });\n  ```\n\n## References\n\n- [Handlebars compile docs](https://handlebarsjs.com/api-reference/compilation.html#handlebars-compile-template-options)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"python_lang_weak_hash_dss","name":"python_lang_weak_hash_dss","shortDescription":{"text":"Usage of weak hashing library (DSS)"},"fullDescription":{"text":"Usage of weak hashing library (DSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing a weak hashing library like DSS increases the risk of data breaches. DSS has known security flaws and vulnerabilities, and its use is no longer recommended.\n\n## Remediations\n\n- **Do not** use DSS for hashing as it is considered a weak algorithm. This can compromise data security.\n  ```python\n  hashlib.new('dss', data).digest() # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```python\n  hashlib.sha256(data).digest()\n  ```","markdown":"## Description\n\nUsing a weak hashing library like DSS increases the risk of data breaches. DSS has known security flaws and vulnerabilities, and its use is no longer recommended.\n\n## Remediations\n\n- **Do not** use DSS for hashing as it is considered a weak algorithm. This can compromise data security.\n  ```python\n  hashlib.new('dss', data).digest() # unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```python\n  hashlib.sha256(data).digest()\n  ```"}},{"id":"go_gosec_injection_template_injection","name":"go_gosec_injection_template_injection","shortDescription":{"text":"Unsanitized user input in web page generation (XSS)"},"fullDescription":{"text":"Unsanitized user input in web page generation (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\n\n## Remediations\n\n- **Do** encode user input based on the context it is used in, such as HTML content, HTML attributes, JavaScript, and CSS contexts. This helps prevent malicious scripts from being executed.\n  ```go\n  html.EscapeString(userInput)\n  ```\n- **Do** use templating engines like `html/template` that automatically encode data based on its context.\n- **Do** sanitize data using libraries or functions specifically designed for this purpose, especially when inserting content into a web page.\n- **Do** separate data from code by avoiding inline scripting and event handlers. Use separate JavaScript files for event handling to minimize script injection risks.\n- **Do not** mix server-side and client-side templating systems, as server-side systems may not escape output safely for client-side use.\n- **Do not** encode user input before storing it in a database. Any encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [Go html/template Documentation](https://pkg.go.dev/html/template)","markdown":"## Description\n\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\n\n## Remediations\n\n- **Do** encode user input based on the context it is used in, such as HTML content, HTML attributes, JavaScript, and CSS contexts. This helps prevent malicious scripts from being executed.\n  ```go\n  html.EscapeString(userInput)\n  ```\n- **Do** use templating engines like `html/template` that automatically encode data based on its context.\n- **Do** sanitize data using libraries or functions specifically designed for this purpose, especially when inserting content into a web page.\n- **Do** separate data from code by avoiding inline scripting and event handlers. Use separate JavaScript files for event handling to minimize script injection risks.\n- **Do not** mix server-side and client-side templating systems, as server-side systems may not escape output safely for client-side use.\n- **Do not** encode user input before storing it in a database. Any encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [Go html/template Documentation](https://pkg.go.dev/html/template)"}},{"id":"python_lang_logger","name":"python_lang_logger","shortDescription":{"text":"Leakage of sensitive information in logger message"},"fullDescription":{"text":"Leakage of sensitive information in logger message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSensitive information leakage through logger messages can compromise data security. This vulnerability arises when sensitive data is inadvertently included in log messages, posing a risk of unauthorized disclosure.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintentional exposure of private information.\n  ```python\n  logger.info(f\"User is: '{user.email}'\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to log user information. This approach maintains privacy and security.\n  ```python\n  logger.info(f\"User is: '{user.uuid}'\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","markdown":"## Description\n\nSensitive information leakage through logger messages can compromise data security. This vulnerability arises when sensitive data is inadvertently included in log messages, posing a risk of unauthorized disclosure.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintentional exposure of private information.\n  ```python\n  logger.info(f\"User is: '{user.email}'\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to log user information. This approach maintains privacy and security.\n  ```python\n  logger.info(f\"User is: '{user.uuid}'\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)"}},{"id":"ruby_lang_http_get_params","name":"ruby_lang_http_get_params","shortDescription":{"text":"Leakage of sensitive data in HTTP GET parameters"},"fullDescription":{"text":"Leakage of sensitive data in HTTP GET parameters"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSensitive data should never be sent as part of the query string in HTTP GET requests. This is bad practice that can expose sensitive information since query strings can be cached or logged in server logs, and can be seen in browser history, making them vulnerable to unauthorized access.\n\n## Remediations\n\n- **Do not** send sensitive data through HTTP GET parameters. This method exposes information in plain text, even when using HTTPS.\n  ```ruby\n  HTTParty.get(\n    'https://secure-api.com/user',\n    {\n      email: user.email # unsafe\n    }\n  )\n  ```\n- **Do** use the HTTP POST method to send sensitive data securely. POST requests do not expose data in the URL.\n  ```ruby\n  HTTParty.post(\n    'https://secure-api.com/user',\n    body: {\n      email: user.email,\n    }\n  )\n  ```\n- **Do** use identifiers that do not expose personal or sensitive information, for cases where a GET request is required\n  ```ruby\n  HTTParty.get(\n    'https://secure-api.com/user',\n    {\n      id: user.uuid\n    }\n  )\n  ```\n\n## References\n\n- [OWASP information exposure through URL query strings](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)","markdown":"## Description\n\nSensitive data should never be sent as part of the query string in HTTP GET requests. This is bad practice that can expose sensitive information since query strings can be cached or logged in server logs, and can be seen in browser history, making them vulnerable to unauthorized access.\n\n## Remediations\n\n- **Do not** send sensitive data through HTTP GET parameters. This method exposes information in plain text, even when using HTTPS.\n  ```ruby\n  HTTParty.get(\n    'https://secure-api.com/user',\n    {\n      email: user.email # unsafe\n    }\n  )\n  ```\n- **Do** use the HTTP POST method to send sensitive data securely. POST requests do not expose data in the URL.\n  ```ruby\n  HTTParty.post(\n    'https://secure-api.com/user',\n    body: {\n      email: user.email,\n    }\n  )\n  ```\n- **Do** use identifiers that do not expose personal or sensitive information, for cases where a GET request is required\n  ```ruby\n  HTTParty.get(\n    'https://secure-api.com/user',\n    {\n      id: user.uuid\n    }\n  )\n  ```\n\n## References\n\n- [OWASP information exposure through URL query strings](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)"}},{"id":"php_lang_insecure_allow_origin","name":"php_lang_insecure_allow_origin","shortDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"fullDescription":{"text":"Unsanitized user input in Access-Control-Allow-Origin"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** use user input to define the `Access-Control-Allow-Origin` header without validation. This practice can inadvertently grant access to sensitive information.\n  ```php\n  header(\"Access-Control-Allow-Origin: {$_GET['untrusted']}\", true); // unsafe\n  ```\n- **Do** validate user input if it must be used to set the `Access-Control-Allow-Origin` header. Ensure that only trusted origins are allowed by implementing a safelist of approved origins.\n  ```php\n    $allowedOrigins = ['http://www.example.com', 'https://www.secure.example.com'];\n\n    $origin = $_GET['someParam'];\n\n    if (in_array($origin, $allowedOrigins)) {\n      header(\"Access-Control-Allow-Origin: $origin\");\n    }\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)","markdown":"## Description\n\nUsing unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.\n\n## Remediations\n\n- **Do not** use user input to define the `Access-Control-Allow-Origin` header without validation. This practice can inadvertently grant access to sensitive information.\n  ```php\n  header(\"Access-Control-Allow-Origin: {$_GET['untrusted']}\", true); // unsafe\n  ```\n- **Do** validate user input if it must be used to set the `Access-Control-Allow-Origin` header. Ensure that only trusted origins are allowed by implementing a safelist of approved origins.\n  ```php\n    $allowedOrigins = ['http://www.example.com', 'https://www.secure.example.com'];\n\n    $origin = $_GET['someParam'];\n\n    if (in_array($origin, $allowedOrigins)) {\n      header(\"Access-Control-Allow-Origin: $origin\");\n    }\n  ```\n\n## References\n\n- [OWASP Origin \u0026 Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)"}},{"id":"javascript_express_external_resource","name":"javascript_express_external_resource","shortDescription":{"text":"Unsanitized user input in resource rendering"},"fullDescription":{"text":"Unsanitized user input in resource rendering"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in resource rendering can lead to security vulnerabilities. This issue arises when user-provided data is used directly in rendering resources without proper sanitization, potentially leading to unauthorized access or manipulation of data.\n\n## Remediations\n\n- **Do not** pass user or request input directly to `res.render()` without sanitization. Directly using user input in resource rendering can introduce security risks.\n  ```javascript\n  res.render(req.body.page); // unsafe\n  ```\n- **Do** sanitize the input or use a safelist if you must rely on user input for resource rendering. This ensures that only expected and safe resources are rendered.\n  ```javascript\n  var path = req.body.path;\n  if (['users', 'posts', 'pages'].includes(path)) {\n    return res.render(`${path}/success`);\n  }\n  ```","markdown":"## Description\n\nUnsanitized user input in resource rendering can lead to security vulnerabilities. This issue arises when user-provided data is used directly in rendering resources without proper sanitization, potentially leading to unauthorized access or manipulation of data.\n\n## Remediations\n\n- **Do not** pass user or request input directly to `res.render()` without sanitization. Directly using user input in resource rendering can introduce security risks.\n  ```javascript\n  res.render(req.body.page); // unsafe\n  ```\n- **Do** sanitize the input or use a safelist if you must rely on user input for resource rendering. This ensures that only expected and safe resources are rendered.\n  ```javascript\n  var path = req.body.path;\n  if (['users', 'posts', 'pages'].includes(path)) {\n    return res.render(`${path}/success`);\n  }\n  ```"}},{"id":"php_lang_hardcoded_secret","name":"php_lang_hardcoded_secret","shortDescription":{"text":"Usage of hard-coded secret"},"fullDescription":{"text":"Usage of hard-coded secret"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nStoring secret values directly in the source code exposes them to unauthorized access and compromises security. This practice makes your application vulnerable to attacks.\n\n## Remediations\n\n- **Do not** hard-code secrets in your application code. Hard-coding makes sensitive information easily accessible to anyone who can view the code.\n- **Do** use environment variables to manage secrets securely. This method keeps sensitive information out of your codebase and makes it more difficult for unauthorized users to access.\n- **Do** retrieve secrets from a secure location at runtime. This approach minimizes the risk of exposing sensitive information and enhances the security of your application.\n  ```php\n  $secret = getenv('SECRET_KEY');\n  ```\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)","markdown":"## Description\n\nStoring secret values directly in the source code exposes them to unauthorized access and compromises security. This practice makes your application vulnerable to attacks.\n\n## Remediations\n\n- **Do not** hard-code secrets in your application code. Hard-coding makes sensitive information easily accessible to anyone who can view the code.\n- **Do** use environment variables to manage secrets securely. This method keeps sensitive information out of your codebase and makes it more difficult for unauthorized users to access.\n- **Do** retrieve secrets from a secure location at runtime. This approach minimizes the risk of exposing sensitive information and enhances the security of your application.\n  ```php\n  $secret = getenv('SECRET_KEY');\n  ```\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)"}},{"id":"go_gosec_filesystem_dirtraversal","name":"go_gosec_filesystem_dirtraversal","shortDescription":{"text":"Usage of Root directory mounting"},"fullDescription":{"text":"Usage of Root directory mounting"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nMounting the root directory (`/`) on an HTTP server exposes a significant security risk. This setup could allow unauthorized individuals to access and browse system files, potentially leading to information disclosure, data breaches, or further system exploitation.\n\n## Remediations\n\n- **Do not** mount the root directory as the web server's root. Doing so would make the entire filesystem accessible over the web.\n- **Do** serve files from a specific directory designed for public access. Ensure this directory only contains files intended for public viewing.\n- **Do** apply strict permissions to the directory being served. This ensures the server process accesses only the files it's meant to serve.\n- **Do** utilize server configuration files, such as `.htaccess` for Apache HTTP Server, to control access to directories if your server supports it.\n- **Do** consider isolating your server environment using containerization or virtualization techniques. This limits potential damage in case of a security breach by enforcing strict access controls.\n- **Do** conduct regular audits of your filesystem and the files your server is hosting. This helps ensure no sensitive information is accidentally exposed.\n\n## References\n\n- [Go Documentation: http package](https://pkg.go.dev/net/http)\n- [OWASP: Securing File Uploads](https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload)\n- [NIST Guidelines on Securing Public Web Servers](https://csrc.nist.gov/publications/detail/sp/800-44/version-2/final)\n- [Docker Documentation: Use containers for isolation](https://docs.docker.com/get-started/overview/#use-containers-for-isolation)\n- [Linux man page for chmod (file permissions)](https://linux.die.net/man/1/chmod)","markdown":"## Description\n\nMounting the root directory (`/`) on an HTTP server exposes a significant security risk. This setup could allow unauthorized individuals to access and browse system files, potentially leading to information disclosure, data breaches, or further system exploitation.\n\n## Remediations\n\n- **Do not** mount the root directory as the web server's root. Doing so would make the entire filesystem accessible over the web.\n- **Do** serve files from a specific directory designed for public access. Ensure this directory only contains files intended for public viewing.\n- **Do** apply strict permissions to the directory being served. This ensures the server process accesses only the files it's meant to serve.\n- **Do** utilize server configuration files, such as `.htaccess` for Apache HTTP Server, to control access to directories if your server supports it.\n- **Do** consider isolating your server environment using containerization or virtualization techniques. This limits potential damage in case of a security breach by enforcing strict access controls.\n- **Do** conduct regular audits of your filesystem and the files your server is hosting. This helps ensure no sensitive information is accidentally exposed.\n\n## References\n\n- [Go Documentation: http package](https://pkg.go.dev/net/http)\n- [OWASP: Securing File Uploads](https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload)\n- [NIST Guidelines on Securing Public Web Servers](https://csrc.nist.gov/publications/detail/sp/800-44/version-2/final)\n- [Docker Documentation: Use containers for isolation](https://docs.docker.com/get-started/overview/#use-containers-for-isolation)\n- [Linux man page for chmod (file permissions)](https://linux.die.net/man/1/chmod)"}},{"id":"go_lang_html_tag_injection","name":"go_lang_html_tag_injection","shortDescription":{"text":"Missing sanitization of HTML template tags"},"fullDescription":{"text":"Missing sanitization of HTML template tags"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nWhen user input is not sanitized, attackers can inject HTML tags, such as `\u003cscript\u003e` tags, into templates. This unsanitized input can lead to Cross-Site Scripting (XSS) attacks when the malicious scripts are executed.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into a template. This step is crucial to prevent XSS attacks.\n  ```go\n  safe := template.HTMLEscapeString(r.FormValue(\"xyz\"))\n  ```\n- **Do** use `html/template` instead of `text/template` for parsing and rendering templates. The `html/template` package automatically escapes inputs, providing an additional layer of security.\n  ```go\n  import \"html/template\"\n\n  func good(w http.ResponseWriter, r *http.Request) {\n    t, _ := template.New(\"something\").Parse(r.FormValue(\"xyz\"))\n    t.Execute(w, nil)\n  }\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nWhen user input is not sanitized, attackers can inject HTML tags, such as `\u003cscript\u003e` tags, into templates. This unsanitized input can lead to Cross-Site Scripting (XSS) attacks when the malicious scripts are executed.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into a template. This step is crucial to prevent XSS attacks.\n  ```go\n  safe := template.HTMLEscapeString(r.FormValue(\"xyz\"))\n  ```\n- **Do** use `html/template` instead of `text/template` for parsing and rendering templates. The `html/template` package automatically escapes inputs, providing an additional layer of security.\n  ```go\n  import \"html/template\"\n\n  func good(w http.ResponseWriter, r *http.Request) {\n    t, _ := template.New(\"something\").Parse(r.FormValue(\"xyz\"))\n    t.Execute(w, nil)\n  }\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)"}},{"id":"php_lang_xpath_injection","name":"php_lang_xpath_injection","shortDescription":{"text":"Unsanitized user input in XPath"},"fullDescription":{"text":"Unsanitized user input in XPath"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUnsanitized user input in XPath expressions can result in XPath injection. This vulnerability occurs when user input is directly used in XPath queries without proper sanitation, potentially granting unauthorized access to sensitive data within XML documents.\n\n## Remediations\n\n- **Do not** directly use user input in XPath expressions. This can lead to XPath injection vulnerabilities.\n- **Do** sanitize user input before including it in XPath queries. Ensure that any data derived from user input is properly cleaned to prevent injection attacks.\n\n## References\n\n- [XPath Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","markdown":"## Description\n\nUnsanitized user input in XPath expressions can result in XPath injection. This vulnerability occurs when user input is directly used in XPath queries without proper sanitation, potentially granting unauthorized access to sensitive data within XML documents.\n\n## Remediations\n\n- **Do not** directly use user input in XPath expressions. This can lead to XPath injection vulnerabilities.\n- **Do** sanitize user input before including it in XPath queries. Ensure that any data derived from user input is properly cleaned to prevent injection attacks.\n\n## References\n\n- [XPath Injection](https://owasp.org/www-community/attacks/XPATH_Injection)"}},{"id":"python_django_insecure_smtp","name":"python_django_insecure_smtp","shortDescription":{"text":"Usage of insecure SMTP connection"},"fullDescription":{"text":"Usage of insecure SMTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAn insecure SMTP connection can expose transmitted data to unauthorized access. This rule identifies if SMTP settings are configured to enforce secure connections.\n\n## Remediations\n\n- **Do** enable SSL encryption in your SMTP configuration to secure the connection. This prevents unauthorized access to the data being transmitted.\n  ```python\n  EMAIL_USE_TLS = True\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nAn insecure SMTP connection can expose transmitted data to unauthorized access. This rule identifies if SMTP settings are configured to enforce secure connections.\n\n## Remediations\n\n- **Do** enable SSL encryption in your SMTP configuration to secure the connection. This prevents unauthorized access to the data being transmitted.\n  ```python\n  EMAIL_USE_TLS = True\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"python_lang_weak_random","name":"python_lang_weak_random","shortDescription":{"text":"Usage of weak Pseudo-Random Number Generator (PRNG)"},"fullDescription":{"text":"Usage of weak Pseudo-Random Number Generator (PRNG)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nThe `random` module in Python generates pseudorandom numbers that are not secure for cryptographic purposes. These numbers can be predicted if the seed is known, posing a risk to the security of applications that use them for generating secrets, tokens, or other security-sensitive elements.\n\n## Remediations\n\n- **Do** use `secrets` instead of `random` for generating random numbers in contexts where security is crucial. This ensures the randomness is cryptographically secure and unpredictable.\n- **Do not** use `random` for generating random numbers in cryptographic applications, including but not limited to key generation, authentication tokens, or security challenges.\n- **Do not** initialize `random` with predictable seeds, such as timestamps or other easily guessable values, if it is required to use `random`.\n\n## References\n\n- [secrets module documentation](https://docs.python.org/3/library/secrets.html)","markdown":"## Description\n\nThe `random` module in Python generates pseudorandom numbers that are not secure for cryptographic purposes. These numbers can be predicted if the seed is known, posing a risk to the security of applications that use them for generating secrets, tokens, or other security-sensitive elements.\n\n## Remediations\n\n- **Do** use `secrets` instead of `random` for generating random numbers in contexts where security is crucial. This ensures the randomness is cryptographically secure and unpredictable.\n- **Do not** use `random` for generating random numbers in cryptographic applications, including but not limited to key generation, authentication tokens, or security challenges.\n- **Do not** initialize `random` with predictable seeds, such as timestamps or other easily guessable values, if it is required to use `random`.\n\n## References\n\n- [secrets module documentation](https://docs.python.org/3/library/secrets.html)"}},{"id":"php_symfony_insecure_smtp","name":"php_symfony_insecure_smtp","shortDescription":{"text":"Usage of insecure SMTP connection"},"fullDescription":{"text":"Usage of insecure SMTP connection"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nAn insecure SMTP connection can expose transmitted data to unauthorized access. This rule identifies if SMTP settings are configured to enforce secure connections.\n\n## Remediations\n\n- **Do** enable SSL encryption in your SMTP configuration to secure the connection. This prevents unauthorized access to the data being transmitted.\n  ```php\n  return static function (ContainerConfigurator $container): void {\n    $container-\u003eextension('framework', [\n      'mailer' =\u003e [\n        'dsn' =\u003e \"foo+smtp://wherever?verify_peer=true\",\n      ],\n    ]);\n  };\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)","markdown":"## Description\n\nAn insecure SMTP connection can expose transmitted data to unauthorized access. This rule identifies if SMTP settings are configured to enforce secure connections.\n\n## Remediations\n\n- **Do** enable SSL encryption in your SMTP configuration to secure the connection. This prevents unauthorized access to the data being transmitted.\n  ```php\n  return static function (ContainerConfigurator $container): void {\n    $container-\u003eextension('framework', [\n      'mailer' =\u003e [\n        'dsn' =\u003e \"foo+smtp://wherever?verify_peer=true\",\n      ],\n    ]);\n  };\n  ```\n\n## References\n\n- [OWASP insecure transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)"}},{"id":"python_lang_weak_encryption_rc4","name":"python_lang_weak_encryption_rc4","shortDescription":{"text":"Usage of weak encryption algorithm (RC4)"},"fullDescription":{"text":"Usage of weak encryption algorithm (RC4)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour code is at risk due to the use of RC4 (Rivest's Cipher version 4), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use RC4 as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```python\n  from Crypto.Cipher import AES\n\n  cipher = AES.new(aes_key, AES.MODE_OCB)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)","markdown":"## Description\n\nYour code is at risk due to the use of RC4 (Rivest's Cipher version 4), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use RC4 as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```python\n  from Crypto.Cipher import AES\n\n  cipher = AES.new(aes_key, AES.MODE_OCB)\n  ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n  ```\n\n## References\n\n- [PyCryptodome modern ciphers](https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html)"}},{"id":"go_lang_logger_leak","name":"go_lang_logger_leak","shortDescription":{"text":"Leakage of information in logger message"},"fullDescription":{"text":"Leakage of information in logger message"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nInformation leakage through logger messages can result in data breaches. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data.\n  ```go\n  logger.info(f\"User is: '{user.email}'\") // unsafe\n  ```\n- **Do** sanitize or remove sensitive information from data before logging. Ensure that logged information does not contain any personal or confidential data.","markdown":"## Description\n\nInformation leakage through logger messages can result in data breaches. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data.\n  ```go\n  logger.info(f\"User is: '{user.email}'\") // unsafe\n  ```\n- **Do** sanitize or remove sensitive information from data before logging. Ensure that logged information does not contain any personal or confidential data."}},{"id":"ruby_lang_weak_encryption_rc4","name":"ruby_lang_weak_encryption_rc4","shortDescription":{"text":"Usage of weak encryption algorithm (RC4)"},"fullDescription":{"text":"Usage of weak encryption algorithm (RC4)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing the RC4 encryption algorithm exposes your data to security risks. RC4 is outdated and has known vulnerabilities that can lead to data breaches.\n\n## Remediations\n\n- **Do not** use RC4 for encrypting data. Its vulnerabilities make it an insecure option for protecting sensitive information.\n  ```ruby\n  RC4.new(\"weak password encryption\") # unsafe\n  ```\n- **Do** use stronger, more secure encryption algorithms like bcrypt for handling sensitive data securely.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)","markdown":"## Description\n\nUsing the RC4 encryption algorithm exposes your data to security risks. RC4 is outdated and has known vulnerabilities that can lead to data breaches.\n\n## Remediations\n\n- **Do not** use RC4 for encrypting data. Its vulnerabilities make it an insecure option for protecting sensitive information.\n  ```ruby\n  RC4.new(\"weak password encryption\") # unsafe\n  ```\n- **Do** use stronger, more secure encryption algorithms like bcrypt for handling sensitive data securely.\n  ```ruby\n  BCrypt::Password.create('iLOVEdogs123')\n  ```\n\n## References\n\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)"}},{"id":"javascript_express_default_cookie_config","name":"javascript_express_default_cookie_config","shortDescription":{"text":"Usage of default cookie configuration"},"fullDescription":{"text":"Usage of default cookie configuration"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nUsing default cookie configurations can expose your application to security risks. This vulnerability arises when cookies are set with their default values, making them predictable and easier to exploit.\n\n## Remediations\n\n- **Do not** rely on default cookie names.\n- **Do** use generic, non-descriptive names for session cookies. This makes it harder for attackers to identify and exploit the session management mechanism of your application.\n- **Do** always specify a `maxAge` or `expires` value to control cookie lifetime.\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)","markdown":"## Description\n\nUsing default cookie configurations can expose your application to security risks. This vulnerability arises when cookies are set with their default values, making them predictable and easier to exploit.\n\n## Remediations\n\n- **Do not** rely on default cookie names.\n- **Do** use generic, non-descriptive names for session cookies. This makes it harder for attackers to identify and exploit the session management mechanism of your application.\n- **Do** always specify a `maxAge` or `expires` value to control cookie lifetime.\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)"}},{"id":"python_lang_http_url_using_user_input","name":"python_lang_http_url_using_user_input","shortDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"fullDescription":{"text":"Unsanitized user input in HTTP request (SSRF)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```python\n  host = request.GET[\"host\"]\n  \n  urllib.request.urlopen(f\"https://{host}\") # unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```python\n  host = \"api1.com\" if request.GET[\"host\"] == \"option1\" else \"api2.com\"\n  \n  urllib.request.urlopen(f\"https://{host}\")\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","markdown":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```python\n  host = request.GET[\"host\"]\n  \n  urllib.request.urlopen(f\"https://{host}\") # unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```python\n  host = \"api1.com\" if request.GET[\"host\"] == \"option1\" else \"api2.com\"\n  \n  urllib.request.urlopen(f\"https://{host}\")\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)"}},{"id":"ruby_third_parties_google_analytics","name":"ruby_third_parties_google_analytics","shortDescription":{"text":"Leakage of sensitive data to Google Analytics"},"fullDescription":{"text":"Leakage of sensitive data to Google Analytics"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nLeaking sensitive data to third-party analytics tools like Google Analytics is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to analytics libraries like Google Analytics.\n\n ## References\n- [Google Analytics docs](https://developers.google.com/analytics/devguides/reporting/)\n","markdown":"## Description\n\nLeaking sensitive data to third-party analytics tools like Google Analytics is a common cause of data leaks and can lead to data breaches.\n\n## Remediations\n\n- **Do** ensure all sensitive data is removed when sending data to analytics libraries like Google Analytics.\n\n ## References\n- [Google Analytics docs](https://developers.google.com/analytics/devguides/reporting/)\n"}},{"id":"go_gosec_file_permissions_file_perm","name":"go_gosec_file_permissions_file_perm","shortDescription":{"text":"Permissive file assignment"},"fullDescription":{"text":"Permissive file assignment"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nSetting overly permissive file permissions exposes your system to risks such as unauthorized access, data tampering, and potential system compromise. This vulnerability arises when files are created or updated without adequately restrictive permissions, allowing unauthorized users to read, modify, or execute files.\n\n## Remediations\n\n- **Do not** use overly permissive file permissions, such as `0777`, which grants read, write, and execute permissions to all users.\n- **Do** set file permissions to restrict access appropriately:\n  - `0400` for read-only access by the file's owner.\n  - `0200` for write-only access by the file's owner.\n  - `0600` for read and write access by the file's owner, suitable for files that the application needs to read from and write to.\n- **Do** use Go's `os` package to manage file permissions effectively. For example, use `os.OpenFile` with appropriate permission flags such as 0600.\n  ```go\n    f, err := os.OpenFile(\"file.txt\", os.O_CREATE|os.O_WRONLY, 0600)\n    ...\n  ```\n- **Do** verify file permissions after creation or update to ensure they are set as intended.\n- **Do** consider setting umask to a secure default, if your application creates multiple files, to ensure that files are created with safe default permissions.\n- **Do** regularly review and audit file permissions in your system to ensure they adhere to the principle of least privilege, minimizing the access level to what is strictly necessary for operational functionality.","markdown":"## Description\n\nSetting overly permissive file permissions exposes your system to risks such as unauthorized access, data tampering, and potential system compromise. This vulnerability arises when files are created or updated without adequately restrictive permissions, allowing unauthorized users to read, modify, or execute files.\n\n## Remediations\n\n- **Do not** use overly permissive file permissions, such as `0777`, which grants read, write, and execute permissions to all users.\n- **Do** set file permissions to restrict access appropriately:\n  - `0400` for read-only access by the file's owner.\n  - `0200` for write-only access by the file's owner.\n  - `0600` for read and write access by the file's owner, suitable for files that the application needs to read from and write to.\n- **Do** use Go's `os` package to manage file permissions effectively. For example, use `os.OpenFile` with appropriate permission flags such as 0600.\n  ```go\n    f, err := os.OpenFile(\"file.txt\", os.O_CREATE|os.O_WRONLY, 0600)\n    ...\n  ```\n- **Do** verify file permissions after creation or update to ensure they are set as intended.\n- **Do** consider setting umask to a secure default, if your application creates multiple files, to ensure that files are created with safe default permissions.\n- **Do** regularly review and audit file permissions in your system to ensure they adhere to the principle of least privilege, minimizing the access level to what is strictly necessary for operational functionality."}},{"id":"go_lang_cross_site_scripting","name":"go_lang_cross_site_scripting","shortDescription":{"text":"Unsanitized user input in HTTP response (XSS)"},"fullDescription":{"text":"Unsanitized user input in HTTP response (XSS)"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n\nIncluding unsanitized user input in HTTP responses exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in a response. This practice can lead to XSS vulnerabilities.\n```go\n  func bad(w http.ResponseWriter, r *http.Request) {\n    userInput := r.URL.Query().Get(\"input\")\n    fmt.Fprintf(w, \"\u003chtml\u003e\u003cbody\u003e%s\u003c/body\u003e\u003c/html\u003e\", userInput)\n  }\n```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","markdown":"## Description\n\nIncluding unsanitized user input in HTTP responses exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in a response. This practice can lead to XSS vulnerabilities.\n```go\n  func bad(w http.ResponseWriter, r *http.Request) {\n    userInput := r.URL.Query().Get(\"input\")\n    fmt.Fprintf(w, \"\u003chtml\u003e\u003cbody\u003e%s\u003c/body\u003e\u003c/html\u003e\", userInput)\n  }\n```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n"}},{"id":"python_django_debug_mode_enabled","name":"python_django_debug_mode_enabled","shortDescription":{"text":"Usage of Django debug mode"},"fullDescription":{"text":"Usage of Django debug mode"},"defaultConfiguration":{"level":"error"},"help":{"text":"## Description\n  \nWhen debug mode is enabled, Django displays detailed error pages with stack traces and other sensitive information when an error occurs. While this can be useful during development, debug mode should never be enabled in production or other such environments because it can lead to the exposure of sensitive data to unauthorized users.  \n\n## Remediations\n\n- **Do not** set DEBUG to True in production or other such environments\n```python\nDEBUG = True # not safe for production\n```\n- **Do** use environment variables to configure DEBUG mode appropriately for development and production.\n```python\nimport os\n\nDEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'\n```\n","markdown":"## Description\n  \nWhen debug mode is enabled, Django displays detailed error pages with stack traces and other sensitive information when an error occurs. While this can be useful during development, debug mode should never be enabled in production or other such environments because it can lead to the exposure of sensitive data to unauthorized users.  \n\n## Remediations\n\n- **Do not** set DEBUG to True in production or other such environments\n```python\nDEBUG = True # not safe for production\n```\n- **Do** use environment variables to configure DEBUG mode appropriately for development and production.\n```python\nimport os\n\nDEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'\n```\n"}}]}},"results":[{"ruleId":"javascript_lang_hardcoded_secret","message":{"text":"Usage of hard-coded secret"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/shared-wallets/add-shared-wallet/generate-key-flow/EnterPassword/EnterPassword.tsx"},"region":{"startLine":34,"startColumn":3,"endColumn":119,"endLine":34}}}],"partialFingerprints":{"primaryLocationLineHash":"fee4d82230b5bc2021a40b13713ac804_0"}},{"ruleId":"javascript_lang_hardcoded_secret","message":{"text":"Usage of hard-coded secret"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/ui/components/Account/EnableAccountPasswordPrompt/EnableAccountPasswordPrompt.stories.ts"},"region":{"startLine":24,"startColumn":5,"endColumn":36,"endLine":24}}}],"partialFingerprints":{"primaryLocationLineHash":"6d4c8cea11185171cf161f49dc013c55_0"}},{"ruleId":"javascript_lang_hardcoded_secret","message":{"text":"Usage of hard-coded secret"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/steps/AccountsSteps.ts"},"region":{"startLine":73,"startColumn":5,"endColumn":118,"endLine":74}}}],"partialFingerprints":{"primaryLocationLineHash":"8a3ac47a22c881c513653935132c4b9c_0"}},{"ruleId":"javascript_lang_hardcoded_secret","message":{"text":"Usage of hard-coded secret"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/steps/lockWalletSteps.ts"},"region":{"startLine":32,"startColumn":3,"endColumn":97,"endLine":32}}}],"partialFingerprints":{"primaryLocationLineHash":"0f81738e9ef9fb9708a8fb7a8c8266e7_0"}},{"ruleId":"javascript_lang_hardcoded_secret","message":{"text":"Usage of hard-coded secret"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/steps/multidelegationSteps.ts"},"region":{"startLine":49,"startColumn":1,"endColumn":37,"endLine":49}}}],"partialFingerprints":{"primaryLocationLineHash":"373d553c5f876611bf258f4d7bfd85e1_0"}},{"ruleId":"javascript_lang_hardcoded_secret","message":{"text":"Usage of hard-coded secret"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/steps/passwordSteps.ts"},"region":{"startLine":8,"startColumn":3,"endColumn":111,"endLine":9}}}],"partialFingerprints":{"primaryLocationLineHash":"36898d62987ae1dc4c09a49450004e62_0"}},{"ruleId":"javascript_lang_hardcoded_secret","message":{"text":"Usage of hard-coded secret"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/steps/sendTransactionSimpleSteps.ts"},"region":{"startLine":669,"startColumn":3,"endColumn":111,"endLine":670}}}],"partialFingerprints":{"primaryLocationLineHash":"8c5e1cf79405d52c9df63dea8d4e86fc_0"}},{"ruleId":"javascript_lang_hardcoded_secret","message":{"text":"Usage of hard-coded secret"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/steps/settingsSteps.ts"},"region":{"startLine":315,"startColumn":3,"endColumn":111,"endLine":316}}}],"partialFingerprints":{"primaryLocationLineHash":"0d49038ab72e1b513ffecc12d9cc7eea_0"}},{"ruleId":"javascript_lang_hardcoded_secret","message":{"text":"Usage of hard-coded secret"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/config/config.ts"},"region":{"startLine":33,"startColumn":3,"endColumn":34,"endLine":33}}}],"partialFingerprints":{"primaryLocationLineHash":"7b6e4df8d637feb59dabaafad4863d47_0"}},{"ruleId":"javascript_lang_dangerous_insert_html","message":{"text":"Unsanitized user input in dynamic HTML insertion (XSS)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/components/SideMenu/SideMenuContent.tsx"},"region":{"startLine":61,"startColumn":12,"endColumn":13,"endLine":63}}}],"partialFingerprints":{"primaryLocationLineHash":"23f23819a8a384bec802f898996cb87a_0"}},{"ruleId":"javascript_lang_dangerous_insert_html","message":{"text":"Unsanitized user input in dynamic HTML insertion (XSS)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/components/Typography/IogText/index.tsx"},"region":{"startLine":31,"startColumn":3,"endColumn":4,"endLine":63}}}],"partialFingerprints":{"primaryLocationLineHash":"37a219667d31b0f4f1fa1313cdece3c4_0"}},{"ruleId":"javascript_lang_dangerous_insert_html","message":{"text":"Unsanitized user input in dynamic HTML insertion (XSS)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/components/Typography/IogTitle/index.tsx"},"region":{"startLine":27,"startColumn":3,"endColumn":4,"endLine":55}}}],"partialFingerprints":{"primaryLocationLineHash":"0e8d683040ed23ab8bfb018ea33afe64_0"}},{"ruleId":"javascript_lang_non_literal_fs_filename","message":{"text":"Unsanitized dynamic input in file path"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/support/PidMonitor.ts"},"region":{"startLine":110,"startColumn":12,"endColumn":30,"endLine":110}}}],"partialFingerprints":{"primaryLocationLineHash":"ae067c3ceb3b685396f8313a6c6fa72d_0"}},{"ruleId":"javascript_lang_non_literal_fs_filename","message":{"text":"Unsanitized dynamic input in file path"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/support/PidMonitor.ts"},"region":{"startLine":111,"startColumn":9,"endColumn":47,"endLine":111}}}],"partialFingerprints":{"primaryLocationLineHash":"ae067c3ceb3b685396f8313a6c6fa72d_1"}},{"ruleId":"javascript_lang_non_literal_fs_filename","message":{"text":"Unsanitized dynamic input in file path"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/support/PidMonitor.ts"},"region":{"startLine":119,"startColumn":7,"endColumn":80,"endLine":119}}}],"partialFingerprints":{"primaryLocationLineHash":"ae067c3ceb3b685396f8313a6c6fa72d_2"}},{"ruleId":"javascript_lang_non_literal_fs_filename","message":{"text":"Unsanitized dynamic input in file path"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/utils/fileUtils.ts"},"region":{"startLine":5,"startColumn":10,"endColumn":62,"endLine":5}}}],"partialFingerprints":{"primaryLocationLineHash":"e81023fa47380a2296781720bd9b306c_0"}},{"ruleId":"javascript_lang_non_literal_fs_filename","message":{"text":"Unsanitized dynamic input in file path"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/utils/fileUtils.ts"},"region":{"startLine":9,"startColumn":3,"endColumn":65,"endLine":9}}}],"partialFingerprints":{"primaryLocationLineHash":"e81023fa47380a2296781720bd9b306c_1"}},{"ruleId":"javascript_lang_path_traversal","message":{"text":"Unsanitized dynamic input in file path"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/utils/fileUtils.ts"},"region":{"startLine":9,"startColumn":20,"endColumn":55,"endLine":9}}}],"partialFingerprints":{"primaryLocationLineHash":"e2fecf0e5519981786db3090ce320267_0"}},{"ruleId":"javascript_react_dangerously_set_inner_html","message":{"text":"Unsanitized user input in React inner HTML method (XSS)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/components/ProjectDetail/AboutDapp/index.tsx"},"region":{"startLine":32,"startColumn":41,"endColumn":74,"endLine":32}}}],"partialFingerprints":{"primaryLocationLineHash":"f9534ff7309efe405b531f456d3e0904_0"}},{"ruleId":"javascript_lang_dynamic_regex","message":{"text":"Unsanitized dynamic input in regular expression"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/ui/utils/word-list-search.ts"},"region":{"startLine":23,"startColumn":30,"endColumn":67,"endLine":23}}}],"partialFingerprints":{"primaryLocationLineHash":"27aa5e82c214e1d68978d490b1f3af5a_0"}},{"ruleId":"javascript_lang_message_handler_origin","message":{"text":"Missing origin check in message handler"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/trezor/trezor-content-script.ts"},"region":{"startLine":15,"startColumn":1,"endColumn":3,"endLine":20}}}],"partialFingerprints":{"primaryLocationLineHash":"e9786fd6c05a5939f1a7fb4953de9622_0"}},{"ruleId":"javascript_lang_message_handler_origin","message":{"text":"Missing origin check in message handler"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/trezor/trezor-usb-permissions.ts"},"region":{"startLine":47,"startColumn":1,"endColumn":3,"endLine":65}}}],"partialFingerprints":{"primaryLocationLineHash":"e6790d2d235856cce8795fb59f1ab5a6_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/popup.tsx"},"region":{"startLine":72,"startColumn":13,"endColumn":73,"endLine":72}}}],"partialFingerprints":{"primaryLocationLineHash":"7ead90b6fa4a8305d373d610068d1752_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/stores/slices/wallet-activities-slice.ts"},"region":{"startLine":179,"startColumn":9,"endColumn":53,"endLine":179}}}],"partialFingerprints":{"primaryLocationLineHash":"b3fb1a0f4434e7ac4602aecf034cadec_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/index.tsx"},"region":{"startLine":63,"startColumn":13,"endColumn":73,"endLine":63}}}],"partialFingerprints":{"primaryLocationLineHash":"2c4a8b255c6e6da6c7bfa33e5148b624_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/bitcoin/src/wallet/lib/common/address.ts"},"region":{"startLine":213,"startColumn":9,"endColumn":60,"endLine":213}}}],"partialFingerprints":{"primaryLocationLineHash":"e26edf315e86bed5cabbc12cfaf3201a_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/bitcoin/src/wallet/lib/wallet/BitcoinSigner.ts"},"region":{"startLine":27,"startColumn":9,"endColumn":27,"endLine":27}}}],"partialFingerprints":{"primaryLocationLineHash":"48121cb6c8b98cbbcf9a89ba88f279fa_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/bitcoin/src/wallet/lib/wallet/BitcoinWallet.ts"},"region":{"startLine":232,"startColumn":57,"endColumn":101,"endLine":232}}}],"partialFingerprints":{"primaryLocationLineHash":"80f80ad4c14ff5216be0a682de138903_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/bitcoin/src/wallet/lib/wallet/BitcoinWallet.ts"},"region":{"startLine":273,"startColumn":42,"endColumn":91,"endLine":273}}}],"partialFingerprints":{"primaryLocationLineHash":"80f80ad4c14ff5216be0a682de138903_1"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/bitcoin/src/wallet/lib/wallet/BitcoinWallet.ts"},"region":{"startLine":336,"startColumn":11,"endColumn":63,"endLine":336}}}],"partialFingerprints":{"primaryLocationLineHash":"80f80ad4c14ff5216be0a682de138903_2"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/bitcoin/src/wallet/lib/wallet/BitcoinWallet.ts"},"region":{"startLine":348,"startColumn":57,"endColumn":103,"endLine":348}}}],"partialFingerprints":{"primaryLocationLineHash":"80f80ad4c14ff5216be0a682de138903_3"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/cardano/src/wallet/lib/tx-history-loader.ts"},"region":{"startLine":57,"startColumn":48,"endColumn":109,"endLine":57}}}],"partialFingerprints":{"primaryLocationLineHash":"8a9167fa9c4b18b6292a8f80f1bcdf1e_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/shared-wallets/add-shared-wallet/restore-flow/validateJson.ts"},"region":{"startLine":40,"startColumn":72,"endColumn":97,"endLine":40}}}],"partialFingerprints":{"primaryLocationLineHash":"10bf63c468aa894556340b6f41939352_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/ui/components/WalletSetupRevamp/WalletSetupNamePasswordStepRevamp.tsx"},"region":{"startLine":59,"startColumn":29,"endColumn":74,"endLine":59}}}],"partialFingerprints":{"primaryLocationLineHash":"3c21416bbb0263035a692d0e51ccbe9c_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/elements/transactionDetails.ts"},"region":{"startLine":379,"startColumn":41,"endColumn":93,"endLine":379}}}],"partialFingerprints":{"primaryLocationLineHash":"b3e17bef0f3865c7ca1c3a863cabfb82_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/steps/onboardingSteps.ts"},"region":{"startLine":107,"startColumn":7,"endColumn":34,"endLine":107}}}],"partialFingerprints":{"primaryLocationLineHash":"1d13f1f623a75e637bec7a90b6a348eb_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/steps/onboardingSteps.ts"},"region":{"startLine":111,"startColumn":7,"endColumn":30,"endLine":111}}}],"partialFingerprints":{"primaryLocationLineHash":"1d13f1f623a75e637bec7a90b6a348eb_1"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/steps/transactionsSteps.ts"},"region":{"startLine":72,"startColumn":11,"endColumn":35,"endLine":72}}}],"partialFingerprints":{"primaryLocationLineHash":"2093293c927ef8b4e2511220623ab463_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/signTx.tsx"},"region":{"startLine":884,"startColumn":32,"endColumn":52,"endLine":884}}}],"partialFingerprints":{"primaryLocationLineHash":"160877eb36092f5df8bda057c2d6eea1_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/signTxUtil.ts"},"region":{"startLine":84,"startColumn":26,"endColumn":49,"endLine":84}}}],"partialFingerprints":{"primaryLocationLineHash":"596aa4d90be60c972d7dc63be7f060b2_0"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/signTxUtil.ts"},"region":{"startLine":104,"startColumn":15,"endColumn":65,"endLine":104}}}],"partialFingerprints":{"primaryLocationLineHash":"596aa4d90be60c972d7dc63be7f060b2_1"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/signTxUtil.ts"},"region":{"startLine":113,"startColumn":15,"endColumn":65,"endLine":113}}}],"partialFingerprints":{"primaryLocationLineHash":"596aa4d90be60c972d7dc63be7f060b2_2"}},{"ruleId":"javascript_lang_observable_timing","message":{"text":"Observable Timing Discrepancy"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/send.tsx"},"region":{"startLine":996,"startColumn":19,"endColumn":70,"endLine":996}}}],"partialFingerprints":{"primaryLocationLineHash":"6b83fc24a0d5fee8f121864ff77d5c5b_0"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/cache-nami-metadata.ts"},"region":{"startLine":66,"startColumn":24,"endColumn":37,"endLine":66}}}],"partialFingerprints":{"primaryLocationLineHash":"65268cc7fc9f459f3d65539e2fcafc88_0"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/elements/multidelegation/ManageStakingDrawer.ts"},"region":{"startLine":257,"startColumn":36,"endColumn":49,"endLine":257}}}],"partialFingerprints":{"primaryLocationLineHash":"3694a06a3c074d1f4259485bc9db5270_0"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/elements/multidelegation/MultidelegationPage.ts"},"region":{"startLine":710,"startColumn":23,"endColumn":36,"endLine":710}}}],"partialFingerprints":{"primaryLocationLineHash":"303c915de5ffc57167d259c7a01d3d7f_0"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/elements/multidelegation/MultidelegationPage.ts"},"region":{"startLine":716,"startColumn":23,"endColumn":36,"endLine":716}}}],"partialFingerprints":{"primaryLocationLineHash":"303c915de5ffc57167d259c7a01d3d7f_1"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/elements/onboarding/recoveryPhrasePage.ts"},"region":{"startLine":113,"startColumn":38,"endColumn":51,"endLine":113}}}],"partialFingerprints":{"primaryLocationLineHash":"87858e6cd17c3ef2ce5ccd0cc87e21dc_0"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/elements/onboarding/recoveryPhrasePage.ts"},"region":{"startLine":122,"startColumn":38,"endColumn":51,"endLine":122}}}],"partialFingerprints":{"primaryLocationLineHash":"87858e6cd17c3ef2ce5ccd0cc87e21dc_1"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/elements/settings/MessageSigningInputDrawer.ts"},"region":{"startLine":67,"startColumn":30,"endColumn":43,"endLine":67}}}],"partialFingerprints":{"primaryLocationLineHash":"93c219b31af0a758a31bb50ac8288e5c_0"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/utils/arrayUtils.ts"},"region":{"startLine":3,"startColumn":26,"endColumn":39,"endLine":3}}}],"partialFingerprints":{"primaryLocationLineHash":"3d6c5191070009f2b64c1306ca3fee50_0"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/hw/select-account.tsx"},"region":{"startLine":88,"startColumn":35,"endColumn":48,"endLine":88}}}],"partialFingerprints":{"primaryLocationLineHash":"b89a45bbb3344b70ea8de92ddb5321c9_0"}},{"ruleId":"javascript_lang_insufficiently_random_values","message":{"text":"Usage of insufficient random value"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/settings.tsx"},"region":{"startLine":325,"startColumn":27,"endColumn":40,"endLine":325}}}],"partialFingerprints":{"primaryLocationLineHash":"df3ab249424eb7f075749a828efe2d44_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/components/Announcement/Announcement.tsx"},"region":{"startLine":28,"startColumn":9,"endColumn":27,"endLine":28}}}],"partialFingerprints":{"primaryLocationLineHash":"f3758994a8c2acde2efaf67d0e63efce_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/components/ErrorBoundary/ErrorBoundary.tsx"},"region":{"startLine":22,"startColumn":5,"endColumn":74,"endLine":22}}}],"partialFingerprints":{"primaryLocationLineHash":"9145ed136c18e6c8fb6a6d3851753280_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/components/MainMenu/DropdownMenuOverlay/DropdownMenuOverlay.tsx"},"region":{"startLine":155,"startColumn":9,"endColumn":27,"endLine":155}}}],"partialFingerprints":{"primaryLocationLineHash":"02f670b3dd1e249e513c7a1096f94c4e_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/components/MainMenu/DropdownMenuOverlay/components/RenameWalletDrawer.tsx"},"region":{"startLine":84,"startColumn":7,"endColumn":26,"endLine":84}}}],"partialFingerprints":{"primaryLocationLineHash":"9b94d1d7df024650b6888ac36e46ff37_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/features/dapp/components/ConfirmData.tsx"},"region":{"startLine":74,"startColumn":9,"endColumn":28,"endLine":74}}}],"partialFingerprints":{"primaryLocationLineHash":"00c19b97d5b8a3cc458d6ff29043598c_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/features/dapp/components/ConfirmData.tsx"},"region":{"startLine":122,"startColumn":7,"endColumn":35,"endLine":122}}}],"partialFingerprints":{"primaryLocationLineHash":"00c19b97d5b8a3cc458d6ff29043598c_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/features/dapp/components/Connect.tsx"},"region":{"startLine":119,"startColumn":9,"endColumn":28,"endLine":119}}}],"partialFingerprints":{"primaryLocationLineHash":"0f4a714777fc6efddf6ed44cbd10c717_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/features/dapp/components/confirm-transaction/ConfirmTransaction.tsx"},"region":{"startLine":74,"startColumn":9,"endColumn":55,"endLine":74}}}],"partialFingerprints":{"primaryLocationLineHash":"846c2e8d0c838aadbefa45b8bd9433a8_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/features/dapp/components/confirm-transaction/hooks.ts"},"region":{"startLine":38,"startColumn":11,"endColumn":30,"endLine":38}}}],"partialFingerprints":{"primaryLocationLineHash":"14e217126091cbeae33d1ff5d691d66f_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/features/dapp/components/confirm-transaction/hooks.ts"},"region":{"startLine":125,"startColumn":11,"endColumn":30,"endLine":125}}}],"partialFingerprints":{"primaryLocationLineHash":"14e217126091cbeae33d1ff5d691d66f_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/features/dapp/components/confirm-transaction/hooks.ts"},"region":{"startLine":183,"startColumn":7,"endColumn":58,"endLine":183}}}],"partialFingerprints":{"primaryLocationLineHash":"14e217126091cbeae33d1ff5d691d66f_2"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/features/nami-migration/migration-tool/cross-extension-messaging/lace/create-lace-migration-open-listener.ts"},"region":{"startLine":14,"startColumn":9,"endColumn":109,"endLine":14}}}],"partialFingerprints":{"primaryLocationLineHash":"f40a949115ab2a57176a867d1eb0c335_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/hooks/useAsyncSwitchMap.ts"},"region":{"startLine":21,"startColumn":11,"endColumn":76,"endLine":21}}}],"partialFingerprints":{"primaryLocationLineHash":"7ea1f499932b59fd0d508bceb96690cf_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/hooks/useCollateral.ts"},"region":{"startLine":88,"startColumn":9,"endColumn":71,"endLine":88}}}],"partialFingerprints":{"primaryLocationLineHash":"6b007a397a634c7fc427dbca1a6fe363_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/hooks/useFatalError.ts"},"region":{"startLine":60,"startColumn":5,"endColumn":81,"endLine":60}}}],"partialFingerprints":{"primaryLocationLineHash":"81572189eb822720ffaa0757305e146c_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/hooks/useFatalError.ts"},"region":{"startLine":64,"startColumn":5,"endColumn":57,"endLine":64}}}],"partialFingerprints":{"primaryLocationLineHash":"81572189eb822720ffaa0757305e146c_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/hooks/useFetchCoinPrice.ts"},"region":{"startLine":58,"startColumn":64,"endColumn":83,"endLine":58}}}],"partialFingerprints":{"primaryLocationLineHash":"10b85d53ab30601555e4f62ab7aee514_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/hooks/useInitializeTx.ts"},"region":{"startLine":116,"startColumn":9,"endColumn":67,"endLine":116}}}],"partialFingerprints":{"primaryLocationLineHash":"c843149be59a4c9bcfebc86a7d2f296c_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/hooks/useWalletManager.ts"},"region":{"startLine":723,"startColumn":9,"endColumn":71,"endLine":723}}}],"partialFingerprints":{"primaryLocationLineHash":"dbd661d7de93c4b07493e222c330513e_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/cip30.ts"},"region":{"startLine":49,"startColumn":9,"endColumn":28,"endLine":49}}}],"partialFingerprints":{"primaryLocationLineHash":"0b5a8442e635d428b075d39287ae6cfa_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/cip30.ts"},"region":{"startLine":64,"startColumn":9,"endColumn":28,"endLine":64}}}],"partialFingerprints":{"primaryLocationLineHash":"0b5a8442e635d428b075d39287ae6cfa_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/onError.ts"},"region":{"startLine":59,"startColumn":5,"endColumn":73,"endLine":59}}}],"partialFingerprints":{"primaryLocationLineHash":"8fea94cda34d67e271a3053e5aef98a9_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/onStorageChange.ts"},"region":{"startLine":49,"startColumn":7,"endColumn":56,"endLine":49}}}],"partialFingerprints":{"primaryLocationLineHash":"6012bc1787daaa15040da45b70bb1c06_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/requestAccess.ts"},"region":{"startLine":24,"startColumn":5,"endColumn":74,"endLine":24}}}],"partialFingerprints":{"primaryLocationLineHash":"61a3f45923c1bda694a6566d3239b21c_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/requestAccess.ts"},"region":{"startLine":34,"startColumn":5,"endColumn":73,"endLine":34}}}],"partialFingerprints":{"primaryLocationLineHash":"61a3f45923c1bda694a6566d3239b21c_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/services/cardanoTokenPrices.ts"},"region":{"startLine":56,"startColumn":23,"endColumn":88,"endLine":56}}}],"partialFingerprints":{"primaryLocationLineHash":"5fa3d3fed24adbd008ae7f2bc33b4826_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/services/cardanoTokenPrices.ts"},"region":{"startLine":87,"startColumn":5,"endColumn":72,"endLine":87}}}],"partialFingerprints":{"primaryLocationLineHash":"5fa3d3fed24adbd008ae7f2bc33b4826_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/services/cardanoTokenPrices.ts"},"region":{"startLine":107,"startColumn":7,"endColumn":72,"endLine":107}}}],"partialFingerprints":{"primaryLocationLineHash":"5fa3d3fed24adbd008ae7f2bc33b4826_2"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/services/dappService.ts"},"region":{"startLine":78,"startColumn":3,"endColumn":22,"endLine":78}}}],"partialFingerprints":{"primaryLocationLineHash":"872b1b1b819ae817eaff598fe328cf1e_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/services/utilityServices.ts"},"region":{"startLine":107,"startColumn":16,"endColumn":35,"endLine":107}}}],"partialFingerprints":{"primaryLocationLineHash":"b5726b9b12f284931ff7f9b698b52549_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/services/utilityServices.ts"},"region":{"startLine":116,"startColumn":22,"endColumn":41,"endLine":116}}}],"partialFingerprints":{"primaryLocationLineHash":"b5726b9b12f284931ff7f9b698b52549_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/services/utilityServices.ts"},"region":{"startLine":166,"startColumn":5,"endColumn":24,"endLine":166}}}],"partialFingerprints":{"primaryLocationLineHash":"b5726b9b12f284931ff7f9b698b52549_2"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/services/utilityServices.ts"},"region":{"startLine":239,"startColumn":7,"endColumn":58,"endLine":239}}}],"partialFingerprints":{"primaryLocationLineHash":"b5726b9b12f284931ff7f9b698b52549_3"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/background/wallet.ts"},"region":{"startLine":531,"startColumn":5,"endColumn":63,"endLine":531}}}],"partialFingerprints":{"primaryLocationLineHash":"c3a6539663a0adaff9f82f34f6d50288_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/migrations/migrations.ts"},"region":{"startLine":100,"startColumn":13,"endColumn":14,"endLine":102}}}],"partialFingerprints":{"primaryLocationLineHash":"8881804b2b84ed6127d25ab6988ed5a4_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/migrations/migrations.ts"},"region":{"startLine":111,"startColumn":5,"endColumn":54,"endLine":111}}}],"partialFingerprints":{"primaryLocationLineHash":"8881804b2b84ed6127d25ab6988ed5a4_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/migrations/versions/v1_0_0.ts"},"region":{"startLine":51,"startColumn":11,"endColumn":105,"endLine":51}}}],"partialFingerprints":{"primaryLocationLineHash":"0e2ebc4cada321e8d6a7d69bf8922a62_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/migrations/versions/v1_10_2.ts"},"region":{"startLine":20,"startColumn":9,"endColumn":80,"endLine":20}}}],"partialFingerprints":{"primaryLocationLineHash":"002b161c4dc8fcbb09b16e6b89bc478d_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/lib/scripts/trezor/trezor-usb-permissions.ts"},"region":{"startLine":43,"startColumn":5,"endColumn":24,"endLine":43}}}],"partialFingerprints":{"primaryLocationLineHash":"525bc09a5cf6c4cd8ad58eee9b6749e0_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/providers/AnalyticsProvider/onChain.ts"},"region":{"startLine":113,"startColumn":5,"endColumn":24,"endLine":113}}}],"partialFingerprints":{"primaryLocationLineHash":"923ad8d3fcba1e463541118550587e7e_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/providers/PostHogClientProvider/client/PostHogClient.ts"},"region":{"startLine":246,"startColumn":9,"endColumn":63,"endLine":246}}}],"partialFingerprints":{"primaryLocationLineHash":"2157d06d8c3e2e393d8cb4271e30ce20_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/providers/PostHogClientProvider/client/PostHogClient.ts"},"region":{"startLine":336,"startColumn":9,"endColumn":75,"endLine":336}}}],"partialFingerprints":{"primaryLocationLineHash":"2157d06d8c3e2e393d8cb4271e30ce20_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/routes/DappConnectorView.tsx"},"region":{"startLine":163,"startColumn":3,"endColumn":24,"endLine":163}}}],"partialFingerprints":{"primaryLocationLineHash":"67c58d107f0d621c1702a1255bf28fff_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/utils/catch-and-brand-extension-api-error.ts"},"region":{"startLine":25,"startColumn":5,"endColumn":37,"endLine":25}}}],"partialFingerprints":{"primaryLocationLineHash":"c9229415609ab55297542bc0f521569a_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/utils/get-assets-information.ts"},"region":{"startLine":37,"startColumn":9,"endColumn":77,"endLine":37}}}],"partialFingerprints":{"primaryLocationLineHash":"898f1560aae12b98f1ad7ab113e8594f_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/utils/pgp.ts"},"region":{"startLine":207,"startColumn":9,"endColumn":28,"endLine":207}}}],"partialFingerprints":{"primaryLocationLineHash":"73e96770a789c57bd1dcd04b9b9110ff_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/utils/validators/address-book.ts"},"region":{"startLine":65,"startColumn":5,"endColumn":32,"endLine":65}}}],"partialFingerprints":{"primaryLocationLineHash":"379235fec6d0021f61858b7ca6e9b151_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/bitcoin-mode/features/multi-wallet/hardware-wallet/context.tsx"},"region":{"startLine":185,"startColumn":7,"endColumn":64,"endLine":185}}}],"partialFingerprints":{"primaryLocationLineHash":"6e4bad3cb6db48d2c235ffc86dbdd696_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/bitcoin-mode/features/multi-wallet/hardware-wallet/steps/Connect.tsx"},"region":{"startLine":96,"startColumn":9,"endColumn":64,"endLine":96}}}],"partialFingerprints":{"primaryLocationLineHash":"778fa6e752ead3b70a262550f75f6057_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/bitcoin-mode/features/multi-wallet/restore-wallet/steps/ScanShieldedMessage.tsx"},"region":{"startLine":139,"startColumn":9,"endColumn":58,"endLine":139}}}],"partialFingerprints":{"primaryLocationLineHash":"3f8fa68afcd9a5e7555ad1c1701072b6_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/services/api/categories/index.ts"},"region":{"startLine":52,"startColumn":9,"endColumn":64,"endLine":52}}}],"partialFingerprints":{"primaryLocationLineHash":"9bf4470374246bef1212d6872db86c86_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/services/api/d-app/index.ts"},"region":{"startLine":149,"startColumn":9,"endColumn":58,"endLine":149}}}],"partialFingerprints":{"primaryLocationLineHash":"f16b2a94b0ca7c88b9065244a697fed1_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/dapp/explorer/services/cache.ts"},"region":{"startLine":30,"startColumn":5,"endColumn":68,"endLine":30}}}],"partialFingerprints":{"primaryLocationLineHash":"d55af780605dc4f8ba97be0b85868cee_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/multi-wallet/hardware-wallet/context.tsx"},"region":{"startLine":185,"startColumn":7,"endColumn":64,"endLine":185}}}],"partialFingerprints":{"primaryLocationLineHash":"21e4e842c9b1018207f299f7087d87d7_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/multi-wallet/hardware-wallet/steps/Connect.tsx"},"region":{"startLine":84,"startColumn":9,"endColumn":64,"endLine":84}}}],"partialFingerprints":{"primaryLocationLineHash":"86b1676da95d09e1fe19f64f5890bbd2_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/multi-wallet/restore-wallet/steps/ScanShieldedMessage.tsx"},"region":{"startLine":139,"startColumn":9,"endColumn":58,"endLine":139}}}],"partialFingerprints":{"primaryLocationLineHash":"d7f67e20e5dbf06cc16ae7a93f0c9400_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/send-transaction/components/AssetPicker.tsx"},"region":{"startLine":155,"startColumn":27,"endColumn":46,"endLine":155}}}],"partialFingerprints":{"primaryLocationLineHash":"03d33f55ca6f14a310985160af55c806_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/send-transaction/components/SendTransactionDrawer/Footer.tsx"},"region":{"startLine":216,"startColumn":11,"endColumn":61,"endLine":216}}}],"partialFingerprints":{"primaryLocationLineHash":"e732d292fa81a9f317e3f25bbcfb87ee_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/send-transaction/components/SendTransactionDrawer/Footer.tsx"},"region":{"startLine":231,"startColumn":13,"endColumn":65,"endLine":231}}}],"partialFingerprints":{"primaryLocationLineHash":"e732d292fa81a9f317e3f25bbcfb87ee_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/send-transaction/components/SendTransactionDrawer/Footer.tsx"},"region":{"startLine":254,"startColumn":11,"endColumn":49,"endLine":254}}}],"partialFingerprints":{"primaryLocationLineHash":"e732d292fa81a9f317e3f25bbcfb87ee_2"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/settings/components/CustomSubmitApiDrawer.tsx"},"region":{"startLine":74,"startColumn":7,"endColumn":63,"endLine":74}}}],"partialFingerprints":{"primaryLocationLineHash":"18bf85446525ae4eae4289be728a5cfd_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/settings/components/NetworkChoice.tsx"},"region":{"startLine":90,"startColumn":7,"endColumn":54,"endLine":90}}}],"partialFingerprints":{"primaryLocationLineHash":"4bd02509040d3dea01264e3f234cc503_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/settings/components/SettingsPreferences/CurrencyDrawer.tsx"},"region":{"startLine":46,"startColumn":7,"endColumn":53,"endLine":46}}}],"partialFingerprints":{"primaryLocationLineHash":"5eff4b0307f0c0a9ba37764adee3b9a1_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/sign-message/useSignMessageState.tsx"},"region":{"startLine":72,"startColumn":9,"endColumn":61,"endLine":72}}}],"partialFingerprints":{"primaryLocationLineHash":"ed9b46ba7db3f16d2e771a5f8568ba38_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/browser-view/features/staking/components/StakePoolDetails/TransactionFail.tsx"},"region":{"startLine":63,"startColumn":7,"endColumn":65,"endLine":63}}}],"partialFingerprints":{"primaryLocationLineHash":"6d48c8c12b3e31d60343ed85d4d1e6de_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"apps/browser-extension-wallet/src/views/nami-mode/utils.ts"},"region":{"startLine":48,"startColumn":5,"endColumn":60,"endLine":48}}}],"partialFingerprints":{"primaryLocationLineHash":"157cbe926ea78a113c4aa7c20443c6a4_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/bitcoin/src/wallet/lib/providers/StubBitcoinDataProvider.ts"},"region":{"startLine":109,"startColumn":5,"endColumn":63,"endLine":109}}}],"partialFingerprints":{"primaryLocationLineHash":"b0f2b5f7ca2a3f0decded578464418c6_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/bitcoin/src/wallet/lib/tx-builder/utils.ts"},"region":{"startLine":40,"startColumn":9,"endColumn":72,"endLine":40}}}],"partialFingerprints":{"primaryLocationLineHash":"4c194e8ee5ec5cbdcdc4a0eab3602c56_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/cardano/src/wallet/lib/blockfrost-address-discovery.ts"},"region":{"startLine":66,"startColumn":7,"endColumn":82,"endLine":66}}}],"partialFingerprints":{"primaryLocationLineHash":"2d48289340b082a964ef57b557620951_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/cardano/src/wallet/lib/blockfrost-address-discovery.ts"},"region":{"startLine":201,"startColumn":7,"endColumn":103,"endLine":201}}}],"partialFingerprints":{"primaryLocationLineHash":"2d48289340b082a964ef57b557620951_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/cardano/src/wallet/lib/providers.ts"},"region":{"startLine":186,"startColumn":57,"endColumn":103,"endLine":186}}}],"partialFingerprints":{"primaryLocationLineHash":"699bccc66dfd45b2fc4add800ec256be_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/common/src/AppLogger.ts"},"region":{"startLine":77,"startColumn":7,"endColumn":50,"endLine":77}}}],"partialFingerprints":{"primaryLocationLineHash":"572caddc107d47f3bb84e3c54c32cd11_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/common/src/AppLogger.ts"},"region":{"startLine":83,"startColumn":7,"endColumn":50,"endLine":83}}}],"partialFingerprints":{"primaryLocationLineHash":"572caddc107d47f3bb84e3c54c32cd11_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/common/src/AppLogger.ts"},"region":{"startLine":96,"startColumn":7,"endColumn":42,"endLine":96}}}],"partialFingerprints":{"primaryLocationLineHash":"572caddc107d47f3bb84e3c54c32cd11_2"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/common/src/AppLogger.ts"},"region":{"startLine":101,"startColumn":7,"endColumn":72,"endLine":101}}}],"partialFingerprints":{"primaryLocationLineHash":"572caddc107d47f3bb84e3c54c32cd11_3"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/common/src/AppLogger.ts"},"region":{"startLine":106,"startColumn":5,"endColumn":40,"endLine":106}}}],"partialFingerprints":{"primaryLocationLineHash":"572caddc107d47f3bb84e3c54c32cd11_4"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/shared-wallets/add-shared-wallet/creation-flow/ShareWalletDetails/utils.ts"},"region":{"startLine":101,"startColumn":7,"endColumn":59,"endLine":101}}}],"partialFingerprints":{"primaryLocationLineHash":"e813b6ff890d2325c8db933b40cb5956_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/shared-wallets/add-shared-wallet/restore-flow/SharedWalletRestorationFlow.tsx"},"region":{"startLine":72,"startColumn":7,"endColumn":27,"endLine":72}}}],"partialFingerprints":{"primaryLocationLineHash":"74ff74d9898328c9a6acd956ccf0c6ee_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/ui/components/AddressFormBrowserView/AddressForm.tsx"},"region":{"startLine":52,"startColumn":7,"endColumn":64,"endLine":52}}}],"partialFingerprints":{"primaryLocationLineHash":"4c928672665d581357800ba0c0bc07bc_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/ui/components/WalletOwnAddressesDropdown/WalletOwnAddressDropdown.stories.tsx"},"region":{"startLine":40,"startColumn":34,"endColumn":77,"endLine":40}}}],"partialFingerprints":{"primaryLocationLineHash":"353b6673c3addaf5b008341a177cb4f0_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/core/src/ui/components/WalletOwnAddressesDropdown/WalletOwnAddressDropdown.stories.tsx"},"region":{"startLine":54,"startColumn":36,"endColumn":79,"endLine":54}}}],"partialFingerprints":{"primaryLocationLineHash":"353b6673c3addaf5b008341a177cb4f0_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/support/logger.ts"},"region":{"startLine":4,"startColumn":5,"endColumn":25,"endLine":4}}}],"partialFingerprints":{"primaryLocationLineHash":"48b4d039b3c63c9c6aac668ffc7099c2_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/support/logger.ts"},"region":{"startLine":8,"startColumn":5,"endColumn":26,"endLine":8}}}],"partialFingerprints":{"primaryLocationLineHash":"48b4d039b3c63c9c6aac668ffc7099c2_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/support/logger.ts"},"region":{"startLine":12,"startColumn":5,"endColumn":27,"endLine":12}}}],"partialFingerprints":{"primaryLocationLineHash":"48b4d039b3c63c9c6aac668ffc7099c2_2"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/e2e-tests/src/utils/networkManager.ts"},"region":{"startLine":92,"startColumn":15,"endColumn":16,"endLine":95}}}],"partialFingerprints":{"primaryLocationLineHash":"8c7c99d178b08629856a6902b9a28c15_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/adapters/transactions.ts"},"region":{"startLine":150,"startColumn":5,"endColumn":7,"endLine":153}}}],"partialFingerprints":{"primaryLocationLineHash":"321437d104964d2edf27cb1d8de2b9d8_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/adapters/transactions.ts"},"region":{"startLine":445,"startColumn":11,"endColumn":63,"endLine":445}}}],"partialFingerprints":{"primaryLocationLineHash":"321437d104964d2edf27cb1d8de2b9d8_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/components/confirmModal.tsx"},"region":{"startLine":281,"startColumn":9,"endColumn":29,"endLine":281}}}],"partialFingerprints":{"primaryLocationLineHash":"54490ffc0a31b9e66d0bd4486eca5e05_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/components/transactionBuilder.tsx"},"region":{"startLine":379,"startColumn":13,"endColumn":32,"endLine":379}}}],"partialFingerprints":{"primaryLocationLineHash":"74a302eefdf786f98fbce9f60a946745_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/components/transactionBuilder.tsx"},"region":{"startLine":594,"startColumn":13,"endColumn":32,"endLine":594}}}],"partialFingerprints":{"primaryLocationLineHash":"74a302eefdf786f98fbce9f60a946745_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/hw/select-account.tsx"},"region":{"startLine":108,"startColumn":7,"endColumn":48,"endLine":108}}}],"partialFingerprints":{"primaryLocationLineHash":"1e0bdb2188beb18c5a747cba3b8dd0a2_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/hw/trezorTx.tsx"},"region":{"startLine":81,"startColumn":9,"endColumn":49,"endLine":81}}}],"partialFingerprints":{"primaryLocationLineHash":"cc9ea6b2fffd059788a1df7d4b4b1d9c_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/enable.tsx"},"region":{"startLine":50,"startColumn":9,"endColumn":56,"endLine":50}}}],"partialFingerprints":{"primaryLocationLineHash":"26ff704a72664155a9721106aa4afd08_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/signData.tsx"},"region":{"startLine":79,"startColumn":7,"endColumn":56,"endLine":79}}}],"partialFingerprints":{"primaryLocationLineHash":"66f6b9ab84bd34301bc8945b36861ec6_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/signData.tsx"},"region":{"startLine":105,"startColumn":7,"endColumn":65,"endLine":105}}}],"partialFingerprints":{"primaryLocationLineHash":"66f6b9ab84bd34301bc8945b36861ec6_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/signTx.tsx"},"region":{"startLine":136,"startColumn":11,"endColumn":13,"endLine":140}}}],"partialFingerprints":{"primaryLocationLineHash":"b32a8dca04b844465573b6a0a353ed88_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/signTx.tsx"},"region":{"startLine":258,"startColumn":7,"endColumn":63,"endLine":258}}}],"partialFingerprints":{"primaryLocationLineHash":"b32a8dca04b844465573b6a0a353ed88_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/dapp-connector/signTxUtil.ts"},"region":{"startLine":237,"startColumn":5,"endColumn":6,"endLine":239}}}],"partialFingerprints":{"primaryLocationLineHash":"52aac3a666dbb0bb1aa320e405cd1cf5_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/nami/src/ui/app/pages/send.tsx"},"region":{"startLine":803,"startColumn":13,"endColumn":72,"endLine":803}}}],"partialFingerprints":{"primaryLocationLineHash":"bf046c48ebb5780b5d6861b3a88dd259_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/staking/.storybook/StakingStorybookProvider.tsx"},"region":{"startLine":22,"startColumn":7,"endColumn":51,"endLine":22}}}],"partialFingerprints":{"primaryLocationLineHash":"4a0bf2295694ccc8dd8843a8acd16eb8_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/staking/src/features/BrowsePools/hooks/useBrowsePoolsPersistence.tsx"},"region":{"startLine":40,"startColumn":7,"endColumn":52,"endLine":40}}}],"partialFingerprints":{"primaryLocationLineHash":"49b031d4bc3e86f2c88ce8b17ddc55df_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/staking/src/features/Drawer/TransactionFail.tsx"},"region":{"startLine":133,"startColumn":9,"endColumn":85,"endLine":133}}}],"partialFingerprints":{"primaryLocationLineHash":"f2ef9e3732328678c1e8bc84d0bb0fb9_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/staking/src/features/Drawer/TransactionFail.tsx"},"region":{"startLine":141,"startColumn":9,"endColumn":59,"endLine":141}}}],"partialFingerprints":{"primaryLocationLineHash":"f2ef9e3732328678c1e8bc84d0bb0fb9_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/staking/src/features/Drawer/preferences/PoolDetailsCard/PoolDetailsCard.stories.tsx"},"region":{"startLine":21,"startColumn":42,"endColumn":79,"endLine":21}}}],"partialFingerprints":{"primaryLocationLineHash":"23996fdeb35fac59eb66892d2f1f64b4_0"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/staking/src/features/Drawer/preferences/PoolDetailsCard/PoolDetailsCard.stories.tsx"},"region":{"startLine":32,"startColumn":42,"endColumn":79,"endLine":32}}}],"partialFingerprints":{"primaryLocationLineHash":"23996fdeb35fac59eb66892d2f1f64b4_1"}},{"ruleId":"javascript_lang_logger_leak","message":{"text":"Leakage of information in logger message"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"packages/staking/src/features/store/delegationPortfolioStore/stateMachine/stateTreeUtilities.ts"},"region":{"startLine":13,"startColumn":7,"endColumn":87,"endLine":13}}}],"partialFingerprints":{"primaryLocationLineHash":"f63104dd93e71e45202edb0844143206_0"}}]}]}
